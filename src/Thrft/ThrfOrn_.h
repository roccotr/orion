/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThrfOrn__H
#define ThrfOrn__H

#include <thrift/TDispatchProcessor.h>
#include "ThrfAlog_types.h"



class ThrfOrn_If {
 public:
  virtual ~ThrfOrn_If() {}
  virtual bool ping() = 0;
  virtual bool create(const ThrfL2ct& cCreateTable) = 0;
  virtual bool statement(const ThrfL2st& cStatement) = 0;
  virtual void query(ThrfL2qb& _return, const ThrfL2qr& cQuery) = 0;
  virtual void osql(std::vector<ThrfL2ks> & _return, const ThrfL2os& cQuery) = 0;
  virtual void gossp(ThrfGoss& _return, const ThrfGoss& cGossip, const bool bAll, const bool bDetails) = 0;
  virtual void command(ThrfCort& _return, const ThrfComm& cCommand) = 0;
  virtual bool localstatement(const std::vector<ThrfLstm> & cMutations) = 0;
  virtual void localquery(std::vector<ThrfL1ks> & _return, const std::vector<ThrfLqry> & cQueries) = 0;
  virtual void protobatch(std::vector<std::string> & _return, const std::vector<std::string> & sOpaquevalue) = 0;
  virtual void thriftbatch(std::vector<ThrfSrvr> & _return, const std::vector<ThrfSrvc> & cService) = 0;
};

class ThrfOrn_IfFactory {
 public:
  typedef ThrfOrn_If Handler;

  virtual ~ThrfOrn_IfFactory() {}

  virtual ThrfOrn_If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThrfOrn_If* /* handler */) = 0;
};

class ThrfOrn_IfSingletonFactory : virtual public ThrfOrn_IfFactory {
 public:
  ThrfOrn_IfSingletonFactory(const boost::shared_ptr<ThrfOrn_If>& iface) : iface_(iface) {}
  virtual ~ThrfOrn_IfSingletonFactory() {}

  virtual ThrfOrn_If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThrfOrn_If* /* handler */) {}

 protected:
  boost::shared_ptr<ThrfOrn_If> iface_;
};

class ThrfOrn_Null : virtual public ThrfOrn_If {
 public:
  virtual ~ThrfOrn_Null() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  bool create(const ThrfL2ct& /* cCreateTable */) {
    bool _return = false;
    return _return;
  }
  bool statement(const ThrfL2st& /* cStatement */) {
    bool _return = false;
    return _return;
  }
  void query(ThrfL2qb& /* _return */, const ThrfL2qr& /* cQuery */) {
    return;
  }
  void osql(std::vector<ThrfL2ks> & /* _return */, const ThrfL2os& /* cQuery */) {
    return;
  }
  void gossp(ThrfGoss& /* _return */, const ThrfGoss& /* cGossip */, const bool /* bAll */, const bool /* bDetails */) {
    return;
  }
  void command(ThrfCort& /* _return */, const ThrfComm& /* cCommand */) {
    return;
  }
  bool localstatement(const std::vector<ThrfLstm> & /* cMutations */) {
    bool _return = false;
    return _return;
  }
  void localquery(std::vector<ThrfL1ks> & /* _return */, const std::vector<ThrfLqry> & /* cQueries */) {
    return;
  }
  void protobatch(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* sOpaquevalue */) {
    return;
  }
  void thriftbatch(std::vector<ThrfSrvr> & /* _return */, const std::vector<ThrfSrvc> & /* cService */) {
    return;
  }
};


class ThrfOrn__ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThrfOrn__ping_args(const ThrfOrn__ping_args&);
  ThrfOrn__ping_args& operator=(const ThrfOrn__ping_args&);
  ThrfOrn__ping_args() {
  }

  virtual ~ThrfOrn__ping_args() throw();

  bool operator == (const ThrfOrn__ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThrfOrn__ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__ping_args& obj);
};


class ThrfOrn__ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThrfOrn__ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__ping_pargs& obj);
};

typedef struct _ThrfOrn__ping_result__isset {
  _ThrfOrn__ping_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__ping_result__isset;

class ThrfOrn__ping_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  ThrfOrn__ping_result(const ThrfOrn__ping_result&);
  ThrfOrn__ping_result& operator=(const ThrfOrn__ping_result&);
  ThrfOrn__ping_result() : success(0) {
  }

  virtual ~ThrfOrn__ping_result() throw();
  bool success;

  _ThrfOrn__ping_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ThrfOrn__ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__ping_result& obj);
};

typedef struct _ThrfOrn__ping_presult__isset {
  _ThrfOrn__ping_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__ping_presult__isset;

class ThrfOrn__ping_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~ThrfOrn__ping_presult() throw();
  bool* success;

  _ThrfOrn__ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__ping_presult& obj);
};

typedef struct _ThrfOrn__create_args__isset {
  _ThrfOrn__create_args__isset() : cCreateTable(false) {}
  bool cCreateTable :1;
} _ThrfOrn__create_args__isset;

class ThrfOrn__create_args {
 public:

  static const char* ascii_fingerprint; // = "8BA76D1C376499B5C7C9F676648CD5AF";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xA7,0x6D,0x1C,0x37,0x64,0x99,0xB5,0xC7,0xC9,0xF6,0x76,0x64,0x8C,0xD5,0xAF};

  ThrfOrn__create_args(const ThrfOrn__create_args&);
  ThrfOrn__create_args& operator=(const ThrfOrn__create_args&);
  ThrfOrn__create_args() {
  }

  virtual ~ThrfOrn__create_args() throw();
  ThrfL2ct cCreateTable;

  _ThrfOrn__create_args__isset __isset;

  void __set_cCreateTable(const ThrfL2ct& val);

  bool operator == (const ThrfOrn__create_args & rhs) const
  {
    if (!(cCreateTable == rhs.cCreateTable))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__create_args& obj);
};


class ThrfOrn__create_pargs {
 public:

  static const char* ascii_fingerprint; // = "8BA76D1C376499B5C7C9F676648CD5AF";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xA7,0x6D,0x1C,0x37,0x64,0x99,0xB5,0xC7,0xC9,0xF6,0x76,0x64,0x8C,0xD5,0xAF};


  virtual ~ThrfOrn__create_pargs() throw();
  const ThrfL2ct* cCreateTable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__create_pargs& obj);
};

typedef struct _ThrfOrn__create_result__isset {
  _ThrfOrn__create_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__create_result__isset;

class ThrfOrn__create_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  ThrfOrn__create_result(const ThrfOrn__create_result&);
  ThrfOrn__create_result& operator=(const ThrfOrn__create_result&);
  ThrfOrn__create_result() : success(0) {
  }

  virtual ~ThrfOrn__create_result() throw();
  bool success;

  _ThrfOrn__create_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ThrfOrn__create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__create_result& obj);
};

typedef struct _ThrfOrn__create_presult__isset {
  _ThrfOrn__create_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__create_presult__isset;

class ThrfOrn__create_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~ThrfOrn__create_presult() throw();
  bool* success;

  _ThrfOrn__create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__create_presult& obj);
};

typedef struct _ThrfOrn__statement_args__isset {
  _ThrfOrn__statement_args__isset() : cStatement(false) {}
  bool cStatement :1;
} _ThrfOrn__statement_args__isset;

class ThrfOrn__statement_args {
 public:

  static const char* ascii_fingerprint; // = "DF0BC2865E496BFF9A26146353E3F7E9";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x0B,0xC2,0x86,0x5E,0x49,0x6B,0xFF,0x9A,0x26,0x14,0x63,0x53,0xE3,0xF7,0xE9};

  ThrfOrn__statement_args(const ThrfOrn__statement_args&);
  ThrfOrn__statement_args& operator=(const ThrfOrn__statement_args&);
  ThrfOrn__statement_args() {
  }

  virtual ~ThrfOrn__statement_args() throw();
  ThrfL2st cStatement;

  _ThrfOrn__statement_args__isset __isset;

  void __set_cStatement(const ThrfL2st& val);

  bool operator == (const ThrfOrn__statement_args & rhs) const
  {
    if (!(cStatement == rhs.cStatement))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__statement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__statement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__statement_args& obj);
};


class ThrfOrn__statement_pargs {
 public:

  static const char* ascii_fingerprint; // = "DF0BC2865E496BFF9A26146353E3F7E9";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x0B,0xC2,0x86,0x5E,0x49,0x6B,0xFF,0x9A,0x26,0x14,0x63,0x53,0xE3,0xF7,0xE9};


  virtual ~ThrfOrn__statement_pargs() throw();
  const ThrfL2st* cStatement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__statement_pargs& obj);
};

typedef struct _ThrfOrn__statement_result__isset {
  _ThrfOrn__statement_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__statement_result__isset;

class ThrfOrn__statement_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  ThrfOrn__statement_result(const ThrfOrn__statement_result&);
  ThrfOrn__statement_result& operator=(const ThrfOrn__statement_result&);
  ThrfOrn__statement_result() : success(0) {
  }

  virtual ~ThrfOrn__statement_result() throw();
  bool success;

  _ThrfOrn__statement_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ThrfOrn__statement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__statement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__statement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__statement_result& obj);
};

typedef struct _ThrfOrn__statement_presult__isset {
  _ThrfOrn__statement_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__statement_presult__isset;

class ThrfOrn__statement_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~ThrfOrn__statement_presult() throw();
  bool* success;

  _ThrfOrn__statement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__statement_presult& obj);
};

typedef struct _ThrfOrn__query_args__isset {
  _ThrfOrn__query_args__isset() : cQuery(false) {}
  bool cQuery :1;
} _ThrfOrn__query_args__isset;

class ThrfOrn__query_args {
 public:

  static const char* ascii_fingerprint; // = "074586FE813AD475369EC0330B83CBF3";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x45,0x86,0xFE,0x81,0x3A,0xD4,0x75,0x36,0x9E,0xC0,0x33,0x0B,0x83,0xCB,0xF3};

  ThrfOrn__query_args(const ThrfOrn__query_args&);
  ThrfOrn__query_args& operator=(const ThrfOrn__query_args&);
  ThrfOrn__query_args() {
  }

  virtual ~ThrfOrn__query_args() throw();
  ThrfL2qr cQuery;

  _ThrfOrn__query_args__isset __isset;

  void __set_cQuery(const ThrfL2qr& val);

  bool operator == (const ThrfOrn__query_args & rhs) const
  {
    if (!(cQuery == rhs.cQuery))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__query_args& obj);
};


class ThrfOrn__query_pargs {
 public:

  static const char* ascii_fingerprint; // = "074586FE813AD475369EC0330B83CBF3";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x45,0x86,0xFE,0x81,0x3A,0xD4,0x75,0x36,0x9E,0xC0,0x33,0x0B,0x83,0xCB,0xF3};


  virtual ~ThrfOrn__query_pargs() throw();
  const ThrfL2qr* cQuery;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__query_pargs& obj);
};

typedef struct _ThrfOrn__query_result__isset {
  _ThrfOrn__query_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__query_result__isset;

class ThrfOrn__query_result {
 public:

  static const char* ascii_fingerprint; // = "7A541F6605237D5033E5F45A99F6A644";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x54,0x1F,0x66,0x05,0x23,0x7D,0x50,0x33,0xE5,0xF4,0x5A,0x99,0xF6,0xA6,0x44};

  ThrfOrn__query_result(const ThrfOrn__query_result&);
  ThrfOrn__query_result& operator=(const ThrfOrn__query_result&);
  ThrfOrn__query_result() {
  }

  virtual ~ThrfOrn__query_result() throw();
  ThrfL2qb success;

  _ThrfOrn__query_result__isset __isset;

  void __set_success(const ThrfL2qb& val);

  bool operator == (const ThrfOrn__query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__query_result& obj);
};

typedef struct _ThrfOrn__query_presult__isset {
  _ThrfOrn__query_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__query_presult__isset;

class ThrfOrn__query_presult {
 public:

  static const char* ascii_fingerprint; // = "7A541F6605237D5033E5F45A99F6A644";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x54,0x1F,0x66,0x05,0x23,0x7D,0x50,0x33,0xE5,0xF4,0x5A,0x99,0xF6,0xA6,0x44};


  virtual ~ThrfOrn__query_presult() throw();
  ThrfL2qb* success;

  _ThrfOrn__query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__query_presult& obj);
};

typedef struct _ThrfOrn__osql_args__isset {
  _ThrfOrn__osql_args__isset() : cQuery(false) {}
  bool cQuery :1;
} _ThrfOrn__osql_args__isset;

class ThrfOrn__osql_args {
 public:

  static const char* ascii_fingerprint; // = "695889FB9FC7A6FFAB40E2DC1C8F3E1D";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0x58,0x89,0xFB,0x9F,0xC7,0xA6,0xFF,0xAB,0x40,0xE2,0xDC,0x1C,0x8F,0x3E,0x1D};

  ThrfOrn__osql_args(const ThrfOrn__osql_args&);
  ThrfOrn__osql_args& operator=(const ThrfOrn__osql_args&);
  ThrfOrn__osql_args() {
  }

  virtual ~ThrfOrn__osql_args() throw();
  ThrfL2os cQuery;

  _ThrfOrn__osql_args__isset __isset;

  void __set_cQuery(const ThrfL2os& val);

  bool operator == (const ThrfOrn__osql_args & rhs) const
  {
    if (!(cQuery == rhs.cQuery))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__osql_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__osql_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__osql_args& obj);
};


class ThrfOrn__osql_pargs {
 public:

  static const char* ascii_fingerprint; // = "695889FB9FC7A6FFAB40E2DC1C8F3E1D";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0x58,0x89,0xFB,0x9F,0xC7,0xA6,0xFF,0xAB,0x40,0xE2,0xDC,0x1C,0x8F,0x3E,0x1D};


  virtual ~ThrfOrn__osql_pargs() throw();
  const ThrfL2os* cQuery;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__osql_pargs& obj);
};

typedef struct _ThrfOrn__osql_result__isset {
  _ThrfOrn__osql_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__osql_result__isset;

class ThrfOrn__osql_result {
 public:

  static const char* ascii_fingerprint; // = "F39E6EFC95635DC93B3E2DD04A3418DB";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x9E,0x6E,0xFC,0x95,0x63,0x5D,0xC9,0x3B,0x3E,0x2D,0xD0,0x4A,0x34,0x18,0xDB};

  ThrfOrn__osql_result(const ThrfOrn__osql_result&);
  ThrfOrn__osql_result& operator=(const ThrfOrn__osql_result&);
  ThrfOrn__osql_result() {
  }

  virtual ~ThrfOrn__osql_result() throw();
  std::vector<ThrfL2ks>  success;

  _ThrfOrn__osql_result__isset __isset;

  void __set_success(const std::vector<ThrfL2ks> & val);

  bool operator == (const ThrfOrn__osql_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__osql_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__osql_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__osql_result& obj);
};

typedef struct _ThrfOrn__osql_presult__isset {
  _ThrfOrn__osql_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__osql_presult__isset;

class ThrfOrn__osql_presult {
 public:

  static const char* ascii_fingerprint; // = "F39E6EFC95635DC93B3E2DD04A3418DB";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x9E,0x6E,0xFC,0x95,0x63,0x5D,0xC9,0x3B,0x3E,0x2D,0xD0,0x4A,0x34,0x18,0xDB};


  virtual ~ThrfOrn__osql_presult() throw();
  std::vector<ThrfL2ks> * success;

  _ThrfOrn__osql_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__osql_presult& obj);
};

typedef struct _ThrfOrn__gossp_args__isset {
  _ThrfOrn__gossp_args__isset() : cGossip(false), bAll(true), bDetails(true) {}
  bool cGossip :1;
  bool bAll :1;
  bool bDetails :1;
} _ThrfOrn__gossp_args__isset;

class ThrfOrn__gossp_args {
 public:

  static const char* ascii_fingerprint; // = "FAB7D8589D8990025DD751F2C4BE3ED5";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xB7,0xD8,0x58,0x9D,0x89,0x90,0x02,0x5D,0xD7,0x51,0xF2,0xC4,0xBE,0x3E,0xD5};

  ThrfOrn__gossp_args(const ThrfOrn__gossp_args&);
  ThrfOrn__gossp_args& operator=(const ThrfOrn__gossp_args&);
  ThrfOrn__gossp_args() : bAll(false), bDetails(false) {
  }

  virtual ~ThrfOrn__gossp_args() throw();
  ThrfGoss cGossip;
  bool bAll;
  bool bDetails;

  _ThrfOrn__gossp_args__isset __isset;

  void __set_cGossip(const ThrfGoss& val);

  void __set_bAll(const bool val);

  void __set_bDetails(const bool val);

  bool operator == (const ThrfOrn__gossp_args & rhs) const
  {
    if (!(cGossip == rhs.cGossip))
      return false;
    if (!(bAll == rhs.bAll))
      return false;
    if (!(bDetails == rhs.bDetails))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__gossp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__gossp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__gossp_args& obj);
};


class ThrfOrn__gossp_pargs {
 public:

  static const char* ascii_fingerprint; // = "FAB7D8589D8990025DD751F2C4BE3ED5";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xB7,0xD8,0x58,0x9D,0x89,0x90,0x02,0x5D,0xD7,0x51,0xF2,0xC4,0xBE,0x3E,0xD5};


  virtual ~ThrfOrn__gossp_pargs() throw();
  const ThrfGoss* cGossip;
  const bool* bAll;
  const bool* bDetails;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__gossp_pargs& obj);
};

typedef struct _ThrfOrn__gossp_result__isset {
  _ThrfOrn__gossp_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__gossp_result__isset;

class ThrfOrn__gossp_result {
 public:

  static const char* ascii_fingerprint; // = "81AB5975302AF008A3571E1ADE79F4FC";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0xAB,0x59,0x75,0x30,0x2A,0xF0,0x08,0xA3,0x57,0x1E,0x1A,0xDE,0x79,0xF4,0xFC};

  ThrfOrn__gossp_result(const ThrfOrn__gossp_result&);
  ThrfOrn__gossp_result& operator=(const ThrfOrn__gossp_result&);
  ThrfOrn__gossp_result() {
  }

  virtual ~ThrfOrn__gossp_result() throw();
  ThrfGoss success;

  _ThrfOrn__gossp_result__isset __isset;

  void __set_success(const ThrfGoss& val);

  bool operator == (const ThrfOrn__gossp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__gossp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__gossp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__gossp_result& obj);
};

typedef struct _ThrfOrn__gossp_presult__isset {
  _ThrfOrn__gossp_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__gossp_presult__isset;

class ThrfOrn__gossp_presult {
 public:

  static const char* ascii_fingerprint; // = "81AB5975302AF008A3571E1ADE79F4FC";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0xAB,0x59,0x75,0x30,0x2A,0xF0,0x08,0xA3,0x57,0x1E,0x1A,0xDE,0x79,0xF4,0xFC};


  virtual ~ThrfOrn__gossp_presult() throw();
  ThrfGoss* success;

  _ThrfOrn__gossp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__gossp_presult& obj);
};

typedef struct _ThrfOrn__command_args__isset {
  _ThrfOrn__command_args__isset() : cCommand(false) {}
  bool cCommand :1;
} _ThrfOrn__command_args__isset;

class ThrfOrn__command_args {
 public:

  static const char* ascii_fingerprint; // = "F4C24BCB787F3E4F8748812E232AF04D";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xC2,0x4B,0xCB,0x78,0x7F,0x3E,0x4F,0x87,0x48,0x81,0x2E,0x23,0x2A,0xF0,0x4D};

  ThrfOrn__command_args(const ThrfOrn__command_args&);
  ThrfOrn__command_args& operator=(const ThrfOrn__command_args&);
  ThrfOrn__command_args() {
  }

  virtual ~ThrfOrn__command_args() throw();
  ThrfComm cCommand;

  _ThrfOrn__command_args__isset __isset;

  void __set_cCommand(const ThrfComm& val);

  bool operator == (const ThrfOrn__command_args & rhs) const
  {
    if (!(cCommand == rhs.cCommand))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__command_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__command_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__command_args& obj);
};


class ThrfOrn__command_pargs {
 public:

  static const char* ascii_fingerprint; // = "F4C24BCB787F3E4F8748812E232AF04D";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xC2,0x4B,0xCB,0x78,0x7F,0x3E,0x4F,0x87,0x48,0x81,0x2E,0x23,0x2A,0xF0,0x4D};


  virtual ~ThrfOrn__command_pargs() throw();
  const ThrfComm* cCommand;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__command_pargs& obj);
};

typedef struct _ThrfOrn__command_result__isset {
  _ThrfOrn__command_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__command_result__isset;

class ThrfOrn__command_result {
 public:

  static const char* ascii_fingerprint; // = "D714C4D70D9BB6182F721FD1480AFCBF";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x14,0xC4,0xD7,0x0D,0x9B,0xB6,0x18,0x2F,0x72,0x1F,0xD1,0x48,0x0A,0xFC,0xBF};

  ThrfOrn__command_result(const ThrfOrn__command_result&);
  ThrfOrn__command_result& operator=(const ThrfOrn__command_result&);
  ThrfOrn__command_result() {
  }

  virtual ~ThrfOrn__command_result() throw();
  ThrfCort success;

  _ThrfOrn__command_result__isset __isset;

  void __set_success(const ThrfCort& val);

  bool operator == (const ThrfOrn__command_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__command_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__command_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__command_result& obj);
};

typedef struct _ThrfOrn__command_presult__isset {
  _ThrfOrn__command_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__command_presult__isset;

class ThrfOrn__command_presult {
 public:

  static const char* ascii_fingerprint; // = "D714C4D70D9BB6182F721FD1480AFCBF";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x14,0xC4,0xD7,0x0D,0x9B,0xB6,0x18,0x2F,0x72,0x1F,0xD1,0x48,0x0A,0xFC,0xBF};


  virtual ~ThrfOrn__command_presult() throw();
  ThrfCort* success;

  _ThrfOrn__command_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__command_presult& obj);
};

typedef struct _ThrfOrn__localstatement_args__isset {
  _ThrfOrn__localstatement_args__isset() : cMutations(false) {}
  bool cMutations :1;
} _ThrfOrn__localstatement_args__isset;

class ThrfOrn__localstatement_args {
 public:

  static const char* ascii_fingerprint; // = "854FCD7EF23AFB19BCB7A7D3ABC5A7B6";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x4F,0xCD,0x7E,0xF2,0x3A,0xFB,0x19,0xBC,0xB7,0xA7,0xD3,0xAB,0xC5,0xA7,0xB6};

  ThrfOrn__localstatement_args(const ThrfOrn__localstatement_args&);
  ThrfOrn__localstatement_args& operator=(const ThrfOrn__localstatement_args&);
  ThrfOrn__localstatement_args() {
  }

  virtual ~ThrfOrn__localstatement_args() throw();
  std::vector<ThrfLstm>  cMutations;

  _ThrfOrn__localstatement_args__isset __isset;

  void __set_cMutations(const std::vector<ThrfLstm> & val);

  bool operator == (const ThrfOrn__localstatement_args & rhs) const
  {
    if (!(cMutations == rhs.cMutations))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__localstatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__localstatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localstatement_args& obj);
};


class ThrfOrn__localstatement_pargs {
 public:

  static const char* ascii_fingerprint; // = "854FCD7EF23AFB19BCB7A7D3ABC5A7B6";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x4F,0xCD,0x7E,0xF2,0x3A,0xFB,0x19,0xBC,0xB7,0xA7,0xD3,0xAB,0xC5,0xA7,0xB6};


  virtual ~ThrfOrn__localstatement_pargs() throw();
  const std::vector<ThrfLstm> * cMutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localstatement_pargs& obj);
};

typedef struct _ThrfOrn__localstatement_result__isset {
  _ThrfOrn__localstatement_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__localstatement_result__isset;

class ThrfOrn__localstatement_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  ThrfOrn__localstatement_result(const ThrfOrn__localstatement_result&);
  ThrfOrn__localstatement_result& operator=(const ThrfOrn__localstatement_result&);
  ThrfOrn__localstatement_result() : success(0) {
  }

  virtual ~ThrfOrn__localstatement_result() throw();
  bool success;

  _ThrfOrn__localstatement_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ThrfOrn__localstatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__localstatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__localstatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localstatement_result& obj);
};

typedef struct _ThrfOrn__localstatement_presult__isset {
  _ThrfOrn__localstatement_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__localstatement_presult__isset;

class ThrfOrn__localstatement_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~ThrfOrn__localstatement_presult() throw();
  bool* success;

  _ThrfOrn__localstatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localstatement_presult& obj);
};

typedef struct _ThrfOrn__localquery_args__isset {
  _ThrfOrn__localquery_args__isset() : cQueries(false) {}
  bool cQueries :1;
} _ThrfOrn__localquery_args__isset;

class ThrfOrn__localquery_args {
 public:

  static const char* ascii_fingerprint; // = "F36DDD88C625DA3EA0C458267C730F2A";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x6D,0xDD,0x88,0xC6,0x25,0xDA,0x3E,0xA0,0xC4,0x58,0x26,0x7C,0x73,0x0F,0x2A};

  ThrfOrn__localquery_args(const ThrfOrn__localquery_args&);
  ThrfOrn__localquery_args& operator=(const ThrfOrn__localquery_args&);
  ThrfOrn__localquery_args() {
  }

  virtual ~ThrfOrn__localquery_args() throw();
  std::vector<ThrfLqry>  cQueries;

  _ThrfOrn__localquery_args__isset __isset;

  void __set_cQueries(const std::vector<ThrfLqry> & val);

  bool operator == (const ThrfOrn__localquery_args & rhs) const
  {
    if (!(cQueries == rhs.cQueries))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__localquery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__localquery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localquery_args& obj);
};


class ThrfOrn__localquery_pargs {
 public:

  static const char* ascii_fingerprint; // = "F36DDD88C625DA3EA0C458267C730F2A";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x6D,0xDD,0x88,0xC6,0x25,0xDA,0x3E,0xA0,0xC4,0x58,0x26,0x7C,0x73,0x0F,0x2A};


  virtual ~ThrfOrn__localquery_pargs() throw();
  const std::vector<ThrfLqry> * cQueries;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localquery_pargs& obj);
};

typedef struct _ThrfOrn__localquery_result__isset {
  _ThrfOrn__localquery_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__localquery_result__isset;

class ThrfOrn__localquery_result {
 public:

  static const char* ascii_fingerprint; // = "8A2B42A075CB8E220DFBE29FD243C826";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x2B,0x42,0xA0,0x75,0xCB,0x8E,0x22,0x0D,0xFB,0xE2,0x9F,0xD2,0x43,0xC8,0x26};

  ThrfOrn__localquery_result(const ThrfOrn__localquery_result&);
  ThrfOrn__localquery_result& operator=(const ThrfOrn__localquery_result&);
  ThrfOrn__localquery_result() {
  }

  virtual ~ThrfOrn__localquery_result() throw();
  std::vector<ThrfL1ks>  success;

  _ThrfOrn__localquery_result__isset __isset;

  void __set_success(const std::vector<ThrfL1ks> & val);

  bool operator == (const ThrfOrn__localquery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__localquery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__localquery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localquery_result& obj);
};

typedef struct _ThrfOrn__localquery_presult__isset {
  _ThrfOrn__localquery_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__localquery_presult__isset;

class ThrfOrn__localquery_presult {
 public:

  static const char* ascii_fingerprint; // = "8A2B42A075CB8E220DFBE29FD243C826";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x2B,0x42,0xA0,0x75,0xCB,0x8E,0x22,0x0D,0xFB,0xE2,0x9F,0xD2,0x43,0xC8,0x26};


  virtual ~ThrfOrn__localquery_presult() throw();
  std::vector<ThrfL1ks> * success;

  _ThrfOrn__localquery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__localquery_presult& obj);
};

typedef struct _ThrfOrn__protobatch_args__isset {
  _ThrfOrn__protobatch_args__isset() : sOpaquevalue(false) {}
  bool sOpaquevalue :1;
} _ThrfOrn__protobatch_args__isset;

class ThrfOrn__protobatch_args {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  ThrfOrn__protobatch_args(const ThrfOrn__protobatch_args&);
  ThrfOrn__protobatch_args& operator=(const ThrfOrn__protobatch_args&);
  ThrfOrn__protobatch_args() {
  }

  virtual ~ThrfOrn__protobatch_args() throw();
  std::vector<std::string>  sOpaquevalue;

  _ThrfOrn__protobatch_args__isset __isset;

  void __set_sOpaquevalue(const std::vector<std::string> & val);

  bool operator == (const ThrfOrn__protobatch_args & rhs) const
  {
    if (!(sOpaquevalue == rhs.sOpaquevalue))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__protobatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__protobatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__protobatch_args& obj);
};


class ThrfOrn__protobatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};


  virtual ~ThrfOrn__protobatch_pargs() throw();
  const std::vector<std::string> * sOpaquevalue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__protobatch_pargs& obj);
};

typedef struct _ThrfOrn__protobatch_result__isset {
  _ThrfOrn__protobatch_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__protobatch_result__isset;

class ThrfOrn__protobatch_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ThrfOrn__protobatch_result(const ThrfOrn__protobatch_result&);
  ThrfOrn__protobatch_result& operator=(const ThrfOrn__protobatch_result&);
  ThrfOrn__protobatch_result() {
  }

  virtual ~ThrfOrn__protobatch_result() throw();
  std::vector<std::string>  success;

  _ThrfOrn__protobatch_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ThrfOrn__protobatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__protobatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__protobatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__protobatch_result& obj);
};

typedef struct _ThrfOrn__protobatch_presult__isset {
  _ThrfOrn__protobatch_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__protobatch_presult__isset;

class ThrfOrn__protobatch_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ThrfOrn__protobatch_presult() throw();
  std::vector<std::string> * success;

  _ThrfOrn__protobatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__protobatch_presult& obj);
};

typedef struct _ThrfOrn__thriftbatch_args__isset {
  _ThrfOrn__thriftbatch_args__isset() : cService(false) {}
  bool cService :1;
} _ThrfOrn__thriftbatch_args__isset;

class ThrfOrn__thriftbatch_args {
 public:

  static const char* ascii_fingerprint; // = "E81D18BC3D49AD1CA614FC3AEF36DC33";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x1D,0x18,0xBC,0x3D,0x49,0xAD,0x1C,0xA6,0x14,0xFC,0x3A,0xEF,0x36,0xDC,0x33};

  ThrfOrn__thriftbatch_args(const ThrfOrn__thriftbatch_args&);
  ThrfOrn__thriftbatch_args& operator=(const ThrfOrn__thriftbatch_args&);
  ThrfOrn__thriftbatch_args() {
  }

  virtual ~ThrfOrn__thriftbatch_args() throw();
  std::vector<ThrfSrvc>  cService;

  _ThrfOrn__thriftbatch_args__isset __isset;

  void __set_cService(const std::vector<ThrfSrvc> & val);

  bool operator == (const ThrfOrn__thriftbatch_args & rhs) const
  {
    if (!(cService == rhs.cService))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__thriftbatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__thriftbatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__thriftbatch_args& obj);
};


class ThrfOrn__thriftbatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "E81D18BC3D49AD1CA614FC3AEF36DC33";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x1D,0x18,0xBC,0x3D,0x49,0xAD,0x1C,0xA6,0x14,0xFC,0x3A,0xEF,0x36,0xDC,0x33};


  virtual ~ThrfOrn__thriftbatch_pargs() throw();
  const std::vector<ThrfSrvc> * cService;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__thriftbatch_pargs& obj);
};

typedef struct _ThrfOrn__thriftbatch_result__isset {
  _ThrfOrn__thriftbatch_result__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__thriftbatch_result__isset;

class ThrfOrn__thriftbatch_result {
 public:

  static const char* ascii_fingerprint; // = "CE0AA3B771F53A8A8E891279EE12E527";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x0A,0xA3,0xB7,0x71,0xF5,0x3A,0x8A,0x8E,0x89,0x12,0x79,0xEE,0x12,0xE5,0x27};

  ThrfOrn__thriftbatch_result(const ThrfOrn__thriftbatch_result&);
  ThrfOrn__thriftbatch_result& operator=(const ThrfOrn__thriftbatch_result&);
  ThrfOrn__thriftbatch_result() {
  }

  virtual ~ThrfOrn__thriftbatch_result() throw();
  std::vector<ThrfSrvr>  success;

  _ThrfOrn__thriftbatch_result__isset __isset;

  void __set_success(const std::vector<ThrfSrvr> & val);

  bool operator == (const ThrfOrn__thriftbatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThrfOrn__thriftbatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrfOrn__thriftbatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__thriftbatch_result& obj);
};

typedef struct _ThrfOrn__thriftbatch_presult__isset {
  _ThrfOrn__thriftbatch_presult__isset() : success(false) {}
  bool success :1;
} _ThrfOrn__thriftbatch_presult__isset;

class ThrfOrn__thriftbatch_presult {
 public:

  static const char* ascii_fingerprint; // = "CE0AA3B771F53A8A8E891279EE12E527";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x0A,0xA3,0xB7,0x71,0xF5,0x3A,0x8A,0x8E,0x89,0x12,0x79,0xEE,0x12,0xE5,0x27};


  virtual ~ThrfOrn__thriftbatch_presult() throw();
  std::vector<ThrfSrvr> * success;

  _ThrfOrn__thriftbatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThrfOrn__thriftbatch_presult& obj);
};

class ThrfOrn_Client : virtual public ThrfOrn_If {
 public:
  ThrfOrn_Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThrfOrn_Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  bool create(const ThrfL2ct& cCreateTable);
  void send_create(const ThrfL2ct& cCreateTable);
  bool recv_create();
  bool statement(const ThrfL2st& cStatement);
  void send_statement(const ThrfL2st& cStatement);
  bool recv_statement();
  void query(ThrfL2qb& _return, const ThrfL2qr& cQuery);
  void send_query(const ThrfL2qr& cQuery);
  void recv_query(ThrfL2qb& _return);
  void osql(std::vector<ThrfL2ks> & _return, const ThrfL2os& cQuery);
  void send_osql(const ThrfL2os& cQuery);
  void recv_osql(std::vector<ThrfL2ks> & _return);
  void gossp(ThrfGoss& _return, const ThrfGoss& cGossip, const bool bAll, const bool bDetails);
  void send_gossp(const ThrfGoss& cGossip, const bool bAll, const bool bDetails);
  void recv_gossp(ThrfGoss& _return);
  void command(ThrfCort& _return, const ThrfComm& cCommand);
  void send_command(const ThrfComm& cCommand);
  void recv_command(ThrfCort& _return);
  bool localstatement(const std::vector<ThrfLstm> & cMutations);
  void send_localstatement(const std::vector<ThrfLstm> & cMutations);
  bool recv_localstatement();
  void localquery(std::vector<ThrfL1ks> & _return, const std::vector<ThrfLqry> & cQueries);
  void send_localquery(const std::vector<ThrfLqry> & cQueries);
  void recv_localquery(std::vector<ThrfL1ks> & _return);
  void protobatch(std::vector<std::string> & _return, const std::vector<std::string> & sOpaquevalue);
  void send_protobatch(const std::vector<std::string> & sOpaquevalue);
  void recv_protobatch(std::vector<std::string> & _return);
  void thriftbatch(std::vector<ThrfSrvr> & _return, const std::vector<ThrfSrvc> & cService);
  void send_thriftbatch(const std::vector<ThrfSrvc> & cService);
  void recv_thriftbatch(std::vector<ThrfSrvr> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThrfOrn_Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThrfOrn_If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThrfOrn_Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_statement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_osql(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_gossp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_command(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_localstatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_localquery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_protobatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_thriftbatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThrfOrn_Processor(boost::shared_ptr<ThrfOrn_If> iface) :
    iface_(iface) {
    processMap_["ping"] = &ThrfOrn_Processor::process_ping;
    processMap_["create"] = &ThrfOrn_Processor::process_create;
    processMap_["statement"] = &ThrfOrn_Processor::process_statement;
    processMap_["query"] = &ThrfOrn_Processor::process_query;
    processMap_["osql"] = &ThrfOrn_Processor::process_osql;
    processMap_["gossp"] = &ThrfOrn_Processor::process_gossp;
    processMap_["command"] = &ThrfOrn_Processor::process_command;
    processMap_["localstatement"] = &ThrfOrn_Processor::process_localstatement;
    processMap_["localquery"] = &ThrfOrn_Processor::process_localquery;
    processMap_["protobatch"] = &ThrfOrn_Processor::process_protobatch;
    processMap_["thriftbatch"] = &ThrfOrn_Processor::process_thriftbatch;
  }

  virtual ~ThrfOrn_Processor() {}
};

class ThrfOrn_ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThrfOrn_ProcessorFactory(const ::boost::shared_ptr< ThrfOrn_IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThrfOrn_IfFactory > handlerFactory_;
};

class ThrfOrn_Multiface : virtual public ThrfOrn_If {
 public:
  ThrfOrn_Multiface(std::vector<boost::shared_ptr<ThrfOrn_If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThrfOrn_Multiface() {}
 protected:
  std::vector<boost::shared_ptr<ThrfOrn_If> > ifaces_;
  ThrfOrn_Multiface() {}
  void add(boost::shared_ptr<ThrfOrn_If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  bool create(const ThrfL2ct& cCreateTable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create(cCreateTable);
    }
    return ifaces_[i]->create(cCreateTable);
  }

  bool statement(const ThrfL2st& cStatement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->statement(cStatement);
    }
    return ifaces_[i]->statement(cStatement);
  }

  void query(ThrfL2qb& _return, const ThrfL2qr& cQuery) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, cQuery);
    }
    ifaces_[i]->query(_return, cQuery);
    return;
  }

  void osql(std::vector<ThrfL2ks> & _return, const ThrfL2os& cQuery) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->osql(_return, cQuery);
    }
    ifaces_[i]->osql(_return, cQuery);
    return;
  }

  void gossp(ThrfGoss& _return, const ThrfGoss& cGossip, const bool bAll, const bool bDetails) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->gossp(_return, cGossip, bAll, bDetails);
    }
    ifaces_[i]->gossp(_return, cGossip, bAll, bDetails);
    return;
  }

  void command(ThrfCort& _return, const ThrfComm& cCommand) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->command(_return, cCommand);
    }
    ifaces_[i]->command(_return, cCommand);
    return;
  }

  bool localstatement(const std::vector<ThrfLstm> & cMutations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->localstatement(cMutations);
    }
    return ifaces_[i]->localstatement(cMutations);
  }

  void localquery(std::vector<ThrfL1ks> & _return, const std::vector<ThrfLqry> & cQueries) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->localquery(_return, cQueries);
    }
    ifaces_[i]->localquery(_return, cQueries);
    return;
  }

  void protobatch(std::vector<std::string> & _return, const std::vector<std::string> & sOpaquevalue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->protobatch(_return, sOpaquevalue);
    }
    ifaces_[i]->protobatch(_return, sOpaquevalue);
    return;
  }

  void thriftbatch(std::vector<ThrfSrvr> & _return, const std::vector<ThrfSrvc> & cService) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->thriftbatch(_return, cService);
    }
    ifaces_[i]->thriftbatch(_return, cService);
    return;
  }

};



#endif

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ThrfOrn_.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ThrfOrn_Handler : virtual public ThrfOrn_If {
 public:
  ThrfOrn_Handler() {
    // Your initialization goes here
  }

  bool ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  bool create(const ThrfL2ct& cCreateTable) {
    // Your implementation goes here
    printf("create\n");
  }

  bool statement(const ThrfL2st& cStatement) {
    // Your implementation goes here
    printf("statement\n");
  }

  void query(ThrfL2qb& _return, const ThrfL2qr& cQuery) {
    // Your implementation goes here
    printf("query\n");
  }

  void osql(std::vector<ThrfL2ks> & _return, const ThrfL2os& cQuery) {
    // Your implementation goes here
    printf("osql\n");
  }

  void gossp(ThrfGoss& _return, const ThrfGoss& cGossip, const bool bAll, const bool bDetails) {
    // Your implementation goes here
    printf("gossp\n");
  }

  void command(ThrfCort& _return, const ThrfComm& cCommand) {
    // Your implementation goes here
    printf("command\n");
  }

  bool localstatement(const std::vector<ThrfLstm> & cMutations) {
    // Your implementation goes here
    printf("localstatement\n");
  }

  void localquery(std::vector<ThrfL1ks> & _return, const std::vector<ThrfLqry> & cQueries) {
    // Your implementation goes here
    printf("localquery\n");
  }

  void protobatch(std::vector<std::string> & _return, const std::vector<std::string> & sOpaquevalue) {
    // Your implementation goes here
    printf("protobatch\n");
  }

  void thriftbatch(std::vector<ThrfSrvr> & _return, const std::vector<ThrfSrvc> & cService) {
    // Your implementation goes here
    printf("thriftbatch\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ThrfOrn_Handler> handler(new ThrfOrn_Handler());
  shared_ptr<TProcessor> processor(new ThrfOrn_Processor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}


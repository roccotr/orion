// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrtoPlan.proto

#ifndef PROTOBUF_PrtoPlan_2eproto__INCLUDED
#define PROTOBUF_PrtoPlan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PrtoPlan_2eproto();
void protobuf_AssignDesc_PrtoPlan_2eproto();
void protobuf_ShutdownFile_PrtoPlan_2eproto();

class PrtoPvlc;
class PrtoPval;

// ===================================================================

class PrtoPvlc : public ::google::protobuf::Message {
 public:
  PrtoPvlc();
  virtual ~PrtoPvlc();

  PrtoPvlc(const PrtoPvlc& from);

  inline PrtoPvlc& operator=(const PrtoPvlc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrtoPvlc& default_instance();

  void Swap(PrtoPvlc* other);

  // implements Message ----------------------------------------------

  PrtoPvlc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrtoPvlc& from);
  void MergeFrom(const PrtoPvlc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes sVvalue = 1;
  inline bool has_svvalue() const;
  inline void clear_svvalue();
  static const int kSVvalueFieldNumber = 1;
  inline const ::std::string& svvalue() const;
  inline void set_svvalue(const ::std::string& value);
  inline void set_svvalue(const char* value);
  inline void set_svvalue(const void* value, size_t size);
  inline ::std::string* mutable_svvalue();
  inline ::std::string* release_svvalue();
  inline void set_allocated_svvalue(::std::string* svvalue);

  // optional bytes sVcolumn = 2;
  inline bool has_svcolumn() const;
  inline void clear_svcolumn();
  static const int kSVcolumnFieldNumber = 2;
  inline const ::std::string& svcolumn() const;
  inline void set_svcolumn(const ::std::string& value);
  inline void set_svcolumn(const char* value);
  inline void set_svcolumn(const void* value, size_t size);
  inline ::std::string* mutable_svcolumn();
  inline ::std::string* release_svcolumn();
  inline void set_allocated_svcolumn(::std::string* svcolumn);

  // @@protoc_insertion_point(class_scope:PrtoPvlc)
 private:
  inline void set_has_svvalue();
  inline void clear_has_svvalue();
  inline void set_has_svcolumn();
  inline void clear_has_svcolumn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* svvalue_;
  ::std::string* svcolumn_;
  friend void  protobuf_AddDesc_PrtoPlan_2eproto();
  friend void protobuf_AssignDesc_PrtoPlan_2eproto();
  friend void protobuf_ShutdownFile_PrtoPlan_2eproto();

  void InitAsDefaultInstance();
  static PrtoPvlc* default_instance_;
};
// -------------------------------------------------------------------

class PrtoPval : public ::google::protobuf::Message {
 public:
  PrtoPval();
  virtual ~PrtoPval();

  PrtoPval(const PrtoPval& from);

  inline PrtoPval& operator=(const PrtoPval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrtoPval& default_instance();

  void Swap(PrtoPval* other);

  // implements Message ----------------------------------------------

  PrtoPval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrtoPval& from);
  void MergeFrom(const PrtoPval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PrtoPvlc cVvaluecells = 1;
  inline int cvvaluecells_size() const;
  inline void clear_cvvaluecells();
  static const int kCVvaluecellsFieldNumber = 1;
  inline const ::PrtoPvlc& cvvaluecells(int index) const;
  inline ::PrtoPvlc* mutable_cvvaluecells(int index);
  inline ::PrtoPvlc* add_cvvaluecells();
  inline const ::google::protobuf::RepeatedPtrField< ::PrtoPvlc >&
      cvvaluecells() const;
  inline ::google::protobuf::RepeatedPtrField< ::PrtoPvlc >*
      mutable_cvvaluecells();

  // @@protoc_insertion_point(class_scope:PrtoPval)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PrtoPvlc > cvvaluecells_;
  friend void  protobuf_AddDesc_PrtoPlan_2eproto();
  friend void protobuf_AssignDesc_PrtoPlan_2eproto();
  friend void protobuf_ShutdownFile_PrtoPlan_2eproto();

  void InitAsDefaultInstance();
  static PrtoPval* default_instance_;
};
// ===================================================================


// ===================================================================

// PrtoPvlc

// required bytes sVvalue = 1;
inline bool PrtoPvlc::has_svvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtoPvlc::set_has_svvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtoPvlc::clear_has_svvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtoPvlc::clear_svvalue() {
  if (svvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svvalue_->clear();
  }
  clear_has_svvalue();
}
inline const ::std::string& PrtoPvlc::svvalue() const {
  // @@protoc_insertion_point(field_get:PrtoPvlc.sVvalue)
  return *svvalue_;
}
inline void PrtoPvlc::set_svvalue(const ::std::string& value) {
  set_has_svvalue();
  if (svvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svvalue_ = new ::std::string;
  }
  svvalue_->assign(value);
  // @@protoc_insertion_point(field_set:PrtoPvlc.sVvalue)
}
inline void PrtoPvlc::set_svvalue(const char* value) {
  set_has_svvalue();
  if (svvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svvalue_ = new ::std::string;
  }
  svvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:PrtoPvlc.sVvalue)
}
inline void PrtoPvlc::set_svvalue(const void* value, size_t size) {
  set_has_svvalue();
  if (svvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svvalue_ = new ::std::string;
  }
  svvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PrtoPvlc.sVvalue)
}
inline ::std::string* PrtoPvlc::mutable_svvalue() {
  set_has_svvalue();
  if (svvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PrtoPvlc.sVvalue)
  return svvalue_;
}
inline ::std::string* PrtoPvlc::release_svvalue() {
  clear_has_svvalue();
  if (svvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svvalue_;
    svvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PrtoPvlc::set_allocated_svvalue(::std::string* svvalue) {
  if (svvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svvalue_;
  }
  if (svvalue) {
    set_has_svvalue();
    svvalue_ = svvalue;
  } else {
    clear_has_svvalue();
    svvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PrtoPvlc.sVvalue)
}

// optional bytes sVcolumn = 2;
inline bool PrtoPvlc::has_svcolumn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtoPvlc::set_has_svcolumn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtoPvlc::clear_has_svcolumn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtoPvlc::clear_svcolumn() {
  if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svcolumn_->clear();
  }
  clear_has_svcolumn();
}
inline const ::std::string& PrtoPvlc::svcolumn() const {
  // @@protoc_insertion_point(field_get:PrtoPvlc.sVcolumn)
  return *svcolumn_;
}
inline void PrtoPvlc::set_svcolumn(const ::std::string& value) {
  set_has_svcolumn();
  if (svcolumn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svcolumn_ = new ::std::string;
  }
  svcolumn_->assign(value);
  // @@protoc_insertion_point(field_set:PrtoPvlc.sVcolumn)
}
inline void PrtoPvlc::set_svcolumn(const char* value) {
  set_has_svcolumn();
  if (svcolumn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svcolumn_ = new ::std::string;
  }
  svcolumn_->assign(value);
  // @@protoc_insertion_point(field_set_char:PrtoPvlc.sVcolumn)
}
inline void PrtoPvlc::set_svcolumn(const void* value, size_t size) {
  set_has_svcolumn();
  if (svcolumn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svcolumn_ = new ::std::string;
  }
  svcolumn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PrtoPvlc.sVcolumn)
}
inline ::std::string* PrtoPvlc::mutable_svcolumn() {
  set_has_svcolumn();
  if (svcolumn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svcolumn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PrtoPvlc.sVcolumn)
  return svcolumn_;
}
inline ::std::string* PrtoPvlc::release_svcolumn() {
  clear_has_svcolumn();
  if (svcolumn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svcolumn_;
    svcolumn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PrtoPvlc::set_allocated_svcolumn(::std::string* svcolumn) {
  if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svcolumn_;
  }
  if (svcolumn) {
    set_has_svcolumn();
    svcolumn_ = svcolumn;
  } else {
    clear_has_svcolumn();
    svcolumn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PrtoPvlc.sVcolumn)
}

// -------------------------------------------------------------------

// PrtoPval

// repeated .PrtoPvlc cVvaluecells = 1;
inline int PrtoPval::cvvaluecells_size() const {
  return cvvaluecells_.size();
}
inline void PrtoPval::clear_cvvaluecells() {
  cvvaluecells_.Clear();
}
inline const ::PrtoPvlc& PrtoPval::cvvaluecells(int index) const {
  // @@protoc_insertion_point(field_get:PrtoPval.cVvaluecells)
  return cvvaluecells_.Get(index);
}
inline ::PrtoPvlc* PrtoPval::mutable_cvvaluecells(int index) {
  // @@protoc_insertion_point(field_mutable:PrtoPval.cVvaluecells)
  return cvvaluecells_.Mutable(index);
}
inline ::PrtoPvlc* PrtoPval::add_cvvaluecells() {
  // @@protoc_insertion_point(field_add:PrtoPval.cVvaluecells)
  return cvvaluecells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PrtoPvlc >&
PrtoPval::cvvaluecells() const {
  // @@protoc_insertion_point(field_list:PrtoPval.cVvaluecells)
  return cvvaluecells_;
}
inline ::google::protobuf::RepeatedPtrField< ::PrtoPvlc >*
PrtoPval::mutable_cvvaluecells() {
  // @@protoc_insertion_point(field_mutable_list:PrtoPval.cVvaluecells)
  return &cvvaluecells_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PrtoPlan_2eproto__INCLUDED

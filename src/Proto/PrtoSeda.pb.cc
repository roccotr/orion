// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrtoSeda.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PrtoSeda.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tomting {
namespace orion {

namespace {

const ::google::protobuf::Descriptor* PrtoMktr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoMktr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoQres_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoQres_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoSeda_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoSeda_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* iCcompactiontype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PrtoSeda_2eproto() {
  protobuf_AddDesc_PrtoSeda_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PrtoSeda.proto");
  GOOGLE_CHECK(file != NULL);
  PrtoMktr_descriptor_ = file->message_type(0);
  static const int PrtoMktr_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, bvleaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, svhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, ivmerkeltreedataposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, cvchildren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, cvkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, cvvalue_),
  };
  PrtoMktr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoMktr_descriptor_,
      PrtoMktr::default_instance_,
      PrtoMktr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoMktr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoMktr));
  PrtoQres_descriptor_ = file->message_type(1);
  static const int PrtoQres_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, svnodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, cvkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, bvresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, cvvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, bvdigest_),
  };
  PrtoQres_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoQres_descriptor_,
      PrtoQres::default_instance_,
      PrtoQres_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoQres, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoQres));
  PrtoSeda_descriptor_ = file->message_type(2);
  static const int PrtoSeda_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, svnamespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, svtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, ivcompactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, svmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, cvgossipelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, cvstatement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, svcallback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, cvquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, cvlistqueryresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, cvlistgossipelement_),
  };
  PrtoSeda_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoSeda_descriptor_,
      PrtoSeda::default_instance_,
      PrtoSeda_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSeda, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoSeda));
  iCcompactiontype_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PrtoSeda_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoMktr_descriptor_, &PrtoMktr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoQres_descriptor_, &PrtoQres::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoSeda_descriptor_, &PrtoSeda::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PrtoSeda_2eproto() {
  delete PrtoMktr::default_instance_;
  delete PrtoMktr_reflection_;
  delete PrtoQres::default_instance_;
  delete PrtoQres_reflection_;
  delete PrtoSeda::default_instance_;
  delete PrtoSeda_reflection_;
}

void protobuf_AddDesc_PrtoSeda_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::tomting::orion::protobuf_AddDesc_PrtoAlog_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PrtoSeda.proto\022\021com.tomting.orion\032\016Prt"
    "oAlog.proto\"\327\001\n\010PrtoMktr\022\016\n\006bVleaf\030\001 \002(\010"
    "\022\016\n\006sVhash\030\002 \002(\014\022 \n\030iVmerkeltreedataposi"
    "tion\030\003 \001(\005\022/\n\ncVchildren\030\004 \003(\0132\033.com.tom"
    "ting.orion.PrtoMktr\022*\n\005cVkey\030\005 \001(\0132\033.com"
    ".tomting.orion.PrtoLkey\022,\n\007cVvalue\030\006 \001(\013"
    "2\033.com.tomting.orion.PrtoLval\"\241\001\n\010PrtoQr"
    "es\022\020\n\010sVnodeid\030\001 \002(\014\022*\n\005cVkey\030\002 \002(\0132\033.co"
    "m.tomting.orion.PrtoLkey\022\020\n\010bVresult\030\003 \002"
    "(\010\022,\n\007cVvalue\030\004 \002(\0132\033.com.tomting.orion."
    "PrtoLval\022\027\n\010bVdigest\030\005 \002(\010:\005false\"\236\003\n\010Pr"
    "toSeda\022\023\n\013sVnamespace\030\001 \001(\014\022\017\n\007sVtable\030\002"
    " \001(\014\022=\n\020iVcompactiontype\030\003 \001(\0162#.com.tom"
    "ting.orion.iCcompactiontype\022\021\n\tsVmessage"
    "\030\004 \001(\014\0224\n\017cVgossipelement\030\005 \001(\0132\033.com.to"
    "mting.orion.PrtoGoel\0220\n\013cVstatement\030\006 \001("
    "\0132\033.com.tomting.orion.PrtoLstm\022\022\n\nsVcall"
    "back\030\007 \001(\014\022,\n\007cVquery\030\010 \001(\0132\033.com.tomtin"
    "g.orion.PrtoLqry\0226\n\021cVlistqueryresult\030\t "
    "\003(\0132\033.com.tomting.orion.PrtoQres\0228\n\023cVli"
    "stgossipelement\030\n \003(\0132\033.com.tomting.orio"
    "n.PrtoGoel*>\n\020iCcompactiontype\022\t\n\005MINOR\020"
    "\000\022\t\n\005MAJOR\020\001\022\t\n\005MERGE\020\002\022\t\n\005FLUSH\020\003", 914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PrtoSeda.proto", &protobuf_RegisterTypes);
  PrtoMktr::default_instance_ = new PrtoMktr();
  PrtoQres::default_instance_ = new PrtoQres();
  PrtoSeda::default_instance_ = new PrtoSeda();
  PrtoMktr::default_instance_->InitAsDefaultInstance();
  PrtoQres::default_instance_->InitAsDefaultInstance();
  PrtoSeda::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PrtoSeda_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PrtoSeda_2eproto {
  StaticDescriptorInitializer_PrtoSeda_2eproto() {
    protobuf_AddDesc_PrtoSeda_2eproto();
  }
} static_descriptor_initializer_PrtoSeda_2eproto_;
const ::google::protobuf::EnumDescriptor* iCcompactiontype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCcompactiontype_descriptor_;
}
bool iCcompactiontype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoMktr::kBVleafFieldNumber;
const int PrtoMktr::kSVhashFieldNumber;
const int PrtoMktr::kIVmerkeltreedatapositionFieldNumber;
const int PrtoMktr::kCVchildrenFieldNumber;
const int PrtoMktr::kCVkeyFieldNumber;
const int PrtoMktr::kCVvalueFieldNumber;
#endif  // !_MSC_VER

PrtoMktr::PrtoMktr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoMktr)
}

void PrtoMktr::InitAsDefaultInstance() {
  cvkey_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
  cvvalue_ = const_cast< ::com::tomting::orion::PrtoLval*>(&::com::tomting::orion::PrtoLval::default_instance());
}

PrtoMktr::PrtoMktr(const PrtoMktr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoMktr)
}

void PrtoMktr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bvleaf_ = false;
  svhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivmerkeltreedataposition_ = 0;
  cvkey_ = NULL;
  cvvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoMktr::~PrtoMktr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoMktr)
  SharedDtor();
}

void PrtoMktr::SharedDtor() {
  if (svhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svhash_;
  }
  if (this != default_instance_) {
    delete cvkey_;
    delete cvvalue_;
  }
}

void PrtoMktr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoMktr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoMktr_descriptor_;
}

const PrtoMktr& PrtoMktr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSeda_2eproto();
  return *default_instance_;
}

PrtoMktr* PrtoMktr::default_instance_ = NULL;

PrtoMktr* PrtoMktr::New() const {
  return new PrtoMktr;
}

void PrtoMktr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoMktr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(bvleaf_, ivmerkeltreedataposition_);
    if (has_svhash()) {
      if (svhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svhash_->clear();
      }
    }
    if (has_cvkey()) {
      if (cvkey_ != NULL) cvkey_->::com::tomting::orion::PrtoLkey::Clear();
    }
    if (has_cvvalue()) {
      if (cvvalue_ != NULL) cvvalue_->::com::tomting::orion::PrtoLval::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cvchildren_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoMktr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoMktr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bVleaf = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvleaf_)));
          set_has_bvleaf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVhash;
        break;
      }

      // required bytes sVhash = 2;
      case 2: {
        if (tag == 18) {
         parse_sVhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVmerkeltreedataposition;
        break;
      }

      // optional int32 iVmerkeltreedataposition = 3;
      case 3: {
        if (tag == 24) {
         parse_iVmerkeltreedataposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivmerkeltreedataposition_)));
          set_has_ivmerkeltreedataposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVchildren;
        break;
      }

      // repeated .com.tomting.orion.PrtoMktr cVchildren = 4;
      case 4: {
        if (tag == 34) {
         parse_cVchildren:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvchildren()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVchildren;
        if (input->ExpectTag(42)) goto parse_cVkey;
        break;
      }

      // optional .com.tomting.orion.PrtoLkey cVkey = 5;
      case 5: {
        if (tag == 42) {
         parse_cVkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cVvalue;
        break;
      }

      // optional .com.tomting.orion.PrtoLval cVvalue = 6;
      case 6: {
        if (tag == 50) {
         parse_cVvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoMktr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoMktr)
  return false;
#undef DO_
}

void PrtoMktr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoMktr)
  // required bool bVleaf = 1;
  if (has_bvleaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bvleaf(), output);
  }

  // required bytes sVhash = 2;
  if (has_svhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svhash(), output);
  }

  // optional int32 iVmerkeltreedataposition = 3;
  if (has_ivmerkeltreedataposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ivmerkeltreedataposition(), output);
  }

  // repeated .com.tomting.orion.PrtoMktr cVchildren = 4;
  for (int i = 0; i < this->cvchildren_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvchildren(i), output);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey = 5;
  if (has_cvkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cvkey(), output);
  }

  // optional .com.tomting.orion.PrtoLval cVvalue = 6;
  if (has_cvvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cvvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoMktr)
}

::google::protobuf::uint8* PrtoMktr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoMktr)
  // required bool bVleaf = 1;
  if (has_bvleaf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bvleaf(), target);
  }

  // required bytes sVhash = 2;
  if (has_svhash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svhash(), target);
  }

  // optional int32 iVmerkeltreedataposition = 3;
  if (has_ivmerkeltreedataposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ivmerkeltreedataposition(), target);
  }

  // repeated .com.tomting.orion.PrtoMktr cVchildren = 4;
  for (int i = 0; i < this->cvchildren_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvchildren(i), target);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey = 5;
  if (has_cvkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cvkey(), target);
  }

  // optional .com.tomting.orion.PrtoLval cVvalue = 6;
  if (has_cvvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cvvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoMktr)
  return target;
}

int PrtoMktr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bVleaf = 1;
    if (has_bvleaf()) {
      total_size += 1 + 1;
    }

    // required bytes sVhash = 2;
    if (has_svhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svhash());
    }

    // optional int32 iVmerkeltreedataposition = 3;
    if (has_ivmerkeltreedataposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivmerkeltreedataposition());
    }

    // optional .com.tomting.orion.PrtoLkey cVkey = 5;
    if (has_cvkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey());
    }

    // optional .com.tomting.orion.PrtoLval cVvalue = 6;
    if (has_cvvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvvalue());
    }

  }
  // repeated .com.tomting.orion.PrtoMktr cVchildren = 4;
  total_size += 1 * this->cvchildren_size();
  for (int i = 0; i < this->cvchildren_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvchildren(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoMktr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoMktr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoMktr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoMktr::MergeFrom(const PrtoMktr& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvchildren_.MergeFrom(from.cvchildren_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bvleaf()) {
      set_bvleaf(from.bvleaf());
    }
    if (from.has_svhash()) {
      set_svhash(from.svhash());
    }
    if (from.has_ivmerkeltreedataposition()) {
      set_ivmerkeltreedataposition(from.ivmerkeltreedataposition());
    }
    if (from.has_cvkey()) {
      mutable_cvkey()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey());
    }
    if (from.has_cvvalue()) {
      mutable_cvvalue()->::com::tomting::orion::PrtoLval::MergeFrom(from.cvvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoMktr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoMktr::CopyFrom(const PrtoMktr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoMktr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cvchildren())) return false;
  if (has_cvkey()) {
    if (!this->cvkey().IsInitialized()) return false;
  }
  if (has_cvvalue()) {
    if (!this->cvvalue().IsInitialized()) return false;
  }
  return true;
}

void PrtoMktr::Swap(PrtoMktr* other) {
  if (other != this) {
    std::swap(bvleaf_, other->bvleaf_);
    std::swap(svhash_, other->svhash_);
    std::swap(ivmerkeltreedataposition_, other->ivmerkeltreedataposition_);
    cvchildren_.Swap(&other->cvchildren_);
    std::swap(cvkey_, other->cvkey_);
    std::swap(cvvalue_, other->cvvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoMktr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoMktr_descriptor_;
  metadata.reflection = PrtoMktr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoQres::kSVnodeidFieldNumber;
const int PrtoQres::kCVkeyFieldNumber;
const int PrtoQres::kBVresultFieldNumber;
const int PrtoQres::kCVvalueFieldNumber;
const int PrtoQres::kBVdigestFieldNumber;
#endif  // !_MSC_VER

PrtoQres::PrtoQres()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoQres)
}

void PrtoQres::InitAsDefaultInstance() {
  cvkey_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
  cvvalue_ = const_cast< ::com::tomting::orion::PrtoLval*>(&::com::tomting::orion::PrtoLval::default_instance());
}

PrtoQres::PrtoQres(const PrtoQres& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoQres)
}

void PrtoQres::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svnodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvkey_ = NULL;
  bvresult_ = false;
  cvvalue_ = NULL;
  bvdigest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoQres::~PrtoQres() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoQres)
  SharedDtor();
}

void PrtoQres::SharedDtor() {
  if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnodeid_;
  }
  if (this != default_instance_) {
    delete cvkey_;
    delete cvvalue_;
  }
}

void PrtoQres::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoQres::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoQres_descriptor_;
}

const PrtoQres& PrtoQres::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSeda_2eproto();
  return *default_instance_;
}

PrtoQres* PrtoQres::default_instance_ = NULL;

PrtoQres* PrtoQres::New() const {
  return new PrtoQres;
}

void PrtoQres::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoQres*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bvresult_, bvdigest_);
    if (has_svnodeid()) {
      if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnodeid_->clear();
      }
    }
    if (has_cvkey()) {
      if (cvkey_ != NULL) cvkey_->::com::tomting::orion::PrtoLkey::Clear();
    }
    if (has_cvvalue()) {
      if (cvvalue_ != NULL) cvvalue_->::com::tomting::orion::PrtoLval::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoQres::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoQres)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVnodeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnodeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVkey;
        break;
      }

      // required .com.tomting.orion.PrtoLkey cVkey = 2;
      case 2: {
        if (tag == 18) {
         parse_cVkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bVresult;
        break;
      }

      // required bool bVresult = 3;
      case 3: {
        if (tag == 24) {
         parse_bVresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvresult_)));
          set_has_bvresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVvalue;
        break;
      }

      // required .com.tomting.orion.PrtoLval cVvalue = 4;
      case 4: {
        if (tag == 34) {
         parse_cVvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bVdigest;
        break;
      }

      // required bool bVdigest = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_bVdigest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvdigest_)));
          set_has_bvdigest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoQres)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoQres)
  return false;
#undef DO_
}

void PrtoQres::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoQres)
  // required bytes sVnodeid = 1;
  if (has_svnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svnodeid(), output);
  }

  // required .com.tomting.orion.PrtoLkey cVkey = 2;
  if (has_cvkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvkey(), output);
  }

  // required bool bVresult = 3;
  if (has_bvresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bvresult(), output);
  }

  // required .com.tomting.orion.PrtoLval cVvalue = 4;
  if (has_cvvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvvalue(), output);
  }

  // required bool bVdigest = 5 [default = false];
  if (has_bvdigest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bvdigest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoQres)
}

::google::protobuf::uint8* PrtoQres::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoQres)
  // required bytes sVnodeid = 1;
  if (has_svnodeid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svnodeid(), target);
  }

  // required .com.tomting.orion.PrtoLkey cVkey = 2;
  if (has_cvkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvkey(), target);
  }

  // required bool bVresult = 3;
  if (has_bvresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bvresult(), target);
  }

  // required .com.tomting.orion.PrtoLval cVvalue = 4;
  if (has_cvvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvvalue(), target);
  }

  // required bool bVdigest = 5 [default = false];
  if (has_bvdigest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bvdigest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoQres)
  return target;
}

int PrtoQres::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVnodeid = 1;
    if (has_svnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnodeid());
    }

    // required .com.tomting.orion.PrtoLkey cVkey = 2;
    if (has_cvkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey());
    }

    // required bool bVresult = 3;
    if (has_bvresult()) {
      total_size += 1 + 1;
    }

    // required .com.tomting.orion.PrtoLval cVvalue = 4;
    if (has_cvvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvvalue());
    }

    // required bool bVdigest = 5 [default = false];
    if (has_bvdigest()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoQres::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoQres* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoQres*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoQres::MergeFrom(const PrtoQres& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svnodeid()) {
      set_svnodeid(from.svnodeid());
    }
    if (from.has_cvkey()) {
      mutable_cvkey()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey());
    }
    if (from.has_bvresult()) {
      set_bvresult(from.bvresult());
    }
    if (from.has_cvvalue()) {
      mutable_cvvalue()->::com::tomting::orion::PrtoLval::MergeFrom(from.cvvalue());
    }
    if (from.has_bvdigest()) {
      set_bvdigest(from.bvdigest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoQres::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoQres::CopyFrom(const PrtoQres& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoQres::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_cvkey()) {
    if (!this->cvkey().IsInitialized()) return false;
  }
  if (has_cvvalue()) {
    if (!this->cvvalue().IsInitialized()) return false;
  }
  return true;
}

void PrtoQres::Swap(PrtoQres* other) {
  if (other != this) {
    std::swap(svnodeid_, other->svnodeid_);
    std::swap(cvkey_, other->cvkey_);
    std::swap(bvresult_, other->bvresult_);
    std::swap(cvvalue_, other->cvvalue_);
    std::swap(bvdigest_, other->bvdigest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoQres::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoQres_descriptor_;
  metadata.reflection = PrtoQres_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoSeda::kSVnamespaceFieldNumber;
const int PrtoSeda::kSVtableFieldNumber;
const int PrtoSeda::kIVcompactiontypeFieldNumber;
const int PrtoSeda::kSVmessageFieldNumber;
const int PrtoSeda::kCVgossipelementFieldNumber;
const int PrtoSeda::kCVstatementFieldNumber;
const int PrtoSeda::kSVcallbackFieldNumber;
const int PrtoSeda::kCVqueryFieldNumber;
const int PrtoSeda::kCVlistqueryresultFieldNumber;
const int PrtoSeda::kCVlistgossipelementFieldNumber;
#endif  // !_MSC_VER

PrtoSeda::PrtoSeda()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoSeda)
}

void PrtoSeda::InitAsDefaultInstance() {
  cvgossipelement_ = const_cast< ::com::tomting::orion::PrtoGoel*>(&::com::tomting::orion::PrtoGoel::default_instance());
  cvstatement_ = const_cast< ::com::tomting::orion::PrtoLstm*>(&::com::tomting::orion::PrtoLstm::default_instance());
  cvquery_ = const_cast< ::com::tomting::orion::PrtoLqry*>(&::com::tomting::orion::PrtoLqry::default_instance());
}

PrtoSeda::PrtoSeda(const PrtoSeda& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoSeda)
}

void PrtoSeda::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svnamespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svtable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivcompactiontype_ = 0;
  svmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvgossipelement_ = NULL;
  cvstatement_ = NULL;
  svcallback_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvquery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoSeda::~PrtoSeda() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoSeda)
  SharedDtor();
}

void PrtoSeda::SharedDtor() {
  if (svnamespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnamespace_;
  }
  if (svtable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svtable_;
  }
  if (svmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svmessage_;
  }
  if (svcallback_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svcallback_;
  }
  if (this != default_instance_) {
    delete cvgossipelement_;
    delete cvstatement_;
    delete cvquery_;
  }
}

void PrtoSeda::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoSeda::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoSeda_descriptor_;
}

const PrtoSeda& PrtoSeda::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSeda_2eproto();
  return *default_instance_;
}

PrtoSeda* PrtoSeda::default_instance_ = NULL;

PrtoSeda* PrtoSeda::New() const {
  return new PrtoSeda;
}

void PrtoSeda::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_svnamespace()) {
      if (svnamespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnamespace_->clear();
      }
    }
    if (has_svtable()) {
      if (svtable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svtable_->clear();
      }
    }
    ivcompactiontype_ = 0;
    if (has_svmessage()) {
      if (svmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svmessage_->clear();
      }
    }
    if (has_cvgossipelement()) {
      if (cvgossipelement_ != NULL) cvgossipelement_->::com::tomting::orion::PrtoGoel::Clear();
    }
    if (has_cvstatement()) {
      if (cvstatement_ != NULL) cvstatement_->::com::tomting::orion::PrtoLstm::Clear();
    }
    if (has_svcallback()) {
      if (svcallback_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svcallback_->clear();
      }
    }
    if (has_cvquery()) {
      if (cvquery_ != NULL) cvquery_->::com::tomting::orion::PrtoLqry::Clear();
    }
  }
  cvlistqueryresult_.Clear();
  cvlistgossipelement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoSeda::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoSeda)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sVnamespace = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnamespace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVtable;
        break;
      }

      // optional bytes sVtable = 2;
      case 2: {
        if (tag == 18) {
         parse_sVtable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svtable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVcompactiontype;
        break;
      }

      // optional .com.tomting.orion.iCcompactiontype iVcompactiontype = 3;
      case 3: {
        if (tag == 24) {
         parse_iVcompactiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCcompactiontype_IsValid(value)) {
            set_ivcompactiontype(static_cast< ::com::tomting::orion::iCcompactiontype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sVmessage;
        break;
      }

      // optional bytes sVmessage = 4;
      case 4: {
        if (tag == 34) {
         parse_sVmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cVgossipelement;
        break;
      }

      // optional .com.tomting.orion.PrtoGoel cVgossipelement = 5;
      case 5: {
        if (tag == 42) {
         parse_cVgossipelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvgossipelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cVstatement;
        break;
      }

      // optional .com.tomting.orion.PrtoLstm cVstatement = 6;
      case 6: {
        if (tag == 50) {
         parse_cVstatement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvstatement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sVcallback;
        break;
      }

      // optional bytes sVcallback = 7;
      case 7: {
        if (tag == 58) {
         parse_sVcallback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svcallback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cVquery;
        break;
      }

      // optional .com.tomting.orion.PrtoLqry cVquery = 8;
      case 8: {
        if (tag == 66) {
         parse_cVquery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvquery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cVlistqueryresult;
        break;
      }

      // repeated .com.tomting.orion.PrtoQres cVlistqueryresult = 9;
      case 9: {
        if (tag == 74) {
         parse_cVlistqueryresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvlistqueryresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cVlistqueryresult;
        if (input->ExpectTag(82)) goto parse_cVlistgossipelement;
        break;
      }

      // repeated .com.tomting.orion.PrtoGoel cVlistgossipelement = 10;
      case 10: {
        if (tag == 82) {
         parse_cVlistgossipelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvlistgossipelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cVlistgossipelement;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoSeda)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoSeda)
  return false;
#undef DO_
}

void PrtoSeda::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoSeda)
  // optional bytes sVnamespace = 1;
  if (has_svnamespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svnamespace(), output);
  }

  // optional bytes sVtable = 2;
  if (has_svtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svtable(), output);
  }

  // optional .com.tomting.orion.iCcompactiontype iVcompactiontype = 3;
  if (has_ivcompactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ivcompactiontype(), output);
  }

  // optional bytes sVmessage = 4;
  if (has_svmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->svmessage(), output);
  }

  // optional .com.tomting.orion.PrtoGoel cVgossipelement = 5;
  if (has_cvgossipelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cvgossipelement(), output);
  }

  // optional .com.tomting.orion.PrtoLstm cVstatement = 6;
  if (has_cvstatement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cvstatement(), output);
  }

  // optional bytes sVcallback = 7;
  if (has_svcallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->svcallback(), output);
  }

  // optional .com.tomting.orion.PrtoLqry cVquery = 8;
  if (has_cvquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cvquery(), output);
  }

  // repeated .com.tomting.orion.PrtoQres cVlistqueryresult = 9;
  for (int i = 0; i < this->cvlistqueryresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cvlistqueryresult(i), output);
  }

  // repeated .com.tomting.orion.PrtoGoel cVlistgossipelement = 10;
  for (int i = 0; i < this->cvlistgossipelement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cvlistgossipelement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoSeda)
}

::google::protobuf::uint8* PrtoSeda::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoSeda)
  // optional bytes sVnamespace = 1;
  if (has_svnamespace()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svnamespace(), target);
  }

  // optional bytes sVtable = 2;
  if (has_svtable()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svtable(), target);
  }

  // optional .com.tomting.orion.iCcompactiontype iVcompactiontype = 3;
  if (has_ivcompactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ivcompactiontype(), target);
  }

  // optional bytes sVmessage = 4;
  if (has_svmessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->svmessage(), target);
  }

  // optional .com.tomting.orion.PrtoGoel cVgossipelement = 5;
  if (has_cvgossipelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cvgossipelement(), target);
  }

  // optional .com.tomting.orion.PrtoLstm cVstatement = 6;
  if (has_cvstatement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cvstatement(), target);
  }

  // optional bytes sVcallback = 7;
  if (has_svcallback()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->svcallback(), target);
  }

  // optional .com.tomting.orion.PrtoLqry cVquery = 8;
  if (has_cvquery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cvquery(), target);
  }

  // repeated .com.tomting.orion.PrtoQres cVlistqueryresult = 9;
  for (int i = 0; i < this->cvlistqueryresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cvlistqueryresult(i), target);
  }

  // repeated .com.tomting.orion.PrtoGoel cVlistgossipelement = 10;
  for (int i = 0; i < this->cvlistgossipelement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cvlistgossipelement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoSeda)
  return target;
}

int PrtoSeda::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sVnamespace = 1;
    if (has_svnamespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnamespace());
    }

    // optional bytes sVtable = 2;
    if (has_svtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svtable());
    }

    // optional .com.tomting.orion.iCcompactiontype iVcompactiontype = 3;
    if (has_ivcompactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivcompactiontype());
    }

    // optional bytes sVmessage = 4;
    if (has_svmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svmessage());
    }

    // optional .com.tomting.orion.PrtoGoel cVgossipelement = 5;
    if (has_cvgossipelement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvgossipelement());
    }

    // optional .com.tomting.orion.PrtoLstm cVstatement = 6;
    if (has_cvstatement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvstatement());
    }

    // optional bytes sVcallback = 7;
    if (has_svcallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svcallback());
    }

    // optional .com.tomting.orion.PrtoLqry cVquery = 8;
    if (has_cvquery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvquery());
    }

  }
  // repeated .com.tomting.orion.PrtoQres cVlistqueryresult = 9;
  total_size += 1 * this->cvlistqueryresult_size();
  for (int i = 0; i < this->cvlistqueryresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvlistqueryresult(i));
  }

  // repeated .com.tomting.orion.PrtoGoel cVlistgossipelement = 10;
  total_size += 1 * this->cvlistgossipelement_size();
  for (int i = 0; i < this->cvlistgossipelement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvlistgossipelement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoSeda::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoSeda* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoSeda*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoSeda::MergeFrom(const PrtoSeda& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvlistqueryresult_.MergeFrom(from.cvlistqueryresult_);
  cvlistgossipelement_.MergeFrom(from.cvlistgossipelement_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svnamespace()) {
      set_svnamespace(from.svnamespace());
    }
    if (from.has_svtable()) {
      set_svtable(from.svtable());
    }
    if (from.has_ivcompactiontype()) {
      set_ivcompactiontype(from.ivcompactiontype());
    }
    if (from.has_svmessage()) {
      set_svmessage(from.svmessage());
    }
    if (from.has_cvgossipelement()) {
      mutable_cvgossipelement()->::com::tomting::orion::PrtoGoel::MergeFrom(from.cvgossipelement());
    }
    if (from.has_cvstatement()) {
      mutable_cvstatement()->::com::tomting::orion::PrtoLstm::MergeFrom(from.cvstatement());
    }
    if (from.has_svcallback()) {
      set_svcallback(from.svcallback());
    }
    if (from.has_cvquery()) {
      mutable_cvquery()->::com::tomting::orion::PrtoLqry::MergeFrom(from.cvquery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoSeda::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoSeda::CopyFrom(const PrtoSeda& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoSeda::IsInitialized() const {

  if (has_cvgossipelement()) {
    if (!this->cvgossipelement().IsInitialized()) return false;
  }
  if (has_cvstatement()) {
    if (!this->cvstatement().IsInitialized()) return false;
  }
  if (has_cvquery()) {
    if (!this->cvquery().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cvlistqueryresult())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvlistgossipelement())) return false;
  return true;
}

void PrtoSeda::Swap(PrtoSeda* other) {
  if (other != this) {
    std::swap(svnamespace_, other->svnamespace_);
    std::swap(svtable_, other->svtable_);
    std::swap(ivcompactiontype_, other->ivcompactiontype_);
    std::swap(svmessage_, other->svmessage_);
    std::swap(cvgossipelement_, other->cvgossipelement_);
    std::swap(cvstatement_, other->cvstatement_);
    std::swap(svcallback_, other->svcallback_);
    std::swap(cvquery_, other->cvquery_);
    cvlistqueryresult_.Swap(&other->cvlistqueryresult_);
    cvlistgossipelement_.Swap(&other->cvlistgossipelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoSeda::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoSeda_descriptor_;
  metadata.reflection = PrtoSeda_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace orion
}  // namespace tomting
}  // namespace com

// @@protoc_insertion_point(global_scope)

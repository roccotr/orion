// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrtoPlan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PrtoPlan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PrtoPvlc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoPvlc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoPval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoPval_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PrtoPlan_2eproto() {
  protobuf_AddDesc_PrtoPlan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PrtoPlan.proto");
  GOOGLE_CHECK(file != NULL);
  PrtoPvlc_descriptor_ = file->message_type(0);
  static const int PrtoPvlc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPvlc, svvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPvlc, svcolumn_),
  };
  PrtoPvlc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoPvlc_descriptor_,
      PrtoPvlc::default_instance_,
      PrtoPvlc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPvlc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPvlc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoPvlc));
  PrtoPval_descriptor_ = file->message_type(1);
  static const int PrtoPval_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPval, cvvaluecells_),
  };
  PrtoPval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoPval_descriptor_,
      PrtoPval::default_instance_,
      PrtoPval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoPval));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PrtoPlan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoPvlc_descriptor_, &PrtoPvlc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoPval_descriptor_, &PrtoPval::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PrtoPlan_2eproto() {
  delete PrtoPvlc::default_instance_;
  delete PrtoPvlc_reflection_;
  delete PrtoPval::default_instance_;
  delete PrtoPval_reflection_;
}

void protobuf_AddDesc_PrtoPlan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PrtoPlan.proto\"-\n\010PrtoPvlc\022\017\n\007sVvalue\030"
    "\001 \002(\014\022\020\n\010sVcolumn\030\002 \001(\014\"+\n\010PrtoPval\022\037\n\014c"
    "Vvaluecells\030\001 \003(\0132\t.PrtoPvlc", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PrtoPlan.proto", &protobuf_RegisterTypes);
  PrtoPvlc::default_instance_ = new PrtoPvlc();
  PrtoPval::default_instance_ = new PrtoPval();
  PrtoPvlc::default_instance_->InitAsDefaultInstance();
  PrtoPval::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PrtoPlan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PrtoPlan_2eproto {
  StaticDescriptorInitializer_PrtoPlan_2eproto() {
    protobuf_AddDesc_PrtoPlan_2eproto();
  }
} static_descriptor_initializer_PrtoPlan_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PrtoPvlc::kSVvalueFieldNumber;
const int PrtoPvlc::kSVcolumnFieldNumber;
#endif  // !_MSC_VER

PrtoPvlc::PrtoPvlc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrtoPvlc)
}

void PrtoPvlc::InitAsDefaultInstance() {
}

PrtoPvlc::PrtoPvlc(const PrtoPvlc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrtoPvlc)
}

void PrtoPvlc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svcolumn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoPvlc::~PrtoPvlc() {
  // @@protoc_insertion_point(destructor:PrtoPvlc)
  SharedDtor();
}

void PrtoPvlc::SharedDtor() {
  if (svvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svvalue_;
  }
  if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svcolumn_;
  }
  if (this != default_instance_) {
  }
}

void PrtoPvlc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoPvlc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoPvlc_descriptor_;
}

const PrtoPvlc& PrtoPvlc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoPlan_2eproto();
  return *default_instance_;
}

PrtoPvlc* PrtoPvlc::default_instance_ = NULL;

PrtoPvlc* PrtoPvlc::New() const {
  return new PrtoPvlc;
}

void PrtoPvlc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_svvalue()) {
      if (svvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svvalue_->clear();
      }
    }
    if (has_svcolumn()) {
      if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svcolumn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoPvlc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrtoPvlc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVvalue = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVcolumn;
        break;
      }

      // optional bytes sVcolumn = 2;
      case 2: {
        if (tag == 18) {
         parse_sVcolumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrtoPvlc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrtoPvlc)
  return false;
#undef DO_
}

void PrtoPvlc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrtoPvlc)
  // required bytes sVvalue = 1;
  if (has_svvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svvalue(), output);
  }

  // optional bytes sVcolumn = 2;
  if (has_svcolumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svcolumn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrtoPvlc)
}

::google::protobuf::uint8* PrtoPvlc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrtoPvlc)
  // required bytes sVvalue = 1;
  if (has_svvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svvalue(), target);
  }

  // optional bytes sVcolumn = 2;
  if (has_svcolumn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svcolumn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrtoPvlc)
  return target;
}

int PrtoPvlc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVvalue = 1;
    if (has_svvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svvalue());
    }

    // optional bytes sVcolumn = 2;
    if (has_svcolumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svcolumn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoPvlc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoPvlc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoPvlc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoPvlc::MergeFrom(const PrtoPvlc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svvalue()) {
      set_svvalue(from.svvalue());
    }
    if (from.has_svcolumn()) {
      set_svcolumn(from.svcolumn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoPvlc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoPvlc::CopyFrom(const PrtoPvlc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoPvlc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrtoPvlc::Swap(PrtoPvlc* other) {
  if (other != this) {
    std::swap(svvalue_, other->svvalue_);
    std::swap(svcolumn_, other->svcolumn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoPvlc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoPvlc_descriptor_;
  metadata.reflection = PrtoPvlc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoPval::kCVvaluecellsFieldNumber;
#endif  // !_MSC_VER

PrtoPval::PrtoPval()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrtoPval)
}

void PrtoPval::InitAsDefaultInstance() {
}

PrtoPval::PrtoPval(const PrtoPval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrtoPval)
}

void PrtoPval::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoPval::~PrtoPval() {
  // @@protoc_insertion_point(destructor:PrtoPval)
  SharedDtor();
}

void PrtoPval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoPval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoPval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoPval_descriptor_;
}

const PrtoPval& PrtoPval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoPlan_2eproto();
  return *default_instance_;
}

PrtoPval* PrtoPval::default_instance_ = NULL;

PrtoPval* PrtoPval::New() const {
  return new PrtoPval;
}

void PrtoPval::Clear() {
  cvvaluecells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoPval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrtoPval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PrtoPvlc cVvaluecells = 1;
      case 1: {
        if (tag == 10) {
         parse_cVvaluecells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvvaluecells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVvaluecells;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrtoPval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrtoPval)
  return false;
#undef DO_
}

void PrtoPval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrtoPval)
  // repeated .PrtoPvlc cVvaluecells = 1;
  for (int i = 0; i < this->cvvaluecells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvvaluecells(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrtoPval)
}

::google::protobuf::uint8* PrtoPval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrtoPval)
  // repeated .PrtoPvlc cVvaluecells = 1;
  for (int i = 0; i < this->cvvaluecells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvvaluecells(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrtoPval)
  return target;
}

int PrtoPval::ByteSize() const {
  int total_size = 0;

  // repeated .PrtoPvlc cVvaluecells = 1;
  total_size += 1 * this->cvvaluecells_size();
  for (int i = 0; i < this->cvvaluecells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvvaluecells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoPval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoPval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoPval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoPval::MergeFrom(const PrtoPval& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvvaluecells_.MergeFrom(from.cvvaluecells_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoPval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoPval::CopyFrom(const PrtoPval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoPval::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvvaluecells())) return false;
  return true;
}

void PrtoPval::Swap(PrtoPval* other) {
  if (other != this) {
    cvvaluecells_.Swap(&other->cvvaluecells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoPval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoPval_descriptor_;
  metadata.reflection = PrtoPval_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

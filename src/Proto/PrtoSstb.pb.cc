// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrtoSstb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PrtoSstb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tomting {
namespace orion {

namespace {

const ::google::protobuf::Descriptor* PrtoStix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoStix_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoHash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoHash_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoIndx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoIndx_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoIatm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoIatm_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* iCsstabletype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PrtoSstb_2eproto() {
  protobuf_AddDesc_PrtoSstb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PrtoSstb.proto");
  GOOGLE_CHECK(file != NULL);
  PrtoStix_descriptor_ = file->message_type(0);
  static const int PrtoStix_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStix, svindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStix, ivindexed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStix, ivmainindexlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStix, ivindexed64_),
  };
  PrtoStix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoStix_descriptor_,
      PrtoStix::default_instance_,
      PrtoStix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoStix));
  PrtoHash_descriptor_ = file->message_type(1);
  static const int PrtoHash_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHash, ivindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHash, ivhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHash, ivsortedradix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHash, ivchained_),
  };
  PrtoHash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoHash_descriptor_,
      PrtoHash::default_instance_,
      PrtoHash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoHash));
  PrtoIndx_descriptor_ = file->message_type(2);
  static const int PrtoIndx_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, cvstix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, cvhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, ivhashtablesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, ivhashtablerealsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, ivsstabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, svredotimestamp_),
  };
  PrtoIndx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoIndx_descriptor_,
      PrtoIndx::default_instance_,
      PrtoIndx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIndx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoIndx));
  PrtoIatm_descriptor_ = file->message_type(3);
  static const int PrtoIatm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIatm, cvstix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIatm, cvhash_),
  };
  PrtoIatm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoIatm_descriptor_,
      PrtoIatm::default_instance_,
      PrtoIatm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIatm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoIatm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoIatm));
  PrtoData_descriptor_ = file->message_type(4);
  static const int PrtoData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoData, svkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoData, ivmainkeylength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoData, svopaquevalue_),
  };
  PrtoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoData_descriptor_,
      PrtoData::default_instance_,
      PrtoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoData));
  iCsstabletype_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PrtoSstb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoStix_descriptor_, &PrtoStix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoHash_descriptor_, &PrtoHash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoIndx_descriptor_, &PrtoIndx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoIatm_descriptor_, &PrtoIatm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoData_descriptor_, &PrtoData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PrtoSstb_2eproto() {
  delete PrtoStix::default_instance_;
  delete PrtoStix_reflection_;
  delete PrtoHash::default_instance_;
  delete PrtoHash_reflection_;
  delete PrtoIndx::default_instance_;
  delete PrtoIndx_reflection_;
  delete PrtoIatm::default_instance_;
  delete PrtoIatm_reflection_;
  delete PrtoData::default_instance_;
  delete PrtoData_reflection_;
}

void protobuf_AddDesc_PrtoSstb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PrtoSstb.proto\022\021com.tomting.orion\"`\n\010P"
    "rtoStix\022\017\n\007sVindex\030\001 \002(\014\022\023\n\013iVindexed32\030"
    "\002 \002(\r\022\031\n\021iVmainindexlength\030\003 \001(\r\022\023\n\013iVin"
    "dexed64\030\004 \001(\004\"U\n\010PrtoHash\022\017\n\007iVindex\030\001 \002"
    "(\005\022\016\n\006iVhash\030\002 \002(\r\022\025\n\riVsortedradix\030\003 \002("
    "\005\022\021\n\tiVchained\030\004 \002(\005\"\354\001\n\010PrtoIndx\022+\n\006cVs"
    "tix\030\001 \003(\0132\033.com.tomting.orion.PrtoStix\022+"
    "\n\006cVhash\030\002 \003(\0132\033.com.tomting.orion.PrtoH"
    "ash\022\027\n\017iVhashtablesize\030\003 \001(\r\022\033\n\023iVhashta"
    "blerealsize\030\004 \001(\r\0227\n\riVsstabletype\030\005 \002(\016"
    "2 .com.tomting.orion.iCsstabletype\022\027\n\017sV"
    "redotimestamp\030\006 \002(\014\"d\n\010PrtoIatm\022+\n\006cVsti"
    "x\030\001 \003(\0132\033.com.tomting.orion.PrtoStix\022+\n\006"
    "cVhash\030\002 \003(\0132\033.com.tomting.orion.PrtoHas"
    "h\"I\n\010PrtoData\022\r\n\005sVkey\030\001 \002(\014\022\027\n\017iVmainke"
    "ylength\030\002 \002(\r\022\025\n\rsVopaquevalue\030\003 \002(\014*D\n\r"
    "iCsstabletype\022\013\n\007SSTABLE\020\000\022\021\n\rMEMORYSSTA"
    "BLE\020\001\022\023\n\017PARTIALMEMTABLE\020\002", 706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PrtoSstb.proto", &protobuf_RegisterTypes);
  PrtoStix::default_instance_ = new PrtoStix();
  PrtoHash::default_instance_ = new PrtoHash();
  PrtoIndx::default_instance_ = new PrtoIndx();
  PrtoIatm::default_instance_ = new PrtoIatm();
  PrtoData::default_instance_ = new PrtoData();
  PrtoStix::default_instance_->InitAsDefaultInstance();
  PrtoHash::default_instance_->InitAsDefaultInstance();
  PrtoIndx::default_instance_->InitAsDefaultInstance();
  PrtoIatm::default_instance_->InitAsDefaultInstance();
  PrtoData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PrtoSstb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PrtoSstb_2eproto {
  StaticDescriptorInitializer_PrtoSstb_2eproto() {
    protobuf_AddDesc_PrtoSstb_2eproto();
  }
} static_descriptor_initializer_PrtoSstb_2eproto_;
const ::google::protobuf::EnumDescriptor* iCsstabletype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCsstabletype_descriptor_;
}
bool iCsstabletype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoStix::kSVindexFieldNumber;
const int PrtoStix::kIVindexed32FieldNumber;
const int PrtoStix::kIVmainindexlengthFieldNumber;
const int PrtoStix::kIVindexed64FieldNumber;
#endif  // !_MSC_VER

PrtoStix::PrtoStix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoStix)
}

void PrtoStix::InitAsDefaultInstance() {
}

PrtoStix::PrtoStix(const PrtoStix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoStix)
}

void PrtoStix::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivindexed32_ = 0u;
  ivmainindexlength_ = 0u;
  ivindexed64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoStix::~PrtoStix() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoStix)
  SharedDtor();
}

void PrtoStix::SharedDtor() {
  if (svindex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svindex_;
  }
  if (this != default_instance_) {
  }
}

void PrtoStix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoStix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoStix_descriptor_;
}

const PrtoStix& PrtoStix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSstb_2eproto();
  return *default_instance_;
}

PrtoStix* PrtoStix::default_instance_ = NULL;

PrtoStix* PrtoStix::New() const {
  return new PrtoStix;
}

void PrtoStix::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoStix*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ivindexed32_, ivindexed64_);
    if (has_svindex()) {
      if (svindex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svindex_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoStix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoStix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVindex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVindexed32;
        break;
      }

      // required uint32 iVindexed32 = 2;
      case 2: {
        if (tag == 16) {
         parse_iVindexed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivindexed32_)));
          set_has_ivindexed32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVmainindexlength;
        break;
      }

      // optional uint32 iVmainindexlength = 3;
      case 3: {
        if (tag == 24) {
         parse_iVmainindexlength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivmainindexlength_)));
          set_has_ivmainindexlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVindexed64;
        break;
      }

      // optional uint64 iVindexed64 = 4;
      case 4: {
        if (tag == 32) {
         parse_iVindexed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ivindexed64_)));
          set_has_ivindexed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoStix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoStix)
  return false;
#undef DO_
}

void PrtoStix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoStix)
  // required bytes sVindex = 1;
  if (has_svindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svindex(), output);
  }

  // required uint32 iVindexed32 = 2;
  if (has_ivindexed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ivindexed32(), output);
  }

  // optional uint32 iVmainindexlength = 3;
  if (has_ivmainindexlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ivmainindexlength(), output);
  }

  // optional uint64 iVindexed64 = 4;
  if (has_ivindexed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ivindexed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoStix)
}

::google::protobuf::uint8* PrtoStix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoStix)
  // required bytes sVindex = 1;
  if (has_svindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svindex(), target);
  }

  // required uint32 iVindexed32 = 2;
  if (has_ivindexed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ivindexed32(), target);
  }

  // optional uint32 iVmainindexlength = 3;
  if (has_ivmainindexlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ivmainindexlength(), target);
  }

  // optional uint64 iVindexed64 = 4;
  if (has_ivindexed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ivindexed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoStix)
  return target;
}

int PrtoStix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVindex = 1;
    if (has_svindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svindex());
    }

    // required uint32 iVindexed32 = 2;
    if (has_ivindexed32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivindexed32());
    }

    // optional uint32 iVmainindexlength = 3;
    if (has_ivmainindexlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivmainindexlength());
    }

    // optional uint64 iVindexed64 = 4;
    if (has_ivindexed64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ivindexed64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoStix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoStix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoStix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoStix::MergeFrom(const PrtoStix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svindex()) {
      set_svindex(from.svindex());
    }
    if (from.has_ivindexed32()) {
      set_ivindexed32(from.ivindexed32());
    }
    if (from.has_ivmainindexlength()) {
      set_ivmainindexlength(from.ivmainindexlength());
    }
    if (from.has_ivindexed64()) {
      set_ivindexed64(from.ivindexed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoStix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoStix::CopyFrom(const PrtoStix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoStix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrtoStix::Swap(PrtoStix* other) {
  if (other != this) {
    std::swap(svindex_, other->svindex_);
    std::swap(ivindexed32_, other->ivindexed32_);
    std::swap(ivmainindexlength_, other->ivmainindexlength_);
    std::swap(ivindexed64_, other->ivindexed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoStix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoStix_descriptor_;
  metadata.reflection = PrtoStix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoHash::kIVindexFieldNumber;
const int PrtoHash::kIVhashFieldNumber;
const int PrtoHash::kIVsortedradixFieldNumber;
const int PrtoHash::kIVchainedFieldNumber;
#endif  // !_MSC_VER

PrtoHash::PrtoHash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoHash)
}

void PrtoHash::InitAsDefaultInstance() {
}

PrtoHash::PrtoHash(const PrtoHash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoHash)
}

void PrtoHash::SharedCtor() {
  _cached_size_ = 0;
  ivindex_ = 0;
  ivhash_ = 0u;
  ivsortedradix_ = 0;
  ivchained_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoHash::~PrtoHash() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoHash)
  SharedDtor();
}

void PrtoHash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoHash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoHash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoHash_descriptor_;
}

const PrtoHash& PrtoHash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSstb_2eproto();
  return *default_instance_;
}

PrtoHash* PrtoHash::default_instance_ = NULL;

PrtoHash* PrtoHash::New() const {
  return new PrtoHash;
}

void PrtoHash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoHash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ivindex_, ivchained_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoHash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoHash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivindex_)));
          set_has_ivindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVhash;
        break;
      }

      // required uint32 iVhash = 2;
      case 2: {
        if (tag == 16) {
         parse_iVhash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivhash_)));
          set_has_ivhash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVsortedradix;
        break;
      }

      // required int32 iVsortedradix = 3;
      case 3: {
        if (tag == 24) {
         parse_iVsortedradix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivsortedradix_)));
          set_has_ivsortedradix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVchained;
        break;
      }

      // required int32 iVchained = 4;
      case 4: {
        if (tag == 32) {
         parse_iVchained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivchained_)));
          set_has_ivchained();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoHash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoHash)
  return false;
#undef DO_
}

void PrtoHash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoHash)
  // required int32 iVindex = 1;
  if (has_ivindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ivindex(), output);
  }

  // required uint32 iVhash = 2;
  if (has_ivhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ivhash(), output);
  }

  // required int32 iVsortedradix = 3;
  if (has_ivsortedradix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ivsortedradix(), output);
  }

  // required int32 iVchained = 4;
  if (has_ivchained()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ivchained(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoHash)
}

::google::protobuf::uint8* PrtoHash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoHash)
  // required int32 iVindex = 1;
  if (has_ivindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ivindex(), target);
  }

  // required uint32 iVhash = 2;
  if (has_ivhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ivhash(), target);
  }

  // required int32 iVsortedradix = 3;
  if (has_ivsortedradix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ivsortedradix(), target);
  }

  // required int32 iVchained = 4;
  if (has_ivchained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ivchained(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoHash)
  return target;
}

int PrtoHash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iVindex = 1;
    if (has_ivindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivindex());
    }

    // required uint32 iVhash = 2;
    if (has_ivhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivhash());
    }

    // required int32 iVsortedradix = 3;
    if (has_ivsortedradix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivsortedradix());
    }

    // required int32 iVchained = 4;
    if (has_ivchained()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivchained());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoHash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoHash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoHash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoHash::MergeFrom(const PrtoHash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivindex()) {
      set_ivindex(from.ivindex());
    }
    if (from.has_ivhash()) {
      set_ivhash(from.ivhash());
    }
    if (from.has_ivsortedradix()) {
      set_ivsortedradix(from.ivsortedradix());
    }
    if (from.has_ivchained()) {
      set_ivchained(from.ivchained());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoHash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoHash::CopyFrom(const PrtoHash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoHash::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PrtoHash::Swap(PrtoHash* other) {
  if (other != this) {
    std::swap(ivindex_, other->ivindex_);
    std::swap(ivhash_, other->ivhash_);
    std::swap(ivsortedradix_, other->ivsortedradix_);
    std::swap(ivchained_, other->ivchained_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoHash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoHash_descriptor_;
  metadata.reflection = PrtoHash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoIndx::kCVstixFieldNumber;
const int PrtoIndx::kCVhashFieldNumber;
const int PrtoIndx::kIVhashtablesizeFieldNumber;
const int PrtoIndx::kIVhashtablerealsizeFieldNumber;
const int PrtoIndx::kIVsstabletypeFieldNumber;
const int PrtoIndx::kSVredotimestampFieldNumber;
#endif  // !_MSC_VER

PrtoIndx::PrtoIndx()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoIndx)
}

void PrtoIndx::InitAsDefaultInstance() {
}

PrtoIndx::PrtoIndx(const PrtoIndx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoIndx)
}

void PrtoIndx::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ivhashtablesize_ = 0u;
  ivhashtablerealsize_ = 0u;
  ivsstabletype_ = 0;
  svredotimestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoIndx::~PrtoIndx() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoIndx)
  SharedDtor();
}

void PrtoIndx::SharedDtor() {
  if (svredotimestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svredotimestamp_;
  }
  if (this != default_instance_) {
  }
}

void PrtoIndx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoIndx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoIndx_descriptor_;
}

const PrtoIndx& PrtoIndx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSstb_2eproto();
  return *default_instance_;
}

PrtoIndx* PrtoIndx::default_instance_ = NULL;

PrtoIndx* PrtoIndx::New() const {
  return new PrtoIndx;
}

void PrtoIndx::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoIndx*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 60) {
    ZR_(ivhashtablesize_, ivhashtablerealsize_);
    ivsstabletype_ = 0;
    if (has_svredotimestamp()) {
      if (svredotimestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svredotimestamp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cvstix_.Clear();
  cvhash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoIndx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoIndx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoStix cVstix = 1;
      case 1: {
        if (tag == 10) {
         parse_cVstix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvstix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVstix;
        if (input->ExpectTag(18)) goto parse_cVhash;
        break;
      }

      // repeated .com.tomting.orion.PrtoHash cVhash = 2;
      case 2: {
        if (tag == 18) {
         parse_cVhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVhash;
        if (input->ExpectTag(24)) goto parse_iVhashtablesize;
        break;
      }

      // optional uint32 iVhashtablesize = 3;
      case 3: {
        if (tag == 24) {
         parse_iVhashtablesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivhashtablesize_)));
          set_has_ivhashtablesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVhashtablerealsize;
        break;
      }

      // optional uint32 iVhashtablerealsize = 4;
      case 4: {
        if (tag == 32) {
         parse_iVhashtablerealsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivhashtablerealsize_)));
          set_has_ivhashtablerealsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVsstabletype;
        break;
      }

      // required .com.tomting.orion.iCsstabletype iVsstabletype = 5;
      case 5: {
        if (tag == 40) {
         parse_iVsstabletype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCsstabletype_IsValid(value)) {
            set_ivsstabletype(static_cast< ::com::tomting::orion::iCsstabletype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sVredotimestamp;
        break;
      }

      // required bytes sVredotimestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_sVredotimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svredotimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoIndx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoIndx)
  return false;
#undef DO_
}

void PrtoIndx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoIndx)
  // repeated .com.tomting.orion.PrtoStix cVstix = 1;
  for (int i = 0; i < this->cvstix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvstix(i), output);
  }

  // repeated .com.tomting.orion.PrtoHash cVhash = 2;
  for (int i = 0; i < this->cvhash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvhash(i), output);
  }

  // optional uint32 iVhashtablesize = 3;
  if (has_ivhashtablesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ivhashtablesize(), output);
  }

  // optional uint32 iVhashtablerealsize = 4;
  if (has_ivhashtablerealsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ivhashtablerealsize(), output);
  }

  // required .com.tomting.orion.iCsstabletype iVsstabletype = 5;
  if (has_ivsstabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ivsstabletype(), output);
  }

  // required bytes sVredotimestamp = 6;
  if (has_svredotimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->svredotimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoIndx)
}

::google::protobuf::uint8* PrtoIndx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoIndx)
  // repeated .com.tomting.orion.PrtoStix cVstix = 1;
  for (int i = 0; i < this->cvstix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvstix(i), target);
  }

  // repeated .com.tomting.orion.PrtoHash cVhash = 2;
  for (int i = 0; i < this->cvhash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvhash(i), target);
  }

  // optional uint32 iVhashtablesize = 3;
  if (has_ivhashtablesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ivhashtablesize(), target);
  }

  // optional uint32 iVhashtablerealsize = 4;
  if (has_ivhashtablerealsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ivhashtablerealsize(), target);
  }

  // required .com.tomting.orion.iCsstabletype iVsstabletype = 5;
  if (has_ivsstabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ivsstabletype(), target);
  }

  // required bytes sVredotimestamp = 6;
  if (has_svredotimestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->svredotimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoIndx)
  return target;
}

int PrtoIndx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 iVhashtablesize = 3;
    if (has_ivhashtablesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivhashtablesize());
    }

    // optional uint32 iVhashtablerealsize = 4;
    if (has_ivhashtablerealsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivhashtablerealsize());
    }

    // required .com.tomting.orion.iCsstabletype iVsstabletype = 5;
    if (has_ivsstabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivsstabletype());
    }

    // required bytes sVredotimestamp = 6;
    if (has_svredotimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svredotimestamp());
    }

  }
  // repeated .com.tomting.orion.PrtoStix cVstix = 1;
  total_size += 1 * this->cvstix_size();
  for (int i = 0; i < this->cvstix_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvstix(i));
  }

  // repeated .com.tomting.orion.PrtoHash cVhash = 2;
  total_size += 1 * this->cvhash_size();
  for (int i = 0; i < this->cvhash_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvhash(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoIndx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoIndx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoIndx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoIndx::MergeFrom(const PrtoIndx& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvstix_.MergeFrom(from.cvstix_);
  cvhash_.MergeFrom(from.cvhash_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_ivhashtablesize()) {
      set_ivhashtablesize(from.ivhashtablesize());
    }
    if (from.has_ivhashtablerealsize()) {
      set_ivhashtablerealsize(from.ivhashtablerealsize());
    }
    if (from.has_ivsstabletype()) {
      set_ivsstabletype(from.ivsstabletype());
    }
    if (from.has_svredotimestamp()) {
      set_svredotimestamp(from.svredotimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoIndx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoIndx::CopyFrom(const PrtoIndx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoIndx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cvstix())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvhash())) return false;
  return true;
}

void PrtoIndx::Swap(PrtoIndx* other) {
  if (other != this) {
    cvstix_.Swap(&other->cvstix_);
    cvhash_.Swap(&other->cvhash_);
    std::swap(ivhashtablesize_, other->ivhashtablesize_);
    std::swap(ivhashtablerealsize_, other->ivhashtablerealsize_);
    std::swap(ivsstabletype_, other->ivsstabletype_);
    std::swap(svredotimestamp_, other->svredotimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoIndx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoIndx_descriptor_;
  metadata.reflection = PrtoIndx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoIatm::kCVstixFieldNumber;
const int PrtoIatm::kCVhashFieldNumber;
#endif  // !_MSC_VER

PrtoIatm::PrtoIatm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoIatm)
}

void PrtoIatm::InitAsDefaultInstance() {
}

PrtoIatm::PrtoIatm(const PrtoIatm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoIatm)
}

void PrtoIatm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoIatm::~PrtoIatm() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoIatm)
  SharedDtor();
}

void PrtoIatm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoIatm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoIatm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoIatm_descriptor_;
}

const PrtoIatm& PrtoIatm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSstb_2eproto();
  return *default_instance_;
}

PrtoIatm* PrtoIatm::default_instance_ = NULL;

PrtoIatm* PrtoIatm::New() const {
  return new PrtoIatm;
}

void PrtoIatm::Clear() {
  cvstix_.Clear();
  cvhash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoIatm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoIatm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoStix cVstix = 1;
      case 1: {
        if (tag == 10) {
         parse_cVstix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvstix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVstix;
        if (input->ExpectTag(18)) goto parse_cVhash;
        break;
      }

      // repeated .com.tomting.orion.PrtoHash cVhash = 2;
      case 2: {
        if (tag == 18) {
         parse_cVhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvhash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVhash;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoIatm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoIatm)
  return false;
#undef DO_
}

void PrtoIatm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoIatm)
  // repeated .com.tomting.orion.PrtoStix cVstix = 1;
  for (int i = 0; i < this->cvstix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvstix(i), output);
  }

  // repeated .com.tomting.orion.PrtoHash cVhash = 2;
  for (int i = 0; i < this->cvhash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvhash(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoIatm)
}

::google::protobuf::uint8* PrtoIatm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoIatm)
  // repeated .com.tomting.orion.PrtoStix cVstix = 1;
  for (int i = 0; i < this->cvstix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvstix(i), target);
  }

  // repeated .com.tomting.orion.PrtoHash cVhash = 2;
  for (int i = 0; i < this->cvhash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvhash(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoIatm)
  return target;
}

int PrtoIatm::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoStix cVstix = 1;
  total_size += 1 * this->cvstix_size();
  for (int i = 0; i < this->cvstix_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvstix(i));
  }

  // repeated .com.tomting.orion.PrtoHash cVhash = 2;
  total_size += 1 * this->cvhash_size();
  for (int i = 0; i < this->cvhash_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvhash(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoIatm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoIatm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoIatm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoIatm::MergeFrom(const PrtoIatm& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvstix_.MergeFrom(from.cvstix_);
  cvhash_.MergeFrom(from.cvhash_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoIatm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoIatm::CopyFrom(const PrtoIatm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoIatm::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvstix())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvhash())) return false;
  return true;
}

void PrtoIatm::Swap(PrtoIatm* other) {
  if (other != this) {
    cvstix_.Swap(&other->cvstix_);
    cvhash_.Swap(&other->cvhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoIatm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoIatm_descriptor_;
  metadata.reflection = PrtoIatm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoData::kSVkeyFieldNumber;
const int PrtoData::kIVmainkeylengthFieldNumber;
const int PrtoData::kSVopaquevalueFieldNumber;
#endif  // !_MSC_VER

PrtoData::PrtoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoData)
}

void PrtoData::InitAsDefaultInstance() {
}

PrtoData::PrtoData(const PrtoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoData)
}

void PrtoData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivmainkeylength_ = 0u;
  svopaquevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoData::~PrtoData() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoData)
  SharedDtor();
}

void PrtoData::SharedDtor() {
  if (svkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svkey_;
  }
  if (svopaquevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svopaquevalue_;
  }
  if (this != default_instance_) {
  }
}

void PrtoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoData_descriptor_;
}

const PrtoData& PrtoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoSstb_2eproto();
  return *default_instance_;
}

PrtoData* PrtoData::default_instance_ = NULL;

PrtoData* PrtoData::New() const {
  return new PrtoData;
}

void PrtoData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_svkey()) {
      if (svkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svkey_->clear();
      }
    }
    ivmainkeylength_ = 0u;
    if (has_svopaquevalue()) {
      if (svopaquevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svopaquevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVkey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVmainkeylength;
        break;
      }

      // required uint32 iVmainkeylength = 2;
      case 2: {
        if (tag == 16) {
         parse_iVmainkeylength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivmainkeylength_)));
          set_has_ivmainkeylength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sVopaquevalue;
        break;
      }

      // required bytes sVopaquevalue = 3;
      case 3: {
        if (tag == 26) {
         parse_sVopaquevalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svopaquevalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoData)
  return false;
#undef DO_
}

void PrtoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoData)
  // required bytes sVkey = 1;
  if (has_svkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svkey(), output);
  }

  // required uint32 iVmainkeylength = 2;
  if (has_ivmainkeylength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ivmainkeylength(), output);
  }

  // required bytes sVopaquevalue = 3;
  if (has_svopaquevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->svopaquevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoData)
}

::google::protobuf::uint8* PrtoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoData)
  // required bytes sVkey = 1;
  if (has_svkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svkey(), target);
  }

  // required uint32 iVmainkeylength = 2;
  if (has_ivmainkeylength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ivmainkeylength(), target);
  }

  // required bytes sVopaquevalue = 3;
  if (has_svopaquevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->svopaquevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoData)
  return target;
}

int PrtoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVkey = 1;
    if (has_svkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svkey());
    }

    // required uint32 iVmainkeylength = 2;
    if (has_ivmainkeylength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivmainkeylength());
    }

    // required bytes sVopaquevalue = 3;
    if (has_svopaquevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svopaquevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoData::MergeFrom(const PrtoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svkey()) {
      set_svkey(from.svkey());
    }
    if (from.has_ivmainkeylength()) {
      set_ivmainkeylength(from.ivmainkeylength());
    }
    if (from.has_svopaquevalue()) {
      set_svopaquevalue(from.svopaquevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoData::CopyFrom(const PrtoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PrtoData::Swap(PrtoData* other) {
  if (other != this) {
    std::swap(svkey_, other->svkey_);
    std::swap(ivmainkeylength_, other->ivmainkeylength_);
    std::swap(svopaquevalue_, other->svopaquevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoData_descriptor_;
  metadata.reflection = PrtoData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace orion
}  // namespace tomting
}  // namespace com

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrtoAlog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PrtoAlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tomting {
namespace orion {

namespace {

const ::google::protobuf::Descriptor* PrtoSsls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoSsls_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLstr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLstr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLmtb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLmtb_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLkey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLkey_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLval_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLstm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLstm_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLsts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLsts_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLqry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLqry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoLlog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoLlog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2cv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2cv_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2cl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2cl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2st_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2st_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2ag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2ag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2ix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2ix_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2ct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2ct_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2ao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2ao_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2vo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2vo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2ks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2ks_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2or_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2or_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2wh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2wh_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2qr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2qr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2os_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2os_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2mr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2mr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoL2iv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoL2iv_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoGoel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoGoel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoGoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoGoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoGosr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoGosr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoHiha_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoHiha_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoPtel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoPtel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoStel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoStel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoTlel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoTlel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoTabl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoTabl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoAenp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoAenp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoTope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoTope_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoTop__descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoTop__reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoSrvc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoSrvc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoSrvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoSrvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoBsrc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoBsrc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtoBsrr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtoBsrr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* iCpartitiontype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCstatetype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCopcodetype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCquerytype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCtablettype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCcolumntype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCconditiontype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCtabletype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCindextype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCordertype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCstategossipnode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCstatstype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCservicetype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCbulkservicetype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iCdbleveltype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PrtoAlog_2eproto() {
  protobuf_AddDesc_PrtoAlog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PrtoAlog.proto");
  GOOGLE_CHECK(file != NULL);
  PrtoSsls_descriptor_ = file->message_type(0);
  static const int PrtoSsls_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSsls, svlistindex_),
  };
  PrtoSsls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoSsls_descriptor_,
      PrtoSsls::default_instance_,
      PrtoSsls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSsls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSsls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoSsls));
  PrtoLstr_descriptor_ = file->message_type(1);
  static const int PrtoLstr_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, ivmemtabledim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, ivmemtablesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, ivmemtablechunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, bvmemorytable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, bvvolatiletable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, bvlocalindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, bvfastkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, svshardingfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, svshardingto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, svshardingindexfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, svshardingindexto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, ivpartitiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, bvrepair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, ivreplicationfactor_),
  };
  PrtoLstr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLstr_descriptor_,
      PrtoLstr::default_instance_,
      PrtoLstr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLstr));
  PrtoLmtb_descriptor_ = file->message_type(2);
  static const int PrtoLmtb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLmtb, svnamespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLmtb, svtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLmtb, cvstorage_),
  };
  PrtoLmtb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLmtb_descriptor_,
      PrtoLmtb::default_instance_,
      PrtoLmtb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLmtb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLmtb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLmtb));
  PrtoLkey_descriptor_ = file->message_type(3);
  static const int PrtoLkey_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, svmain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, svaccessgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, svqualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, ivstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, ivtimestamp_),
  };
  PrtoLkey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLkey_descriptor_,
      PrtoLkey::default_instance_,
      PrtoLkey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLkey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLkey));
  PrtoLval_descriptor_ = file->message_type(4);
  static const int PrtoLval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLval, svopaquevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLval, ivtimestamp_),
  };
  PrtoLval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLval_descriptor_,
      PrtoLval::default_instance_,
      PrtoLval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLval));
  PrtoLstm_descriptor_ = file->message_type(5);
  static const int PrtoLstm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstm, ivopcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstm, cvmutable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstm, cvkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstm, cvvalue_),
  };
  PrtoLstm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLstm_descriptor_,
      PrtoLstm::default_instance_,
      PrtoLstm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLstm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLstm));
  PrtoLsts_descriptor_ = file->message_type(6);
  static const int PrtoLsts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLsts, cvliststatement_),
  };
  PrtoLsts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLsts_descriptor_,
      PrtoLsts::default_instance_,
      PrtoLsts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLsts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLsts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLsts));
  PrtoLqry_descriptor_ = file->message_type(7);
  static const int PrtoLqry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLqry, ivquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLqry, cvmutable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLqry, cvkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLqry, bvdigest_),
  };
  PrtoLqry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLqry_descriptor_,
      PrtoLqry::default_instance_,
      PrtoLqry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLqry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLqry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLqry));
  PrtoLlog_descriptor_ = file->message_type(8);
  static const int PrtoLlog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLlog, svtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLlog, cvstatement_),
  };
  PrtoLlog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoLlog_descriptor_,
      PrtoLlog::default_instance_,
      PrtoLlog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLlog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoLlog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoLlog));
  PrtoL2cv_descriptor_ = file->message_type(9);
  static const int PrtoL2cv_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, ivtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, svvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, svlistvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, ivvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, ivlistvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, dvvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, dvlistvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, bvvalue_),
  };
  PrtoL2cv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2cv_descriptor_,
      PrtoL2cv::default_instance_,
      PrtoL2cv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2cv));
  PrtoL2cl_descriptor_ = file->message_type(10);
  static const int PrtoL2cl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cl, svcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cl, ivtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cl, cvvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cl, ivconditiontype_),
  };
  PrtoL2cl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2cl_descriptor_,
      PrtoL2cl::default_instance_,
      PrtoL2cl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2cl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2cl));
  PrtoL2st_descriptor_ = file->message_type(11);
  static const int PrtoL2st_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, ivopcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, cvmutable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, cvkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, cvcolumns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, ivtimestamp_),
  };
  PrtoL2st_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2st_descriptor_,
      PrtoL2st::default_instance_,
      PrtoL2st_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2st, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2st));
  PrtoL2ag_descriptor_ = file->message_type(12);
  static const int PrtoL2ag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ag, svname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ag, svcolumns_),
  };
  PrtoL2ag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2ag_descriptor_,
      PrtoL2ag::default_instance_,
      PrtoL2ag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2ag));
  PrtoL2ix_descriptor_ = file->message_type(13);
  static const int PrtoL2ix_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ix, svindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ix, cvcolumn_),
  };
  PrtoL2ix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2ix_descriptor_,
      PrtoL2ix::default_instance_,
      PrtoL2ix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2ix));
  PrtoL2ct_descriptor_ = file->message_type(14);
  static const int PrtoL2ct_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, cvmutable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, cvcolumns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, cvaccessgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, ivmemtabledim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, ivreplicationfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, ivtabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, ivpartitiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, ivindextype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, cvindexes_),
  };
  PrtoL2ct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2ct_descriptor_,
      PrtoL2ct::default_instance_,
      PrtoL2ct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2ct));
  PrtoL2ao_descriptor_ = file->message_type(15);
  static const int PrtoL2ao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ao, cvcolumns_),
  };
  PrtoL2ao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2ao_descriptor_,
      PrtoL2ao::default_instance_,
      PrtoL2ao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2ao));
  PrtoL2vo_descriptor_ = file->message_type(16);
  static const int PrtoL2vo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2vo, cvaccessobject_),
  };
  PrtoL2vo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2vo_descriptor_,
      PrtoL2vo::default_instance_,
      PrtoL2vo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2vo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2vo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2vo));
  PrtoL2ks_descriptor_ = file->message_type(17);
  static const int PrtoL2ks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ks, cvkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ks, cvcolumns_),
  };
  PrtoL2ks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2ks_descriptor_,
      PrtoL2ks::default_instance_,
      PrtoL2ks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2ks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2ks));
  PrtoL2or_descriptor_ = file->message_type(18);
  static const int PrtoL2or_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2or, svcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2or, ivordertype_),
  };
  PrtoL2or_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2or_descriptor_,
      PrtoL2or::default_instance_,
      PrtoL2or_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2or, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2or, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2or));
  PrtoL2wh_descriptor_ = file->message_type(19);
  static const int PrtoL2wh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2wh, cvcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2wh, cvorderby_),
  };
  PrtoL2wh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2wh_descriptor_,
      PrtoL2wh::default_instance_,
      PrtoL2wh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2wh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2wh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2wh));
  PrtoL2qr_descriptor_ = file->message_type(20);
  static const int PrtoL2qr_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, cvselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, cvmutable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, ivquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, cvkey_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, cvkey_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, cvwhere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, ivcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, bvonlysecondary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, bvdisableteleport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, bvfulltablescan_),
  };
  PrtoL2qr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2qr_descriptor_,
      PrtoL2qr::default_instance_,
      PrtoL2qr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2qr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2qr));
  PrtoL2os_descriptor_ = file->message_type(21);
  static const int PrtoL2os_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, svnamespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, svosqlstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, cvinputbindings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, bvonlysecondary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, bvdisableteleport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, ivtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, bvfulltablescan_),
  };
  PrtoL2os_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2os_descriptor_,
      PrtoL2os::default_instance_,
      PrtoL2os_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2os, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2os));
  PrtoL2mr_descriptor_ = file->message_type(22);
  static const int PrtoL2mr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2mr, cvkeyslice_),
  };
  PrtoL2mr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2mr_descriptor_,
      PrtoL2mr::default_instance_,
      PrtoL2mr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2mr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2mr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2mr));
  PrtoL2iv_descriptor_ = file->message_type(23);
  static const int PrtoL2iv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2iv, ivkeydelimiters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2iv, svoriginalkey_),
  };
  PrtoL2iv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoL2iv_descriptor_,
      PrtoL2iv::default_instance_,
      PrtoL2iv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2iv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoL2iv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoL2iv));
  PrtoGoel_descriptor_ = file->message_type(24);
  static const int PrtoGoel_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, svtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, svnodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, svdatacenterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, dvphiaccrual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, svaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, ivport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, svreader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, svwriter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, ivstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, ivtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, ivsize_),
  };
  PrtoGoel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoGoel_descriptor_,
      PrtoGoel::default_instance_,
      PrtoGoel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoGoel));
  PrtoGoss_descriptor_ = file->message_type(25);
  static const int PrtoGoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoss, cvgossipelement_),
  };
  PrtoGoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoGoss_descriptor_,
      PrtoGoss::default_instance_,
      PrtoGoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoGoss));
  PrtoGosr_descriptor_ = file->message_type(26);
  static const int PrtoGosr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGosr, cvgossipelement_),
  };
  PrtoGosr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoGosr_descriptor_,
      PrtoGosr::default_instance_,
      PrtoGosr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGosr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoGosr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoGosr));
  PrtoHiha_descriptor_ = file->message_type(27);
  static const int PrtoHiha_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHiha, svnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHiha, cvstatements_),
  };
  PrtoHiha_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoHiha_descriptor_,
      PrtoHiha::default_instance_,
      PrtoHiha_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHiha, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoHiha, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoHiha));
  PrtoPtel_descriptor_ = file->message_type(28);
  static const int PrtoPtel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPtel, svnodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPtel, svbound_),
  };
  PrtoPtel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoPtel_descriptor_,
      PrtoPtel::default_instance_,
      PrtoPtel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPtel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoPtel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoPtel));
  PrtoStel_descriptor_ = file->message_type(29);
  static const int PrtoStel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, ivcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, ivmeandelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, ivworstdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, ivsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, ivelapsed_),
  };
  PrtoStel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoStel_descriptor_,
      PrtoStel::default_instance_,
      PrtoStel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoStel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoStel));
  PrtoTlel_descriptor_ = file->message_type(30);
  static const int PrtoTlel_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivtablettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, svname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, bvvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, bvneedcompaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, bvvalidasmemorytable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivcompactionlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, svmemorytable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivmapped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, svredotimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, ivsstabletype_),
  };
  PrtoTlel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoTlel_descriptor_,
      PrtoTlel::default_instance_,
      PrtoTlel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTlel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoTlel));
  PrtoTabl_descriptor_ = file->message_type(31);
  static const int PrtoTabl_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, svxml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, cvpartitionedelements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, cvpartitionedindexelements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, cvtabletelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, cvindextabletelement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, svjoincustompartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, svjoincustompartitionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, svpartitiontype_),
  };
  PrtoTabl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoTabl_descriptor_,
      PrtoTabl::default_instance_,
      PrtoTabl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTabl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoTabl));
  PrtoAenp_descriptor_ = file->message_type(32);
  static const int PrtoAenp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, svopaquedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, svnodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, cvmutable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, svkeystart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, ivlimitsize_),
  };
  PrtoAenp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoAenp_descriptor_,
      PrtoAenp::default_instance_,
      PrtoAenp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoAenp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoAenp));
  PrtoTope_descriptor_ = file->message_type(33);
  static const int PrtoTope_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, svtablet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, ivreadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, ivwritetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, ivreadcountl2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, ivwritecountl2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, ivreadcountl1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, ivwritecountl1_),
  };
  PrtoTope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoTope_descriptor_,
      PrtoTope::default_instance_,
      PrtoTope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoTope));
  PrtoTop__descriptor_ = file->message_type(34);
  static const int PrtoTop__offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTop_, ivtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTop_, cvtopelement_),
  };
  PrtoTop__reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoTop__descriptor_,
      PrtoTop_::default_instance_,
      PrtoTop__offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTop_, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoTop_, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoTop_));
  PrtoSrvc_descriptor_ = file->message_type(35);
  static const int PrtoSrvc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvc, ivservicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvc, cvquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvc, cvstatement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvc, cvosql_),
  };
  PrtoSrvc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoSrvc_descriptor_,
      PrtoSrvc::default_instance_,
      PrtoSrvc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoSrvc));
  PrtoSrvr_descriptor_ = file->message_type(36);
  static const int PrtoSrvr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvr, bvreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvr, cvdmlresult_),
  };
  PrtoSrvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoSrvr_descriptor_,
      PrtoSrvr::default_instance_,
      PrtoSrvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoSrvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoSrvr));
  PrtoBsrc_descriptor_ = file->message_type(37);
  static const int PrtoBsrc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrc, ivbulkservicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrc, cvbulkproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrc, cvbulkstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrc, cvsingleproto_),
  };
  PrtoBsrc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoBsrc_descriptor_,
      PrtoBsrc::default_instance_,
      PrtoBsrc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoBsrc));
  PrtoBsrr_descriptor_ = file->message_type(38);
  static const int PrtoBsrr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrr, cvbulkproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrr, cvbulkstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrr, cvsingleproto_),
  };
  PrtoBsrr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtoBsrr_descriptor_,
      PrtoBsrr::default_instance_,
      PrtoBsrr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtoBsrr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtoBsrr));
  iCpartitiontype_descriptor_ = file->enum_type(0);
  iCstatetype_descriptor_ = file->enum_type(1);
  iCopcodetype_descriptor_ = file->enum_type(2);
  iCquerytype_descriptor_ = file->enum_type(3);
  iCtablettype_descriptor_ = file->enum_type(4);
  iCcolumntype_descriptor_ = file->enum_type(5);
  iCconditiontype_descriptor_ = file->enum_type(6);
  iCtabletype_descriptor_ = file->enum_type(7);
  iCindextype_descriptor_ = file->enum_type(8);
  iCordertype_descriptor_ = file->enum_type(9);
  iCstategossipnode_descriptor_ = file->enum_type(10);
  iCstatstype_descriptor_ = file->enum_type(11);
  iCservicetype_descriptor_ = file->enum_type(12);
  iCbulkservicetype_descriptor_ = file->enum_type(13);
  iCdbleveltype_descriptor_ = file->enum_type(14);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PrtoAlog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoSsls_descriptor_, &PrtoSsls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLstr_descriptor_, &PrtoLstr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLmtb_descriptor_, &PrtoLmtb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLkey_descriptor_, &PrtoLkey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLval_descriptor_, &PrtoLval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLstm_descriptor_, &PrtoLstm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLsts_descriptor_, &PrtoLsts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLqry_descriptor_, &PrtoLqry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoLlog_descriptor_, &PrtoLlog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2cv_descriptor_, &PrtoL2cv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2cl_descriptor_, &PrtoL2cl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2st_descriptor_, &PrtoL2st::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2ag_descriptor_, &PrtoL2ag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2ix_descriptor_, &PrtoL2ix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2ct_descriptor_, &PrtoL2ct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2ao_descriptor_, &PrtoL2ao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2vo_descriptor_, &PrtoL2vo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2ks_descriptor_, &PrtoL2ks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2or_descriptor_, &PrtoL2or::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2wh_descriptor_, &PrtoL2wh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2qr_descriptor_, &PrtoL2qr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2os_descriptor_, &PrtoL2os::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2mr_descriptor_, &PrtoL2mr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoL2iv_descriptor_, &PrtoL2iv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoGoel_descriptor_, &PrtoGoel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoGoss_descriptor_, &PrtoGoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoGosr_descriptor_, &PrtoGosr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoHiha_descriptor_, &PrtoHiha::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoPtel_descriptor_, &PrtoPtel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoStel_descriptor_, &PrtoStel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoTlel_descriptor_, &PrtoTlel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoTabl_descriptor_, &PrtoTabl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoAenp_descriptor_, &PrtoAenp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoTope_descriptor_, &PrtoTope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoTop__descriptor_, &PrtoTop_::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoSrvc_descriptor_, &PrtoSrvc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoSrvr_descriptor_, &PrtoSrvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoBsrc_descriptor_, &PrtoBsrc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtoBsrr_descriptor_, &PrtoBsrr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PrtoAlog_2eproto() {
  delete PrtoSsls::default_instance_;
  delete PrtoSsls_reflection_;
  delete PrtoLstr::default_instance_;
  delete PrtoLstr_reflection_;
  delete PrtoLmtb::default_instance_;
  delete PrtoLmtb_reflection_;
  delete PrtoLkey::default_instance_;
  delete PrtoLkey_reflection_;
  delete PrtoLval::default_instance_;
  delete PrtoLval_reflection_;
  delete PrtoLstm::default_instance_;
  delete PrtoLstm_reflection_;
  delete PrtoLsts::default_instance_;
  delete PrtoLsts_reflection_;
  delete PrtoLqry::default_instance_;
  delete PrtoLqry_reflection_;
  delete PrtoLlog::default_instance_;
  delete PrtoLlog_reflection_;
  delete PrtoL2cv::default_instance_;
  delete PrtoL2cv_reflection_;
  delete PrtoL2cl::default_instance_;
  delete PrtoL2cl_reflection_;
  delete PrtoL2st::default_instance_;
  delete PrtoL2st_reflection_;
  delete PrtoL2ag::default_instance_;
  delete PrtoL2ag_reflection_;
  delete PrtoL2ix::default_instance_;
  delete PrtoL2ix_reflection_;
  delete PrtoL2ct::default_instance_;
  delete PrtoL2ct_reflection_;
  delete PrtoL2ao::default_instance_;
  delete PrtoL2ao_reflection_;
  delete PrtoL2vo::default_instance_;
  delete PrtoL2vo_reflection_;
  delete PrtoL2ks::default_instance_;
  delete PrtoL2ks_reflection_;
  delete PrtoL2or::default_instance_;
  delete PrtoL2or_reflection_;
  delete PrtoL2wh::default_instance_;
  delete PrtoL2wh_reflection_;
  delete PrtoL2qr::default_instance_;
  delete PrtoL2qr_reflection_;
  delete PrtoL2os::default_instance_;
  delete PrtoL2os_reflection_;
  delete PrtoL2mr::default_instance_;
  delete PrtoL2mr_reflection_;
  delete PrtoL2iv::default_instance_;
  delete PrtoL2iv_reflection_;
  delete PrtoGoel::default_instance_;
  delete PrtoGoel_reflection_;
  delete PrtoGoss::default_instance_;
  delete PrtoGoss_reflection_;
  delete PrtoGosr::default_instance_;
  delete PrtoGosr_reflection_;
  delete PrtoHiha::default_instance_;
  delete PrtoHiha_reflection_;
  delete PrtoPtel::default_instance_;
  delete PrtoPtel_reflection_;
  delete PrtoStel::default_instance_;
  delete PrtoStel_reflection_;
  delete PrtoTlel::default_instance_;
  delete PrtoTlel_reflection_;
  delete PrtoTabl::default_instance_;
  delete PrtoTabl_reflection_;
  delete PrtoAenp::default_instance_;
  delete PrtoAenp_reflection_;
  delete PrtoTope::default_instance_;
  delete PrtoTope_reflection_;
  delete PrtoTop_::default_instance_;
  delete PrtoTop__reflection_;
  delete PrtoSrvc::default_instance_;
  delete PrtoSrvc_reflection_;
  delete PrtoSrvr::default_instance_;
  delete PrtoSrvr_reflection_;
  delete PrtoBsrc::default_instance_;
  delete PrtoBsrc_reflection_;
  delete PrtoBsrr::default_instance_;
  delete PrtoBsrr_reflection_;
}

void protobuf_AddDesc_PrtoAlog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PrtoAlog.proto\022\021com.tomting.orion\"\037\n\010P"
    "rtoSsls\022\023\n\013sVlistindex\030\001 \003(\014\"\244\003\n\010PrtoLst"
    "r\022\025\n\riVmemtabledim\030\001 \001(\005\022\026\n\016iVmemtablesi"
    "ze\030\002 \001(\005\022\027\n\017iVmemtablechunk\030\010 \001(\005\022\034\n\rbVm"
    "emorytable\030\003 \001(\010:\005false\022\036\n\017bVvolatiletab"
    "le\030\013 \001(\010:\005false\022\033\n\014bVlocalindex\030\014 \001(\010:\005f"
    "alse\022\030\n\tbVfastkey\030\016 \001(\010:\005false\022\026\n\016sVshar"
    "dingfrom\030\004 \001(\014\022\024\n\014sVshardingto\030\005 \001(\014\022\033\n\023"
    "sVshardingindexfrom\030\006 \001(\014\022\031\n\021sVshardingi"
    "ndexto\030\007 \001(\014\022;\n\017iVpartitiontype\030\t \001(\0162\"."
    "com.tomting.orion.iCpartitiontype\022\027\n\010bVr"
    "epair\030\n \001(\010:\005false\022\037\n\023iVreplicationfacto"
    "r\030\r \001(\005:\002-1\"`\n\010PrtoLmtb\022\023\n\013sVnamespace\030\001"
    " \002(\014\022\017\n\007sVtable\030\002 \001(\014\022.\n\tcVstorage\030\003 \001(\013"
    "2\033.com.tomting.orion.PrtoLstr\"\233\001\n\010PrtoLk"
    "ey\022\016\n\006sVmain\030\001 \002(\014\022\027\n\rsVaccessgroup\030\002 \001("
    "\014:\000\022\025\n\013sVqualifier\030\003 \001(\014:\000\0227\n\007iVstate\030\004 "
    "\001(\0162\036.com.tomting.orion.iCstatetype:\006UPS"
    "ERT\022\026\n\013iVtimestamp\030\005 \001(\003:\0010\"6\n\010PrtoLval\022"
    "\025\n\rsVopaquevalue\030\001 \002(\014\022\023\n\013iVtimestamp\030\002 "
    "\002(\003\"\307\001\n\010PrtoLstm\0221\n\010iVopcode\030\001 \002(\0162\037.com"
    ".tomting.orion.iCopcodetype\022.\n\tcVmutable"
    "\030\002 \002(\0132\033.com.tomting.orion.PrtoLmtb\022*\n\005c"
    "Vkey\030\004 \001(\0132\033.com.tomting.orion.PrtoLkey\022"
    ",\n\007cVvalue\030\005 \001(\0132\033.com.tomting.orion.Prt"
    "oLval\"@\n\010PrtoLsts\0224\n\017cVliststatement\030\001 \003"
    "(\0132\033.com.tomting.orion.PrtoLstm\"\260\001\n\010Prto"
    "Lqry\022/\n\007iVquery\030\001 \002(\0162\036.com.tomting.orio"
    "n.iCquerytype\022.\n\tcVmutable\030\002 \002(\0132\033.com.t"
    "omting.orion.PrtoLmtb\022*\n\005cVkey\030\004 \002(\0132\033.c"
    "om.tomting.orion.PrtoLkey\022\027\n\010bVdigest\030\005 "
    "\002(\010:\005false\"Q\n\010PrtoLlog\022\023\n\013sVtimestamp\030\001 "
    "\002(\014\0220\n\013cVstatement\030\002 \002(\0132\033.com.tomting.o"
    "rion.PrtoLstm\"\312\001\n\010PrtoL2cv\022;\n\006iVtype\030\001 \001"
    "(\0162\037.com.tomting.orion.iCcolumntype:\nSTR"
    "INGTYPE\022\017\n\007sVvalue\030\002 \001(\014\022\023\n\013sVlistvalue\030"
    "\003 \003(\014\022\017\n\007iVvalue\030\004 \001(\005\022\023\n\013iVlistvalue\030\005 "
    "\003(\005\022\017\n\007dVvalue\030\006 \001(\001\022\023\n\013dVlistvalue\030\007 \003("
    "\001\022\017\n\007bVvalue\030\010 \001(\010\"\304\001\n\010PrtoL2cl\022\020\n\010sVcol"
    "umn\030\001 \002(\014\022;\n\006iVtype\030\002 \001(\0162\037.com.tomting."
    "orion.iCcolumntype:\nSTRINGTYPE\022,\n\007cVvalu"
    "e\030\003 \001(\0132\033.com.tomting.orion.PrtoL2cv\022;\n\017"
    "iVconditiontype\030\004 \001(\0162\".com.tomting.orio"
    "n.iCconditiontype\"\352\001\n\010PrtoL2st\022:\n\010iVopco"
    "de\030\001 \001(\0162\037.com.tomting.orion.iCopcodetyp"
    "e:\007MUTATOR\022.\n\tcVmutable\030\002 \002(\0132\033.com.tomt"
    "ing.orion.PrtoLmtb\022*\n\005cVkey\030\003 \002(\0132\033.com."
    "tomting.orion.PrtoLkey\022.\n\tcVcolumns\030\004 \003("
    "\0132\033.com.tomting.orion.PrtoL2cl\022\026\n\013iVtime"
    "stamp\030\005 \001(\003:\0010\"-\n\010PrtoL2ag\022\016\n\006sVname\030\001 \002"
    "(\014\022\021\n\tsVcolumns\030\002 \003(\014\"J\n\010PrtoL2ix\022\017\n\007sVi"
    "ndex\030\001 \002(\014\022-\n\010cVcolumn\030\002 \003(\0132\033.com.tomti"
    "ng.orion.PrtoL2or\"\330\003\n\010PrtoL2ct\022.\n\tcVmuta"
    "ble\030\001 \002(\0132\033.com.tomting.orion.PrtoLmtb\022."
    "\n\tcVcolumns\030\002 \003(\0132\033.com.tomting.orion.Pr"
    "toL2cl\0223\n\016cVaccessgroups\030\003 \003(\0132\033.com.tom"
    "ting.orion.PrtoL2ag\022\030\n\riVmemtabledim\030\004 \001"
    "(\005:\0010\022\036\n\023iVreplicationfactor\030\005 \001(\005:\0011\022B\n"
    "\013iVtabletype\030\006 \001(\0162\036.com.tomting.orion.i"
    "Ctabletype:\rVOLATILETABLE\022H\n\017iVpartition"
    "type\030\007 \001(\0162\".com.tomting.orion.iCpartiti"
    "ontype:\013NOPARTITION\022\?\n\013iVindextype\030\010 \001(\016"
    "2\036.com.tomting.orion.iCindextype:\nDISTRI"
    "NDEX\022.\n\tcVindexes\030\t \003(\0132\033.com.tomting.or"
    "ion.PrtoL2ix\":\n\010PrtoL2ao\022.\n\tcVcolumns\030\001 "
    "\003(\0132\033.com.tomting.orion.PrtoL2cl\"\?\n\010Prto"
    "L2vo\0223\n\016cVaccessobject\030\001 \003(\0132\033.com.tomti"
    "ng.orion.PrtoL2ao\"f\n\010PrtoL2ks\022*\n\005cVkey\030\001"
    " \002(\0132\033.com.tomting.orion.PrtoLkey\022.\n\tcVc"
    "olumns\030\002 \003(\0132\033.com.tomting.orion.PrtoL2c"
    "l\"Q\n\010PrtoL2or\022\020\n\010sVcolumn\030\001 \002(\014\0223\n\013iVord"
    "ertype\030\002 \002(\0162\036.com.tomting.orion.iCorder"
    "type\"l\n\010PrtoL2wh\0220\n\013cVcondition\030\001 \003(\0132\033."
    "com.tomting.orion.PrtoL2cl\022.\n\tcVorderby\030"
    "\002 \003(\0132\033.com.tomting.orion.PrtoL2or\"\242\003\n\010P"
    "rtoL2qr\022-\n\010cVselect\030\001 \003(\0132\033.com.tomting."
    "orion.PrtoL2cl\022.\n\tcVmutable\030\002 \002(\0132\033.com."
    "tomting.orion.PrtoLmtb\022/\n\007iVquery\030\003 \001(\0162"
    "\036.com.tomting.orion.iCquerytype\0220\n\013cVkey"
    "_start\030\004 \001(\0132\033.com.tomting.orion.PrtoLke"
    "y\022.\n\tcVkey_end\030\005 \001(\0132\033.com.tomting.orion"
    ".PrtoLkey\022,\n\007cVwhere\030\006 \001(\0132\033.com.tomting"
    ".orion.PrtoL2wh\022\024\n\007iVcount\030\007 \001(\005:\003100\022\036\n"
    "\017bVonlysecondary\030\010 \001(\010:\005false\022 \n\021bVdisab"
    "leteleport\030\t \001(\010:\005false\022\036\n\017bVfulltablesc"
    "an\030\n \001(\010:\005false\"\345\001\n\010PrtoL2os\022\023\n\013sVnamesp"
    "ace\030\001 \002(\014\022\024\n\014sVosqlstring\030\002 \002(\014\0224\n\017cVinp"
    "utbindings\030\003 \003(\0132\033.com.tomting.orion.Prt"
    "oL2cv\022\036\n\017bVonlysecondary\030\004 \001(\010:\005false\022 \n"
    "\021bVdisableteleport\030\005 \001(\010:\005false\022\026\n\013iVtim"
    "estamp\030\006 \001(\003:\0010\022\036\n\017bVfulltablescan\030\007 \001(\010"
    ":\005false\";\n\010PrtoL2mr\022/\n\ncVkeyslice\030\001 \003(\0132"
    "\033.com.tomting.orion.PrtoL2ks\":\n\010PrtoL2iv"
    "\022\027\n\017iVkeydelimiters\030\001 \003(\005\022\025\n\rsVoriginalk"
    "ey\030\002 \002(\014\"\376\001\n\010PrtoGoel\022\017\n\007sVtoken\030\001 \002(\014\022\020"
    "\n\010sVnodeid\030\002 \002(\014\022\026\n\016sVdatacenterid\030\003 \002(\014"
    "\022\024\n\014dVphiaccrual\030\004 \001(\001\022\021\n\tsVaddress\030\005 \001("
    "\014\022\016\n\006iVport\030\006 \001(\005\022\020\n\010sVreader\030\007 \001(\014\022\020\n\010s"
    "Vwriter\030\010 \001(\014\0225\n\007iVstate\030\t \001(\0162$.com.tom"
    "ting.orion.iCstategossipnode\022\023\n\013iVtimest"
    "amp\030\n \001(\003\022\016\n\006iVsize\030\013 \001(\003\"@\n\010PrtoGoss\0224\n"
    "\017cVgossipelement\030\001 \003(\0132\033.com.tomting.ori"
    "on.PrtoGoel\"@\n\010PrtoGosr\0224\n\017cVgossipeleme"
    "nt\030\001 \002(\0132\033.com.tomting.orion.PrtoGoel\"M\n"
    "\010PrtoHiha\022\016\n\006sVnode\030\001 \002(\014\0221\n\014cVstatement"
    "s\030\002 \002(\0132\033.com.tomting.orion.PrtoLsts\"-\n\010"
    "PrtoPtel\022\020\n\010sVnodeid\030\001 \002(\014\022\017\n\007sVbound\030\002 "
    "\002(\014\"i\n\010PrtoStel\022\017\n\007iVcount\030\001 \002(\003\022\023\n\013iVme"
    "andelay\030\002 \002(\005\022\024\n\014iVworstdelay\030\003 \002(\005\022\016\n\006i"
    "Vsize\030\004 \002(\003\022\021\n\tiVelapsed\030\005 \001(\003\"\276\002\n\010PrtoT"
    "lel\0225\n\014iVtablettype\030\001 \002(\0162\037.com.tomting."
    "orion.iCtablettype\022\016\n\006sVname\030\002 \002(\014\022\017\n\007bV"
    "valid\030\003 \002(\010\022\030\n\020bVneedcompaction\030\004 \002(\010\022\034\n"
    "\024bVvalidasmemorytable\030\005 \002(\010\022\031\n\021iVcompact"
    "ionlevel\030\006 \002(\005\022\025\n\rsVmemorytable\030\007 \002(\014\022\r\n"
    "\005iVres\030\010 \002(\003\022\020\n\010iVmapped\030\t \002(\003\022\016\n\006iVsize"
    "\030\n \002(\003\022\017\n\007iVcount\030\013 \002(\003\022\027\n\017sVredotimesta"
    "mp\030\014 \002(\014\022\025\n\riVsstabletype\030\r \002(\005\"\343\002\n\010Prto"
    "Tabl\022\r\n\005sVxml\030\001 \002(\014\022:\n\025cVpartitionedelem"
    "ents\030\002 \003(\0132\033.com.tomting.orion.PrtoPtel\022"
    "\?\n\032cVpartitionedindexelements\030\003 \003(\0132\033.co"
    "m.tomting.orion.PrtoPtel\0224\n\017cVtabletelem"
    "ent\030\004 \003(\0132\033.com.tomting.orion.PrtoTlel\0229"
    "\n\024cVindextabletelement\030\005 \003(\0132\033.com.tomti"
    "ng.orion.PrtoTlel\022\035\n\025sVjoincustompartiti"
    "on\030\006 \001(\014\022\"\n\032sVjoincustompartitionindex\030\007"
    " \001(\014\022\027\n\017sVpartitiontype\030\010 \001(\014\"\213\001\n\010PrtoAe"
    "np\022\024\n\014sVopaquedata\030\001 \002(\014\022\020\n\010sVnodeid\030\002 \001"
    "(\014\022.\n\tcVmutable\030\003 \001(\0132\033.com.tomting.orio"
    "n.PrtoLmtb\022\022\n\nsVkeystart\030\004 \001(\014\022\023\n\013iVlimi"
    "tsize\030\005 \001(\005\"\243\001\n\010PrtoTope\022\020\n\010sVtablet\030\001 \002"
    "(\014\022\022\n\niVreadtime\030\002 \001(\003\022\023\n\013iVwritetime\030\003 "
    "\001(\003\022\025\n\riVreadcountl2\030\004 \001(\003\022\026\n\016iVwritecou"
    "ntl2\030\005 \001(\003\022\025\n\riVreadcountl1\030\006 \001(\003\022\026\n\016iVw"
    "ritecountl1\030\007 \001(\003\"R\n\010PrtoTop_\022\023\n\013iVtimes"
    "tamp\030\001 \001(\003\0221\n\014cVtopelement\030\002 \003(\0132\033.com.t"
    "omting.orion.PrtoTope\"\320\001\n\010PrtoSrvc\0227\n\riV"
    "servicetype\030\001 \002(\0162 .com.tomting.orion.iC"
    "servicetype\022,\n\007cVquery\030\002 \001(\0132\033.com.tomti"
    "ng.orion.PrtoL2qr\0220\n\013cVstatement\030\003 \001(\0132\033"
    ".com.tomting.orion.PrtoL2st\022+\n\006cVosql\030\004 "
    "\001(\0132\033.com.tomting.orion.PrtoL2os\"N\n\010Prto"
    "Srvr\022\020\n\010bVreturn\030\001 \001(\010\0220\n\013cVdmlresult\030\002 "
    "\001(\0132\033.com.tomting.orion.PrtoL2mr\"\307\001\n\010Prt"
    "oBsrc\022\?\n\021iVbulkservicetype\030\001 \002(\0162$.com.t"
    "omting.orion.iCbulkservicetype\0220\n\013cVbulk"
    "proto\030\002 \003(\0132\033.com.tomting.orion.PrtoSrvc"
    "\022\024\n\014cVbulkstring\030\003 \003(\014\0222\n\rcVsingleproto\030"
    "\004 \001(\0132\033.com.tomting.orion.PrtoSrvc\"\206\001\n\010P"
    "rtoBsrr\0220\n\013cVbulkproto\030\001 \003(\0132\033.com.tomti"
    "ng.orion.PrtoSrvr\022\024\n\014cVbulkstring\030\002 \003(\014\022"
    "2\n\rcVsingleproto\030\003 \001(\0132\033.com.tomting.ori"
    "on.PrtoSrvr*\201\001\n\017iCpartitiontype\022\017\n\013NOPAR"
    "TITION\020\000\022\023\n\017RANDOMPARTITION\020\001\022\026\n\022BYTEORD"
    "ERPARTITION\020\002\022\023\n\017CUSTOMPARTITION\020\003\022\033\n\027BA"
    "LANCEDCUSTOMPARTITION\020\004*%\n\013iCstatetype\022\n"
    "\n\006UPSERT\020\000\022\n\n\006DELTMB\020\001*5\n\014iCopcodetype\022\013"
    "\n\007MUTATOR\020\000\022\013\n\007STORAGE\020\001\022\013\n\007REPAIR_\020\002*]\n"
    "\013iCquerytype\022\016\n\nEXACTQUERY\020\000\022\016\n\nRANGEQUE"
    "RY\020\001\022\016\n\nTOKENQUERY\020\002\022\016\n\nTKSLWQUERY\020\004\022\016\n\n"
    "NRNGEQUERY\020\005*K\n\014iCtablettype\022\023\n\017MEMORYTA"
    "BLETYPE\020\000\022\017\n\013SSTABLETYPE\020\001\022\025\n\021VOLATILETA"
    "BLETYPE\020\002*\216\001\n\014iCcolumntype\022\016\n\nKEYTYPE___"
    "\020\000\022\016\n\nSTRINGTYPE\020\001\022\016\n\nLSTRNGTYPE\020\002\022\016\n\nIN"
    "TEGRTYPE\020\003\022\016\n\nLINTGRTYPE\020\004\022\016\n\nDOUBLETYPE"
    "\020\005\022\016\n\nLDOUBLTYPE\020\006\022\016\n\nBOOLN_TYPE\020\007*J\n\017iC"
    "conditiontype\022\t\n\005ECOND\020\000\022\t\n\005GCOND\020\001\022\t\n\005L"
    "COND\020\002\022\n\n\006GECOND\020\003\022\n\n\006LECOND\020\004*F\n\013iCtabl"
    "etype\022\021\n\rSTANDARDTABLE\020\000\022\021\n\rMEMORYTABLE_"
    "_\020\001\022\021\n\rVOLATILETABLE\020\002*-\n\013iCindextype\022\016\n"
    "\nDISTRINDEX\020\000\022\016\n\nLOCALINDEX\020\001* \n\013iCorder"
    "type\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001*G\n\021iCstategossip"
    "node\022\013\n\007RUNNING\020\000\022\013\n\007JOINING\020\001\022\013\n\007LEAVIN"
    "G\020\002\022\013\n\007STOPPED\020\003*\"\n\013iCstatstype\022\010\n\004READ\020"
    "\000\022\t\n\005WRITE\020\001*3\n\riCservicetype\022\r\n\tSTATEME"
    "NT\020\000\022\t\n\005QUERY\020\001\022\010\n\004OSQL\020\002*M\n\021iCbulkservi"
    "cetype\022\r\n\tBULKPROTO\020\000\022\016\n\nBULKSTRING\020\001\022\017\n"
    "\013SINGLEPROTO\020\002\022\010\n\004PING\020\003*\037\n\riCdbleveltyp"
    "e\022\006\n\002L1\020\001\022\006\n\002L2\020\002", 7137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PrtoAlog.proto", &protobuf_RegisterTypes);
  PrtoSsls::default_instance_ = new PrtoSsls();
  PrtoLstr::default_instance_ = new PrtoLstr();
  PrtoLmtb::default_instance_ = new PrtoLmtb();
  PrtoLkey::default_instance_ = new PrtoLkey();
  PrtoLval::default_instance_ = new PrtoLval();
  PrtoLstm::default_instance_ = new PrtoLstm();
  PrtoLsts::default_instance_ = new PrtoLsts();
  PrtoLqry::default_instance_ = new PrtoLqry();
  PrtoLlog::default_instance_ = new PrtoLlog();
  PrtoL2cv::default_instance_ = new PrtoL2cv();
  PrtoL2cl::default_instance_ = new PrtoL2cl();
  PrtoL2st::default_instance_ = new PrtoL2st();
  PrtoL2ag::default_instance_ = new PrtoL2ag();
  PrtoL2ix::default_instance_ = new PrtoL2ix();
  PrtoL2ct::default_instance_ = new PrtoL2ct();
  PrtoL2ao::default_instance_ = new PrtoL2ao();
  PrtoL2vo::default_instance_ = new PrtoL2vo();
  PrtoL2ks::default_instance_ = new PrtoL2ks();
  PrtoL2or::default_instance_ = new PrtoL2or();
  PrtoL2wh::default_instance_ = new PrtoL2wh();
  PrtoL2qr::default_instance_ = new PrtoL2qr();
  PrtoL2os::default_instance_ = new PrtoL2os();
  PrtoL2mr::default_instance_ = new PrtoL2mr();
  PrtoL2iv::default_instance_ = new PrtoL2iv();
  PrtoGoel::default_instance_ = new PrtoGoel();
  PrtoGoss::default_instance_ = new PrtoGoss();
  PrtoGosr::default_instance_ = new PrtoGosr();
  PrtoHiha::default_instance_ = new PrtoHiha();
  PrtoPtel::default_instance_ = new PrtoPtel();
  PrtoStel::default_instance_ = new PrtoStel();
  PrtoTlel::default_instance_ = new PrtoTlel();
  PrtoTabl::default_instance_ = new PrtoTabl();
  PrtoAenp::default_instance_ = new PrtoAenp();
  PrtoTope::default_instance_ = new PrtoTope();
  PrtoTop_::default_instance_ = new PrtoTop_();
  PrtoSrvc::default_instance_ = new PrtoSrvc();
  PrtoSrvr::default_instance_ = new PrtoSrvr();
  PrtoBsrc::default_instance_ = new PrtoBsrc();
  PrtoBsrr::default_instance_ = new PrtoBsrr();
  PrtoSsls::default_instance_->InitAsDefaultInstance();
  PrtoLstr::default_instance_->InitAsDefaultInstance();
  PrtoLmtb::default_instance_->InitAsDefaultInstance();
  PrtoLkey::default_instance_->InitAsDefaultInstance();
  PrtoLval::default_instance_->InitAsDefaultInstance();
  PrtoLstm::default_instance_->InitAsDefaultInstance();
  PrtoLsts::default_instance_->InitAsDefaultInstance();
  PrtoLqry::default_instance_->InitAsDefaultInstance();
  PrtoLlog::default_instance_->InitAsDefaultInstance();
  PrtoL2cv::default_instance_->InitAsDefaultInstance();
  PrtoL2cl::default_instance_->InitAsDefaultInstance();
  PrtoL2st::default_instance_->InitAsDefaultInstance();
  PrtoL2ag::default_instance_->InitAsDefaultInstance();
  PrtoL2ix::default_instance_->InitAsDefaultInstance();
  PrtoL2ct::default_instance_->InitAsDefaultInstance();
  PrtoL2ao::default_instance_->InitAsDefaultInstance();
  PrtoL2vo::default_instance_->InitAsDefaultInstance();
  PrtoL2ks::default_instance_->InitAsDefaultInstance();
  PrtoL2or::default_instance_->InitAsDefaultInstance();
  PrtoL2wh::default_instance_->InitAsDefaultInstance();
  PrtoL2qr::default_instance_->InitAsDefaultInstance();
  PrtoL2os::default_instance_->InitAsDefaultInstance();
  PrtoL2mr::default_instance_->InitAsDefaultInstance();
  PrtoL2iv::default_instance_->InitAsDefaultInstance();
  PrtoGoel::default_instance_->InitAsDefaultInstance();
  PrtoGoss::default_instance_->InitAsDefaultInstance();
  PrtoGosr::default_instance_->InitAsDefaultInstance();
  PrtoHiha::default_instance_->InitAsDefaultInstance();
  PrtoPtel::default_instance_->InitAsDefaultInstance();
  PrtoStel::default_instance_->InitAsDefaultInstance();
  PrtoTlel::default_instance_->InitAsDefaultInstance();
  PrtoTabl::default_instance_->InitAsDefaultInstance();
  PrtoAenp::default_instance_->InitAsDefaultInstance();
  PrtoTope::default_instance_->InitAsDefaultInstance();
  PrtoTop_::default_instance_->InitAsDefaultInstance();
  PrtoSrvc::default_instance_->InitAsDefaultInstance();
  PrtoSrvr::default_instance_->InitAsDefaultInstance();
  PrtoBsrc::default_instance_->InitAsDefaultInstance();
  PrtoBsrr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PrtoAlog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PrtoAlog_2eproto {
  StaticDescriptorInitializer_PrtoAlog_2eproto() {
    protobuf_AddDesc_PrtoAlog_2eproto();
  }
} static_descriptor_initializer_PrtoAlog_2eproto_;
const ::google::protobuf::EnumDescriptor* iCpartitiontype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCpartitiontype_descriptor_;
}
bool iCpartitiontype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCstatetype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCstatetype_descriptor_;
}
bool iCstatetype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCopcodetype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCopcodetype_descriptor_;
}
bool iCopcodetype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCquerytype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCquerytype_descriptor_;
}
bool iCquerytype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCtablettype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCtablettype_descriptor_;
}
bool iCtablettype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCcolumntype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCcolumntype_descriptor_;
}
bool iCcolumntype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCconditiontype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCconditiontype_descriptor_;
}
bool iCconditiontype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCtabletype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCtabletype_descriptor_;
}
bool iCtabletype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCindextype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCindextype_descriptor_;
}
bool iCindextype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCordertype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCordertype_descriptor_;
}
bool iCordertype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCstategossipnode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCstategossipnode_descriptor_;
}
bool iCstategossipnode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCstatstype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCstatstype_descriptor_;
}
bool iCstatstype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCservicetype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCservicetype_descriptor_;
}
bool iCservicetype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCbulkservicetype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCbulkservicetype_descriptor_;
}
bool iCbulkservicetype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iCdbleveltype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iCdbleveltype_descriptor_;
}
bool iCdbleveltype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoSsls::kSVlistindexFieldNumber;
#endif  // !_MSC_VER

PrtoSsls::PrtoSsls()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoSsls)
}

void PrtoSsls::InitAsDefaultInstance() {
}

PrtoSsls::PrtoSsls(const PrtoSsls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoSsls)
}

void PrtoSsls::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoSsls::~PrtoSsls() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoSsls)
  SharedDtor();
}

void PrtoSsls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoSsls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoSsls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoSsls_descriptor_;
}

const PrtoSsls& PrtoSsls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoSsls* PrtoSsls::default_instance_ = NULL;

PrtoSsls* PrtoSsls::New() const {
  return new PrtoSsls;
}

void PrtoSsls::Clear() {
  svlistindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoSsls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoSsls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes sVlistindex = 1;
      case 1: {
        if (tag == 10) {
         parse_sVlistindex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_svlistindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sVlistindex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoSsls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoSsls)
  return false;
#undef DO_
}

void PrtoSsls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoSsls)
  // repeated bytes sVlistindex = 1;
  for (int i = 0; i < this->svlistindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->svlistindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoSsls)
}

::google::protobuf::uint8* PrtoSsls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoSsls)
  // repeated bytes sVlistindex = 1;
  for (int i = 0; i < this->svlistindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->svlistindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoSsls)
  return target;
}

int PrtoSsls::ByteSize() const {
  int total_size = 0;

  // repeated bytes sVlistindex = 1;
  total_size += 1 * this->svlistindex_size();
  for (int i = 0; i < this->svlistindex_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->svlistindex(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoSsls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoSsls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoSsls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoSsls::MergeFrom(const PrtoSsls& from) {
  GOOGLE_CHECK_NE(&from, this);
  svlistindex_.MergeFrom(from.svlistindex_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoSsls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoSsls::CopyFrom(const PrtoSsls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoSsls::IsInitialized() const {

  return true;
}

void PrtoSsls::Swap(PrtoSsls* other) {
  if (other != this) {
    svlistindex_.Swap(&other->svlistindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoSsls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoSsls_descriptor_;
  metadata.reflection = PrtoSsls_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLstr::kIVmemtabledimFieldNumber;
const int PrtoLstr::kIVmemtablesizeFieldNumber;
const int PrtoLstr::kIVmemtablechunkFieldNumber;
const int PrtoLstr::kBVmemorytableFieldNumber;
const int PrtoLstr::kBVvolatiletableFieldNumber;
const int PrtoLstr::kBVlocalindexFieldNumber;
const int PrtoLstr::kBVfastkeyFieldNumber;
const int PrtoLstr::kSVshardingfromFieldNumber;
const int PrtoLstr::kSVshardingtoFieldNumber;
const int PrtoLstr::kSVshardingindexfromFieldNumber;
const int PrtoLstr::kSVshardingindextoFieldNumber;
const int PrtoLstr::kIVpartitiontypeFieldNumber;
const int PrtoLstr::kBVrepairFieldNumber;
const int PrtoLstr::kIVreplicationfactorFieldNumber;
#endif  // !_MSC_VER

PrtoLstr::PrtoLstr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLstr)
}

void PrtoLstr::InitAsDefaultInstance() {
}

PrtoLstr::PrtoLstr(const PrtoLstr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLstr)
}

void PrtoLstr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ivmemtabledim_ = 0;
  ivmemtablesize_ = 0;
  ivmemtablechunk_ = 0;
  bvmemorytable_ = false;
  bvvolatiletable_ = false;
  bvlocalindex_ = false;
  bvfastkey_ = false;
  svshardingfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svshardingto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svshardingindexfrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svshardingindexto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivpartitiontype_ = 0;
  bvrepair_ = false;
  ivreplicationfactor_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLstr::~PrtoLstr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLstr)
  SharedDtor();
}

void PrtoLstr::SharedDtor() {
  if (svshardingfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svshardingfrom_;
  }
  if (svshardingto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svshardingto_;
  }
  if (svshardingindexfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svshardingindexfrom_;
  }
  if (svshardingindexto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svshardingindexto_;
  }
  if (this != default_instance_) {
  }
}

void PrtoLstr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLstr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLstr_descriptor_;
}

const PrtoLstr& PrtoLstr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLstr* PrtoLstr::default_instance_ = NULL;

PrtoLstr* PrtoLstr::New() const {
  return new PrtoLstr;
}

void PrtoLstr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoLstr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ivmemtabledim_, bvfastkey_);
    if (has_svshardingfrom()) {
      if (svshardingfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svshardingfrom_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(ivpartitiontype_, bvrepair_);
    if (has_svshardingto()) {
      if (svshardingto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svshardingto_->clear();
      }
    }
    if (has_svshardingindexfrom()) {
      if (svshardingindexfrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svshardingindexfrom_->clear();
      }
    }
    if (has_svshardingindexto()) {
      if (svshardingindexto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svshardingindexto_->clear();
      }
    }
    ivreplicationfactor_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLstr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLstr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iVmemtabledim = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivmemtabledim_)));
          set_has_ivmemtabledim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVmemtablesize;
        break;
      }

      // optional int32 iVmemtablesize = 2;
      case 2: {
        if (tag == 16) {
         parse_iVmemtablesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivmemtablesize_)));
          set_has_ivmemtablesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bVmemorytable;
        break;
      }

      // optional bool bVmemorytable = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_bVmemorytable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvmemorytable_)));
          set_has_bvmemorytable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sVshardingfrom;
        break;
      }

      // optional bytes sVshardingfrom = 4;
      case 4: {
        if (tag == 34) {
         parse_sVshardingfrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svshardingfrom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sVshardingto;
        break;
      }

      // optional bytes sVshardingto = 5;
      case 5: {
        if (tag == 42) {
         parse_sVshardingto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svshardingto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sVshardingindexfrom;
        break;
      }

      // optional bytes sVshardingindexfrom = 6;
      case 6: {
        if (tag == 50) {
         parse_sVshardingindexfrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svshardingindexfrom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sVshardingindexto;
        break;
      }

      // optional bytes sVshardingindexto = 7;
      case 7: {
        if (tag == 58) {
         parse_sVshardingindexto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svshardingindexto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iVmemtablechunk;
        break;
      }

      // optional int32 iVmemtablechunk = 8;
      case 8: {
        if (tag == 64) {
         parse_iVmemtablechunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivmemtablechunk_)));
          set_has_ivmemtablechunk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_iVpartitiontype;
        break;
      }

      // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 9;
      case 9: {
        if (tag == 72) {
         parse_iVpartitiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCpartitiontype_IsValid(value)) {
            set_ivpartitiontype(static_cast< ::com::tomting::orion::iCpartitiontype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_bVrepair;
        break;
      }

      // optional bool bVrepair = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_bVrepair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvrepair_)));
          set_has_bvrepair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bVvolatiletable;
        break;
      }

      // optional bool bVvolatiletable = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_bVvolatiletable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvvolatiletable_)));
          set_has_bvvolatiletable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bVlocalindex;
        break;
      }

      // optional bool bVlocalindex = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_bVlocalindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvlocalindex_)));
          set_has_bvlocalindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_iVreplicationfactor;
        break;
      }

      // optional int32 iVreplicationfactor = 13 [default = -1];
      case 13: {
        if (tag == 104) {
         parse_iVreplicationfactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivreplicationfactor_)));
          set_has_ivreplicationfactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bVfastkey;
        break;
      }

      // optional bool bVfastkey = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_bVfastkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvfastkey_)));
          set_has_bvfastkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLstr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLstr)
  return false;
#undef DO_
}

void PrtoLstr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLstr)
  // optional int32 iVmemtabledim = 1;
  if (has_ivmemtabledim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ivmemtabledim(), output);
  }

  // optional int32 iVmemtablesize = 2;
  if (has_ivmemtablesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ivmemtablesize(), output);
  }

  // optional bool bVmemorytable = 3 [default = false];
  if (has_bvmemorytable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bvmemorytable(), output);
  }

  // optional bytes sVshardingfrom = 4;
  if (has_svshardingfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->svshardingfrom(), output);
  }

  // optional bytes sVshardingto = 5;
  if (has_svshardingto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->svshardingto(), output);
  }

  // optional bytes sVshardingindexfrom = 6;
  if (has_svshardingindexfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->svshardingindexfrom(), output);
  }

  // optional bytes sVshardingindexto = 7;
  if (has_svshardingindexto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->svshardingindexto(), output);
  }

  // optional int32 iVmemtablechunk = 8;
  if (has_ivmemtablechunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ivmemtablechunk(), output);
  }

  // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 9;
  if (has_ivpartitiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->ivpartitiontype(), output);
  }

  // optional bool bVrepair = 10 [default = false];
  if (has_bvrepair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bvrepair(), output);
  }

  // optional bool bVvolatiletable = 11 [default = false];
  if (has_bvvolatiletable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->bvvolatiletable(), output);
  }

  // optional bool bVlocalindex = 12 [default = false];
  if (has_bvlocalindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bvlocalindex(), output);
  }

  // optional int32 iVreplicationfactor = 13 [default = -1];
  if (has_ivreplicationfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ivreplicationfactor(), output);
  }

  // optional bool bVfastkey = 14 [default = false];
  if (has_bvfastkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->bvfastkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLstr)
}

::google::protobuf::uint8* PrtoLstr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLstr)
  // optional int32 iVmemtabledim = 1;
  if (has_ivmemtabledim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ivmemtabledim(), target);
  }

  // optional int32 iVmemtablesize = 2;
  if (has_ivmemtablesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ivmemtablesize(), target);
  }

  // optional bool bVmemorytable = 3 [default = false];
  if (has_bvmemorytable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bvmemorytable(), target);
  }

  // optional bytes sVshardingfrom = 4;
  if (has_svshardingfrom()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->svshardingfrom(), target);
  }

  // optional bytes sVshardingto = 5;
  if (has_svshardingto()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->svshardingto(), target);
  }

  // optional bytes sVshardingindexfrom = 6;
  if (has_svshardingindexfrom()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->svshardingindexfrom(), target);
  }

  // optional bytes sVshardingindexto = 7;
  if (has_svshardingindexto()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->svshardingindexto(), target);
  }

  // optional int32 iVmemtablechunk = 8;
  if (has_ivmemtablechunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ivmemtablechunk(), target);
  }

  // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 9;
  if (has_ivpartitiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->ivpartitiontype(), target);
  }

  // optional bool bVrepair = 10 [default = false];
  if (has_bvrepair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bvrepair(), target);
  }

  // optional bool bVvolatiletable = 11 [default = false];
  if (has_bvvolatiletable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->bvvolatiletable(), target);
  }

  // optional bool bVlocalindex = 12 [default = false];
  if (has_bvlocalindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->bvlocalindex(), target);
  }

  // optional int32 iVreplicationfactor = 13 [default = -1];
  if (has_ivreplicationfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ivreplicationfactor(), target);
  }

  // optional bool bVfastkey = 14 [default = false];
  if (has_bvfastkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->bvfastkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLstr)
  return target;
}

int PrtoLstr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iVmemtabledim = 1;
    if (has_ivmemtabledim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivmemtabledim());
    }

    // optional int32 iVmemtablesize = 2;
    if (has_ivmemtablesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivmemtablesize());
    }

    // optional int32 iVmemtablechunk = 8;
    if (has_ivmemtablechunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivmemtablechunk());
    }

    // optional bool bVmemorytable = 3 [default = false];
    if (has_bvmemorytable()) {
      total_size += 1 + 1;
    }

    // optional bool bVvolatiletable = 11 [default = false];
    if (has_bvvolatiletable()) {
      total_size += 1 + 1;
    }

    // optional bool bVlocalindex = 12 [default = false];
    if (has_bvlocalindex()) {
      total_size += 1 + 1;
    }

    // optional bool bVfastkey = 14 [default = false];
    if (has_bvfastkey()) {
      total_size += 1 + 1;
    }

    // optional bytes sVshardingfrom = 4;
    if (has_svshardingfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svshardingfrom());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes sVshardingto = 5;
    if (has_svshardingto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svshardingto());
    }

    // optional bytes sVshardingindexfrom = 6;
    if (has_svshardingindexfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svshardingindexfrom());
    }

    // optional bytes sVshardingindexto = 7;
    if (has_svshardingindexto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svshardingindexto());
    }

    // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 9;
    if (has_ivpartitiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivpartitiontype());
    }

    // optional bool bVrepair = 10 [default = false];
    if (has_bvrepair()) {
      total_size += 1 + 1;
    }

    // optional int32 iVreplicationfactor = 13 [default = -1];
    if (has_ivreplicationfactor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivreplicationfactor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLstr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLstr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLstr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLstr::MergeFrom(const PrtoLstr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivmemtabledim()) {
      set_ivmemtabledim(from.ivmemtabledim());
    }
    if (from.has_ivmemtablesize()) {
      set_ivmemtablesize(from.ivmemtablesize());
    }
    if (from.has_ivmemtablechunk()) {
      set_ivmemtablechunk(from.ivmemtablechunk());
    }
    if (from.has_bvmemorytable()) {
      set_bvmemorytable(from.bvmemorytable());
    }
    if (from.has_bvvolatiletable()) {
      set_bvvolatiletable(from.bvvolatiletable());
    }
    if (from.has_bvlocalindex()) {
      set_bvlocalindex(from.bvlocalindex());
    }
    if (from.has_bvfastkey()) {
      set_bvfastkey(from.bvfastkey());
    }
    if (from.has_svshardingfrom()) {
      set_svshardingfrom(from.svshardingfrom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_svshardingto()) {
      set_svshardingto(from.svshardingto());
    }
    if (from.has_svshardingindexfrom()) {
      set_svshardingindexfrom(from.svshardingindexfrom());
    }
    if (from.has_svshardingindexto()) {
      set_svshardingindexto(from.svshardingindexto());
    }
    if (from.has_ivpartitiontype()) {
      set_ivpartitiontype(from.ivpartitiontype());
    }
    if (from.has_bvrepair()) {
      set_bvrepair(from.bvrepair());
    }
    if (from.has_ivreplicationfactor()) {
      set_ivreplicationfactor(from.ivreplicationfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLstr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLstr::CopyFrom(const PrtoLstr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLstr::IsInitialized() const {

  return true;
}

void PrtoLstr::Swap(PrtoLstr* other) {
  if (other != this) {
    std::swap(ivmemtabledim_, other->ivmemtabledim_);
    std::swap(ivmemtablesize_, other->ivmemtablesize_);
    std::swap(ivmemtablechunk_, other->ivmemtablechunk_);
    std::swap(bvmemorytable_, other->bvmemorytable_);
    std::swap(bvvolatiletable_, other->bvvolatiletable_);
    std::swap(bvlocalindex_, other->bvlocalindex_);
    std::swap(bvfastkey_, other->bvfastkey_);
    std::swap(svshardingfrom_, other->svshardingfrom_);
    std::swap(svshardingto_, other->svshardingto_);
    std::swap(svshardingindexfrom_, other->svshardingindexfrom_);
    std::swap(svshardingindexto_, other->svshardingindexto_);
    std::swap(ivpartitiontype_, other->ivpartitiontype_);
    std::swap(bvrepair_, other->bvrepair_);
    std::swap(ivreplicationfactor_, other->ivreplicationfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLstr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLstr_descriptor_;
  metadata.reflection = PrtoLstr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLmtb::kSVnamespaceFieldNumber;
const int PrtoLmtb::kSVtableFieldNumber;
const int PrtoLmtb::kCVstorageFieldNumber;
#endif  // !_MSC_VER

PrtoLmtb::PrtoLmtb()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLmtb)
}

void PrtoLmtb::InitAsDefaultInstance() {
  cvstorage_ = const_cast< ::com::tomting::orion::PrtoLstr*>(&::com::tomting::orion::PrtoLstr::default_instance());
}

PrtoLmtb::PrtoLmtb(const PrtoLmtb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLmtb)
}

void PrtoLmtb::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svnamespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svtable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvstorage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLmtb::~PrtoLmtb() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLmtb)
  SharedDtor();
}

void PrtoLmtb::SharedDtor() {
  if (svnamespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnamespace_;
  }
  if (svtable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svtable_;
  }
  if (this != default_instance_) {
    delete cvstorage_;
  }
}

void PrtoLmtb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLmtb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLmtb_descriptor_;
}

const PrtoLmtb& PrtoLmtb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLmtb* PrtoLmtb::default_instance_ = NULL;

PrtoLmtb* PrtoLmtb::New() const {
  return new PrtoLmtb;
}

void PrtoLmtb::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_svnamespace()) {
      if (svnamespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnamespace_->clear();
      }
    }
    if (has_svtable()) {
      if (svtable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svtable_->clear();
      }
    }
    if (has_cvstorage()) {
      if (cvstorage_ != NULL) cvstorage_->::com::tomting::orion::PrtoLstr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLmtb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLmtb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVnamespace = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnamespace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVtable;
        break;
      }

      // optional bytes sVtable = 2;
      case 2: {
        if (tag == 18) {
         parse_sVtable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svtable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVstorage;
        break;
      }

      // optional .com.tomting.orion.PrtoLstr cVstorage = 3;
      case 3: {
        if (tag == 26) {
         parse_cVstorage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvstorage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLmtb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLmtb)
  return false;
#undef DO_
}

void PrtoLmtb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLmtb)
  // required bytes sVnamespace = 1;
  if (has_svnamespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svnamespace(), output);
  }

  // optional bytes sVtable = 2;
  if (has_svtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svtable(), output);
  }

  // optional .com.tomting.orion.PrtoLstr cVstorage = 3;
  if (has_cvstorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvstorage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLmtb)
}

::google::protobuf::uint8* PrtoLmtb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLmtb)
  // required bytes sVnamespace = 1;
  if (has_svnamespace()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svnamespace(), target);
  }

  // optional bytes sVtable = 2;
  if (has_svtable()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svtable(), target);
  }

  // optional .com.tomting.orion.PrtoLstr cVstorage = 3;
  if (has_cvstorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvstorage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLmtb)
  return target;
}

int PrtoLmtb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVnamespace = 1;
    if (has_svnamespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnamespace());
    }

    // optional bytes sVtable = 2;
    if (has_svtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svtable());
    }

    // optional .com.tomting.orion.PrtoLstr cVstorage = 3;
    if (has_cvstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvstorage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLmtb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLmtb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLmtb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLmtb::MergeFrom(const PrtoLmtb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svnamespace()) {
      set_svnamespace(from.svnamespace());
    }
    if (from.has_svtable()) {
      set_svtable(from.svtable());
    }
    if (from.has_cvstorage()) {
      mutable_cvstorage()->::com::tomting::orion::PrtoLstr::MergeFrom(from.cvstorage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLmtb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLmtb::CopyFrom(const PrtoLmtb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLmtb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrtoLmtb::Swap(PrtoLmtb* other) {
  if (other != this) {
    std::swap(svnamespace_, other->svnamespace_);
    std::swap(svtable_, other->svtable_);
    std::swap(cvstorage_, other->cvstorage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLmtb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLmtb_descriptor_;
  metadata.reflection = PrtoLmtb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLkey::kSVmainFieldNumber;
const int PrtoLkey::kSVaccessgroupFieldNumber;
const int PrtoLkey::kSVqualifierFieldNumber;
const int PrtoLkey::kIVstateFieldNumber;
const int PrtoLkey::kIVtimestampFieldNumber;
#endif  // !_MSC_VER

PrtoLkey::PrtoLkey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLkey)
}

void PrtoLkey::InitAsDefaultInstance() {
}

PrtoLkey::PrtoLkey(const PrtoLkey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLkey)
}

void PrtoLkey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svmain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svaccessgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivstate_ = 0;
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLkey::~PrtoLkey() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLkey)
  SharedDtor();
}

void PrtoLkey::SharedDtor() {
  if (svmain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svmain_;
  }
  if (svaccessgroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svaccessgroup_;
  }
  if (svqualifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svqualifier_;
  }
  if (this != default_instance_) {
  }
}

void PrtoLkey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLkey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLkey_descriptor_;
}

const PrtoLkey& PrtoLkey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLkey* PrtoLkey::default_instance_ = NULL;

PrtoLkey* PrtoLkey::New() const {
  return new PrtoLkey;
}

void PrtoLkey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoLkey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ivtimestamp_, ivstate_);
    if (has_svmain()) {
      if (svmain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svmain_->clear();
      }
    }
    if (has_svaccessgroup()) {
      if (svaccessgroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svaccessgroup_->clear();
      }
    }
    if (has_svqualifier()) {
      if (svqualifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svqualifier_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLkey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLkey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVmain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svmain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVaccessgroup;
        break;
      }

      // optional bytes sVaccessgroup = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_sVaccessgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svaccessgroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sVqualifier;
        break;
      }

      // optional bytes sVqualifier = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_sVqualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svqualifier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVstate;
        break;
      }

      // optional .com.tomting.orion.iCstatetype iVstate = 4 [default = UPSERT];
      case 4: {
        if (tag == 32) {
         parse_iVstate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCstatetype_IsValid(value)) {
            set_ivstate(static_cast< ::com::tomting::orion::iCstatetype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVtimestamp;
        break;
      }

      // optional int64 iVtimestamp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_iVtimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivtimestamp_)));
          set_has_ivtimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLkey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLkey)
  return false;
#undef DO_
}

void PrtoLkey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLkey)
  // required bytes sVmain = 1;
  if (has_svmain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svmain(), output);
  }

  // optional bytes sVaccessgroup = 2 [default = ""];
  if (has_svaccessgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svaccessgroup(), output);
  }

  // optional bytes sVqualifier = 3 [default = ""];
  if (has_svqualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->svqualifier(), output);
  }

  // optional .com.tomting.orion.iCstatetype iVstate = 4 [default = UPSERT];
  if (has_ivstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ivstate(), output);
  }

  // optional int64 iVtimestamp = 5 [default = 0];
  if (has_ivtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ivtimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLkey)
}

::google::protobuf::uint8* PrtoLkey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLkey)
  // required bytes sVmain = 1;
  if (has_svmain()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svmain(), target);
  }

  // optional bytes sVaccessgroup = 2 [default = ""];
  if (has_svaccessgroup()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svaccessgroup(), target);
  }

  // optional bytes sVqualifier = 3 [default = ""];
  if (has_svqualifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->svqualifier(), target);
  }

  // optional .com.tomting.orion.iCstatetype iVstate = 4 [default = UPSERT];
  if (has_ivstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ivstate(), target);
  }

  // optional int64 iVtimestamp = 5 [default = 0];
  if (has_ivtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ivtimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLkey)
  return target;
}

int PrtoLkey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVmain = 1;
    if (has_svmain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svmain());
    }

    // optional bytes sVaccessgroup = 2 [default = ""];
    if (has_svaccessgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svaccessgroup());
    }

    // optional bytes sVqualifier = 3 [default = ""];
    if (has_svqualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svqualifier());
    }

    // optional .com.tomting.orion.iCstatetype iVstate = 4 [default = UPSERT];
    if (has_ivstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivstate());
    }

    // optional int64 iVtimestamp = 5 [default = 0];
    if (has_ivtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivtimestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLkey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLkey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLkey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLkey::MergeFrom(const PrtoLkey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svmain()) {
      set_svmain(from.svmain());
    }
    if (from.has_svaccessgroup()) {
      set_svaccessgroup(from.svaccessgroup());
    }
    if (from.has_svqualifier()) {
      set_svqualifier(from.svqualifier());
    }
    if (from.has_ivstate()) {
      set_ivstate(from.ivstate());
    }
    if (from.has_ivtimestamp()) {
      set_ivtimestamp(from.ivtimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLkey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLkey::CopyFrom(const PrtoLkey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLkey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrtoLkey::Swap(PrtoLkey* other) {
  if (other != this) {
    std::swap(svmain_, other->svmain_);
    std::swap(svaccessgroup_, other->svaccessgroup_);
    std::swap(svqualifier_, other->svqualifier_);
    std::swap(ivstate_, other->ivstate_);
    std::swap(ivtimestamp_, other->ivtimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLkey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLkey_descriptor_;
  metadata.reflection = PrtoLkey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLval::kSVopaquevalueFieldNumber;
const int PrtoLval::kIVtimestampFieldNumber;
#endif  // !_MSC_VER

PrtoLval::PrtoLval()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLval)
}

void PrtoLval::InitAsDefaultInstance() {
}

PrtoLval::PrtoLval(const PrtoLval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLval)
}

void PrtoLval::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svopaquevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLval::~PrtoLval() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLval)
  SharedDtor();
}

void PrtoLval::SharedDtor() {
  if (svopaquevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svopaquevalue_;
  }
  if (this != default_instance_) {
  }
}

void PrtoLval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLval_descriptor_;
}

const PrtoLval& PrtoLval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLval* PrtoLval::default_instance_ = NULL;

PrtoLval* PrtoLval::New() const {
  return new PrtoLval;
}

void PrtoLval::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_svopaquevalue()) {
      if (svopaquevalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svopaquevalue_->clear();
      }
    }
    ivtimestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVopaquevalue = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svopaquevalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVtimestamp;
        break;
      }

      // required int64 iVtimestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_iVtimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivtimestamp_)));
          set_has_ivtimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLval)
  return false;
#undef DO_
}

void PrtoLval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLval)
  // required bytes sVopaquevalue = 1;
  if (has_svopaquevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svopaquevalue(), output);
  }

  // required int64 iVtimestamp = 2;
  if (has_ivtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ivtimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLval)
}

::google::protobuf::uint8* PrtoLval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLval)
  // required bytes sVopaquevalue = 1;
  if (has_svopaquevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svopaquevalue(), target);
  }

  // required int64 iVtimestamp = 2;
  if (has_ivtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ivtimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLval)
  return target;
}

int PrtoLval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVopaquevalue = 1;
    if (has_svopaquevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svopaquevalue());
    }

    // required int64 iVtimestamp = 2;
    if (has_ivtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivtimestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLval::MergeFrom(const PrtoLval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svopaquevalue()) {
      set_svopaquevalue(from.svopaquevalue());
    }
    if (from.has_ivtimestamp()) {
      set_ivtimestamp(from.ivtimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLval::CopyFrom(const PrtoLval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrtoLval::Swap(PrtoLval* other) {
  if (other != this) {
    std::swap(svopaquevalue_, other->svopaquevalue_);
    std::swap(ivtimestamp_, other->ivtimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLval_descriptor_;
  metadata.reflection = PrtoLval_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLstm::kIVopcodeFieldNumber;
const int PrtoLstm::kCVmutableFieldNumber;
const int PrtoLstm::kCVkeyFieldNumber;
const int PrtoLstm::kCVvalueFieldNumber;
#endif  // !_MSC_VER

PrtoLstm::PrtoLstm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLstm)
}

void PrtoLstm::InitAsDefaultInstance() {
  cvmutable_ = const_cast< ::com::tomting::orion::PrtoLmtb*>(&::com::tomting::orion::PrtoLmtb::default_instance());
  cvkey_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
  cvvalue_ = const_cast< ::com::tomting::orion::PrtoLval*>(&::com::tomting::orion::PrtoLval::default_instance());
}

PrtoLstm::PrtoLstm(const PrtoLstm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLstm)
}

void PrtoLstm::SharedCtor() {
  _cached_size_ = 0;
  ivopcode_ = 0;
  cvmutable_ = NULL;
  cvkey_ = NULL;
  cvvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLstm::~PrtoLstm() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLstm)
  SharedDtor();
}

void PrtoLstm::SharedDtor() {
  if (this != default_instance_) {
    delete cvmutable_;
    delete cvkey_;
    delete cvvalue_;
  }
}

void PrtoLstm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLstm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLstm_descriptor_;
}

const PrtoLstm& PrtoLstm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLstm* PrtoLstm::default_instance_ = NULL;

PrtoLstm* PrtoLstm::New() const {
  return new PrtoLstm;
}

void PrtoLstm::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    ivopcode_ = 0;
    if (has_cvmutable()) {
      if (cvmutable_ != NULL) cvmutable_->::com::tomting::orion::PrtoLmtb::Clear();
    }
    if (has_cvkey()) {
      if (cvkey_ != NULL) cvkey_->::com::tomting::orion::PrtoLkey::Clear();
    }
    if (has_cvvalue()) {
      if (cvvalue_ != NULL) cvvalue_->::com::tomting::orion::PrtoLval::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLstm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLstm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.iCopcodetype iVopcode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCopcodetype_IsValid(value)) {
            set_ivopcode(static_cast< ::com::tomting::orion::iCopcodetype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVmutable;
        break;
      }

      // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
      case 2: {
        if (tag == 18) {
         parse_cVmutable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmutable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVkey;
        break;
      }

      // optional .com.tomting.orion.PrtoLkey cVkey = 4;
      case 4: {
        if (tag == 34) {
         parse_cVkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cVvalue;
        break;
      }

      // optional .com.tomting.orion.PrtoLval cVvalue = 5;
      case 5: {
        if (tag == 42) {
         parse_cVvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLstm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLstm)
  return false;
#undef DO_
}

void PrtoLstm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLstm)
  // required .com.tomting.orion.iCopcodetype iVopcode = 1;
  if (has_ivopcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivopcode(), output);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvmutable(), output);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey = 4;
  if (has_cvkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvkey(), output);
  }

  // optional .com.tomting.orion.PrtoLval cVvalue = 5;
  if (has_cvvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cvvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLstm)
}

::google::protobuf::uint8* PrtoLstm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLstm)
  // required .com.tomting.orion.iCopcodetype iVopcode = 1;
  if (has_ivopcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivopcode(), target);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvmutable(), target);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey = 4;
  if (has_cvkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvkey(), target);
  }

  // optional .com.tomting.orion.PrtoLval cVvalue = 5;
  if (has_cvvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cvvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLstm)
  return target;
}

int PrtoLstm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.iCopcodetype iVopcode = 1;
    if (has_ivopcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivopcode());
    }

    // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
    if (has_cvmutable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmutable());
    }

    // optional .com.tomting.orion.PrtoLkey cVkey = 4;
    if (has_cvkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey());
    }

    // optional .com.tomting.orion.PrtoLval cVvalue = 5;
    if (has_cvvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLstm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLstm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLstm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLstm::MergeFrom(const PrtoLstm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivopcode()) {
      set_ivopcode(from.ivopcode());
    }
    if (from.has_cvmutable()) {
      mutable_cvmutable()->::com::tomting::orion::PrtoLmtb::MergeFrom(from.cvmutable());
    }
    if (from.has_cvkey()) {
      mutable_cvkey()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey());
    }
    if (from.has_cvvalue()) {
      mutable_cvvalue()->::com::tomting::orion::PrtoLval::MergeFrom(from.cvvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLstm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLstm::CopyFrom(const PrtoLstm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLstm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cvmutable()) {
    if (!this->cvmutable().IsInitialized()) return false;
  }
  if (has_cvkey()) {
    if (!this->cvkey().IsInitialized()) return false;
  }
  if (has_cvvalue()) {
    if (!this->cvvalue().IsInitialized()) return false;
  }
  return true;
}

void PrtoLstm::Swap(PrtoLstm* other) {
  if (other != this) {
    std::swap(ivopcode_, other->ivopcode_);
    std::swap(cvmutable_, other->cvmutable_);
    std::swap(cvkey_, other->cvkey_);
    std::swap(cvvalue_, other->cvvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLstm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLstm_descriptor_;
  metadata.reflection = PrtoLstm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLsts::kCVliststatementFieldNumber;
#endif  // !_MSC_VER

PrtoLsts::PrtoLsts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLsts)
}

void PrtoLsts::InitAsDefaultInstance() {
}

PrtoLsts::PrtoLsts(const PrtoLsts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLsts)
}

void PrtoLsts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLsts::~PrtoLsts() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLsts)
  SharedDtor();
}

void PrtoLsts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoLsts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLsts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLsts_descriptor_;
}

const PrtoLsts& PrtoLsts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLsts* PrtoLsts::default_instance_ = NULL;

PrtoLsts* PrtoLsts::New() const {
  return new PrtoLsts;
}

void PrtoLsts::Clear() {
  cvliststatement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLsts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLsts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoLstm cVliststatement = 1;
      case 1: {
        if (tag == 10) {
         parse_cVliststatement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvliststatement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVliststatement;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLsts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLsts)
  return false;
#undef DO_
}

void PrtoLsts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLsts)
  // repeated .com.tomting.orion.PrtoLstm cVliststatement = 1;
  for (int i = 0; i < this->cvliststatement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvliststatement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLsts)
}

::google::protobuf::uint8* PrtoLsts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLsts)
  // repeated .com.tomting.orion.PrtoLstm cVliststatement = 1;
  for (int i = 0; i < this->cvliststatement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvliststatement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLsts)
  return target;
}

int PrtoLsts::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoLstm cVliststatement = 1;
  total_size += 1 * this->cvliststatement_size();
  for (int i = 0; i < this->cvliststatement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvliststatement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLsts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLsts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLsts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLsts::MergeFrom(const PrtoLsts& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvliststatement_.MergeFrom(from.cvliststatement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLsts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLsts::CopyFrom(const PrtoLsts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLsts::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvliststatement())) return false;
  return true;
}

void PrtoLsts::Swap(PrtoLsts* other) {
  if (other != this) {
    cvliststatement_.Swap(&other->cvliststatement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLsts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLsts_descriptor_;
  metadata.reflection = PrtoLsts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLqry::kIVqueryFieldNumber;
const int PrtoLqry::kCVmutableFieldNumber;
const int PrtoLqry::kCVkeyFieldNumber;
const int PrtoLqry::kBVdigestFieldNumber;
#endif  // !_MSC_VER

PrtoLqry::PrtoLqry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLqry)
}

void PrtoLqry::InitAsDefaultInstance() {
  cvmutable_ = const_cast< ::com::tomting::orion::PrtoLmtb*>(&::com::tomting::orion::PrtoLmtb::default_instance());
  cvkey_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
}

PrtoLqry::PrtoLqry(const PrtoLqry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLqry)
}

void PrtoLqry::SharedCtor() {
  _cached_size_ = 0;
  ivquery_ = 0;
  cvmutable_ = NULL;
  cvkey_ = NULL;
  bvdigest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLqry::~PrtoLqry() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLqry)
  SharedDtor();
}

void PrtoLqry::SharedDtor() {
  if (this != default_instance_) {
    delete cvmutable_;
    delete cvkey_;
  }
}

void PrtoLqry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLqry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLqry_descriptor_;
}

const PrtoLqry& PrtoLqry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLqry* PrtoLqry::default_instance_ = NULL;

PrtoLqry* PrtoLqry::New() const {
  return new PrtoLqry;
}

void PrtoLqry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoLqry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ivquery_, bvdigest_);
    if (has_cvmutable()) {
      if (cvmutable_ != NULL) cvmutable_->::com::tomting::orion::PrtoLmtb::Clear();
    }
    if (has_cvkey()) {
      if (cvkey_ != NULL) cvkey_->::com::tomting::orion::PrtoLkey::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLqry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLqry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.iCquerytype iVquery = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCquerytype_IsValid(value)) {
            set_ivquery(static_cast< ::com::tomting::orion::iCquerytype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVmutable;
        break;
      }

      // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
      case 2: {
        if (tag == 18) {
         parse_cVmutable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmutable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVkey;
        break;
      }

      // required .com.tomting.orion.PrtoLkey cVkey = 4;
      case 4: {
        if (tag == 34) {
         parse_cVkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bVdigest;
        break;
      }

      // required bool bVdigest = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_bVdigest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvdigest_)));
          set_has_bvdigest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLqry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLqry)
  return false;
#undef DO_
}

void PrtoLqry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLqry)
  // required .com.tomting.orion.iCquerytype iVquery = 1;
  if (has_ivquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivquery(), output);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvmutable(), output);
  }

  // required .com.tomting.orion.PrtoLkey cVkey = 4;
  if (has_cvkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvkey(), output);
  }

  // required bool bVdigest = 5 [default = false];
  if (has_bvdigest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bvdigest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLqry)
}

::google::protobuf::uint8* PrtoLqry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLqry)
  // required .com.tomting.orion.iCquerytype iVquery = 1;
  if (has_ivquery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivquery(), target);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvmutable(), target);
  }

  // required .com.tomting.orion.PrtoLkey cVkey = 4;
  if (has_cvkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvkey(), target);
  }

  // required bool bVdigest = 5 [default = false];
  if (has_bvdigest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bvdigest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLqry)
  return target;
}

int PrtoLqry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.iCquerytype iVquery = 1;
    if (has_ivquery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivquery());
    }

    // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
    if (has_cvmutable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmutable());
    }

    // required .com.tomting.orion.PrtoLkey cVkey = 4;
    if (has_cvkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey());
    }

    // required bool bVdigest = 5 [default = false];
    if (has_bvdigest()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLqry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLqry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLqry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLqry::MergeFrom(const PrtoLqry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivquery()) {
      set_ivquery(from.ivquery());
    }
    if (from.has_cvmutable()) {
      mutable_cvmutable()->::com::tomting::orion::PrtoLmtb::MergeFrom(from.cvmutable());
    }
    if (from.has_cvkey()) {
      mutable_cvkey()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey());
    }
    if (from.has_bvdigest()) {
      set_bvdigest(from.bvdigest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLqry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLqry::CopyFrom(const PrtoLqry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLqry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_cvmutable()) {
    if (!this->cvmutable().IsInitialized()) return false;
  }
  if (has_cvkey()) {
    if (!this->cvkey().IsInitialized()) return false;
  }
  return true;
}

void PrtoLqry::Swap(PrtoLqry* other) {
  if (other != this) {
    std::swap(ivquery_, other->ivquery_);
    std::swap(cvmutable_, other->cvmutable_);
    std::swap(cvkey_, other->cvkey_);
    std::swap(bvdigest_, other->bvdigest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLqry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLqry_descriptor_;
  metadata.reflection = PrtoLqry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoLlog::kSVtimestampFieldNumber;
const int PrtoLlog::kCVstatementFieldNumber;
#endif  // !_MSC_VER

PrtoLlog::PrtoLlog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoLlog)
}

void PrtoLlog::InitAsDefaultInstance() {
  cvstatement_ = const_cast< ::com::tomting::orion::PrtoLstm*>(&::com::tomting::orion::PrtoLstm::default_instance());
}

PrtoLlog::PrtoLlog(const PrtoLlog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoLlog)
}

void PrtoLlog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svtimestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvstatement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoLlog::~PrtoLlog() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoLlog)
  SharedDtor();
}

void PrtoLlog::SharedDtor() {
  if (svtimestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svtimestamp_;
  }
  if (this != default_instance_) {
    delete cvstatement_;
  }
}

void PrtoLlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoLlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoLlog_descriptor_;
}

const PrtoLlog& PrtoLlog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoLlog* PrtoLlog::default_instance_ = NULL;

PrtoLlog* PrtoLlog::New() const {
  return new PrtoLlog;
}

void PrtoLlog::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_svtimestamp()) {
      if (svtimestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svtimestamp_->clear();
      }
    }
    if (has_cvstatement()) {
      if (cvstatement_ != NULL) cvstatement_->::com::tomting::orion::PrtoLstm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoLlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoLlog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVtimestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVstatement;
        break;
      }

      // required .com.tomting.orion.PrtoLstm cVstatement = 2;
      case 2: {
        if (tag == 18) {
         parse_cVstatement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvstatement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoLlog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoLlog)
  return false;
#undef DO_
}

void PrtoLlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoLlog)
  // required bytes sVtimestamp = 1;
  if (has_svtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svtimestamp(), output);
  }

  // required .com.tomting.orion.PrtoLstm cVstatement = 2;
  if (has_cvstatement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvstatement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoLlog)
}

::google::protobuf::uint8* PrtoLlog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoLlog)
  // required bytes sVtimestamp = 1;
  if (has_svtimestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svtimestamp(), target);
  }

  // required .com.tomting.orion.PrtoLstm cVstatement = 2;
  if (has_cvstatement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvstatement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoLlog)
  return target;
}

int PrtoLlog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVtimestamp = 1;
    if (has_svtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svtimestamp());
    }

    // required .com.tomting.orion.PrtoLstm cVstatement = 2;
    if (has_cvstatement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvstatement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoLlog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoLlog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoLlog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoLlog::MergeFrom(const PrtoLlog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svtimestamp()) {
      set_svtimestamp(from.svtimestamp());
    }
    if (from.has_cvstatement()) {
      mutable_cvstatement()->::com::tomting::orion::PrtoLstm::MergeFrom(from.cvstatement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoLlog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoLlog::CopyFrom(const PrtoLlog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoLlog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cvstatement()) {
    if (!this->cvstatement().IsInitialized()) return false;
  }
  return true;
}

void PrtoLlog::Swap(PrtoLlog* other) {
  if (other != this) {
    std::swap(svtimestamp_, other->svtimestamp_);
    std::swap(cvstatement_, other->cvstatement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoLlog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoLlog_descriptor_;
  metadata.reflection = PrtoLlog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2cv::kIVtypeFieldNumber;
const int PrtoL2cv::kSVvalueFieldNumber;
const int PrtoL2cv::kSVlistvalueFieldNumber;
const int PrtoL2cv::kIVvalueFieldNumber;
const int PrtoL2cv::kIVlistvalueFieldNumber;
const int PrtoL2cv::kDVvalueFieldNumber;
const int PrtoL2cv::kDVlistvalueFieldNumber;
const int PrtoL2cv::kBVvalueFieldNumber;
#endif  // !_MSC_VER

PrtoL2cv::PrtoL2cv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2cv)
}

void PrtoL2cv::InitAsDefaultInstance() {
}

PrtoL2cv::PrtoL2cv(const PrtoL2cv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2cv)
}

void PrtoL2cv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ivtype_ = 1;
  svvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivvalue_ = 0;
  dvvalue_ = 0;
  bvvalue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2cv::~PrtoL2cv() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2cv)
  SharedDtor();
}

void PrtoL2cv::SharedDtor() {
  if (svvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svvalue_;
  }
  if (this != default_instance_) {
  }
}

void PrtoL2cv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2cv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2cv_descriptor_;
}

const PrtoL2cv& PrtoL2cv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2cv* PrtoL2cv::default_instance_ = NULL;

PrtoL2cv* PrtoL2cv::New() const {
  return new PrtoL2cv;
}

void PrtoL2cv::Clear() {
  if (_has_bits_[0 / 32] & 171) {
    ivtype_ = 1;
    if (has_svvalue()) {
      if (svvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svvalue_->clear();
      }
    }
    ivvalue_ = 0;
    dvvalue_ = 0;
    bvvalue_ = false;
  }
  svlistvalue_.Clear();
  ivlistvalue_.Clear();
  dvlistvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2cv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2cv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.tomting.orion.iCcolumntype iVtype = 1 [default = STRINGTYPE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCcolumntype_IsValid(value)) {
            set_ivtype(static_cast< ::com::tomting::orion::iCcolumntype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVvalue;
        break;
      }

      // optional bytes sVvalue = 2;
      case 2: {
        if (tag == 18) {
         parse_sVvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sVlistvalue;
        break;
      }

      // repeated bytes sVlistvalue = 3;
      case 3: {
        if (tag == 26) {
         parse_sVlistvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_svlistvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sVlistvalue;
        if (input->ExpectTag(32)) goto parse_iVvalue;
        break;
      }

      // optional int32 iVvalue = 4;
      case 4: {
        if (tag == 32) {
         parse_iVvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivvalue_)));
          set_has_ivvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVlistvalue;
        break;
      }

      // repeated int32 iVlistvalue = 5;
      case 5: {
        if (tag == 40) {
         parse_iVlistvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_ivlistvalue())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ivlistvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVlistvalue;
        if (input->ExpectTag(49)) goto parse_dVvalue;
        break;
      }

      // optional double dVvalue = 6;
      case 6: {
        if (tag == 49) {
         parse_dVvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dvvalue_)));
          set_has_dvvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dVlistvalue;
        break;
      }

      // repeated double dVlistvalue = 7;
      case 7: {
        if (tag == 57) {
         parse_dVlistvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_dvlistvalue())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dvlistvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dVlistvalue;
        if (input->ExpectTag(64)) goto parse_bVvalue;
        break;
      }

      // optional bool bVvalue = 8;
      case 8: {
        if (tag == 64) {
         parse_bVvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvvalue_)));
          set_has_bvvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2cv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2cv)
  return false;
#undef DO_
}

void PrtoL2cv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2cv)
  // optional .com.tomting.orion.iCcolumntype iVtype = 1 [default = STRINGTYPE];
  if (has_ivtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivtype(), output);
  }

  // optional bytes sVvalue = 2;
  if (has_svvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svvalue(), output);
  }

  // repeated bytes sVlistvalue = 3;
  for (int i = 0; i < this->svlistvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->svlistvalue(i), output);
  }

  // optional int32 iVvalue = 4;
  if (has_ivvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ivvalue(), output);
  }

  // repeated int32 iVlistvalue = 5;
  for (int i = 0; i < this->ivlistvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->ivlistvalue(i), output);
  }

  // optional double dVvalue = 6;
  if (has_dvvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dvvalue(), output);
  }

  // repeated double dVlistvalue = 7;
  for (int i = 0; i < this->dvlistvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->dvlistvalue(i), output);
  }

  // optional bool bVvalue = 8;
  if (has_bvvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bvvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2cv)
}

::google::protobuf::uint8* PrtoL2cv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2cv)
  // optional .com.tomting.orion.iCcolumntype iVtype = 1 [default = STRINGTYPE];
  if (has_ivtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivtype(), target);
  }

  // optional bytes sVvalue = 2;
  if (has_svvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svvalue(), target);
  }

  // repeated bytes sVlistvalue = 3;
  for (int i = 0; i < this->svlistvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->svlistvalue(i), target);
  }

  // optional int32 iVvalue = 4;
  if (has_ivvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ivvalue(), target);
  }

  // repeated int32 iVlistvalue = 5;
  for (int i = 0; i < this->ivlistvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->ivlistvalue(i), target);
  }

  // optional double dVvalue = 6;
  if (has_dvvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dvvalue(), target);
  }

  // repeated double dVlistvalue = 7;
  for (int i = 0; i < this->dvlistvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->dvlistvalue(i), target);
  }

  // optional bool bVvalue = 8;
  if (has_bvvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bvvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2cv)
  return target;
}

int PrtoL2cv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.tomting.orion.iCcolumntype iVtype = 1 [default = STRINGTYPE];
    if (has_ivtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivtype());
    }

    // optional bytes sVvalue = 2;
    if (has_svvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svvalue());
    }

    // optional int32 iVvalue = 4;
    if (has_ivvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivvalue());
    }

    // optional double dVvalue = 6;
    if (has_dvvalue()) {
      total_size += 1 + 8;
    }

    // optional bool bVvalue = 8;
    if (has_bvvalue()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes sVlistvalue = 3;
  total_size += 1 * this->svlistvalue_size();
  for (int i = 0; i < this->svlistvalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->svlistvalue(i));
  }

  // repeated int32 iVlistvalue = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ivlistvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ivlistvalue(i));
    }
    total_size += 1 * this->ivlistvalue_size() + data_size;
  }

  // repeated double dVlistvalue = 7;
  {
    int data_size = 0;
    data_size = 8 * this->dvlistvalue_size();
    total_size += 1 * this->dvlistvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2cv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2cv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2cv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2cv::MergeFrom(const PrtoL2cv& from) {
  GOOGLE_CHECK_NE(&from, this);
  svlistvalue_.MergeFrom(from.svlistvalue_);
  ivlistvalue_.MergeFrom(from.ivlistvalue_);
  dvlistvalue_.MergeFrom(from.dvlistvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivtype()) {
      set_ivtype(from.ivtype());
    }
    if (from.has_svvalue()) {
      set_svvalue(from.svvalue());
    }
    if (from.has_ivvalue()) {
      set_ivvalue(from.ivvalue());
    }
    if (from.has_dvvalue()) {
      set_dvvalue(from.dvvalue());
    }
    if (from.has_bvvalue()) {
      set_bvvalue(from.bvvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2cv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2cv::CopyFrom(const PrtoL2cv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2cv::IsInitialized() const {

  return true;
}

void PrtoL2cv::Swap(PrtoL2cv* other) {
  if (other != this) {
    std::swap(ivtype_, other->ivtype_);
    std::swap(svvalue_, other->svvalue_);
    svlistvalue_.Swap(&other->svlistvalue_);
    std::swap(ivvalue_, other->ivvalue_);
    ivlistvalue_.Swap(&other->ivlistvalue_);
    std::swap(dvvalue_, other->dvvalue_);
    dvlistvalue_.Swap(&other->dvlistvalue_);
    std::swap(bvvalue_, other->bvvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2cv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2cv_descriptor_;
  metadata.reflection = PrtoL2cv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2cl::kSVcolumnFieldNumber;
const int PrtoL2cl::kIVtypeFieldNumber;
const int PrtoL2cl::kCVvalueFieldNumber;
const int PrtoL2cl::kIVconditiontypeFieldNumber;
#endif  // !_MSC_VER

PrtoL2cl::PrtoL2cl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2cl)
}

void PrtoL2cl::InitAsDefaultInstance() {
  cvvalue_ = const_cast< ::com::tomting::orion::PrtoL2cv*>(&::com::tomting::orion::PrtoL2cv::default_instance());
}

PrtoL2cl::PrtoL2cl(const PrtoL2cl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2cl)
}

void PrtoL2cl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svcolumn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivtype_ = 1;
  cvvalue_ = NULL;
  ivconditiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2cl::~PrtoL2cl() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2cl)
  SharedDtor();
}

void PrtoL2cl::SharedDtor() {
  if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svcolumn_;
  }
  if (this != default_instance_) {
    delete cvvalue_;
  }
}

void PrtoL2cl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2cl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2cl_descriptor_;
}

const PrtoL2cl& PrtoL2cl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2cl* PrtoL2cl::default_instance_ = NULL;

PrtoL2cl* PrtoL2cl::New() const {
  return new PrtoL2cl;
}

void PrtoL2cl::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_svcolumn()) {
      if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svcolumn_->clear();
      }
    }
    ivtype_ = 1;
    if (has_cvvalue()) {
      if (cvvalue_ != NULL) cvvalue_->::com::tomting::orion::PrtoL2cv::Clear();
    }
    ivconditiontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2cl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2cl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVcolumn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVtype;
        break;
      }

      // optional .com.tomting.orion.iCcolumntype iVtype = 2 [default = STRINGTYPE];
      case 2: {
        if (tag == 16) {
         parse_iVtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCcolumntype_IsValid(value)) {
            set_ivtype(static_cast< ::com::tomting::orion::iCcolumntype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVvalue;
        break;
      }

      // optional .com.tomting.orion.PrtoL2cv cVvalue = 3;
      case 3: {
        if (tag == 26) {
         parse_cVvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVconditiontype;
        break;
      }

      // optional .com.tomting.orion.iCconditiontype iVconditiontype = 4;
      case 4: {
        if (tag == 32) {
         parse_iVconditiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCconditiontype_IsValid(value)) {
            set_ivconditiontype(static_cast< ::com::tomting::orion::iCconditiontype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2cl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2cl)
  return false;
#undef DO_
}

void PrtoL2cl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2cl)
  // required bytes sVcolumn = 1;
  if (has_svcolumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svcolumn(), output);
  }

  // optional .com.tomting.orion.iCcolumntype iVtype = 2 [default = STRINGTYPE];
  if (has_ivtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ivtype(), output);
  }

  // optional .com.tomting.orion.PrtoL2cv cVvalue = 3;
  if (has_cvvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvvalue(), output);
  }

  // optional .com.tomting.orion.iCconditiontype iVconditiontype = 4;
  if (has_ivconditiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ivconditiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2cl)
}

::google::protobuf::uint8* PrtoL2cl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2cl)
  // required bytes sVcolumn = 1;
  if (has_svcolumn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svcolumn(), target);
  }

  // optional .com.tomting.orion.iCcolumntype iVtype = 2 [default = STRINGTYPE];
  if (has_ivtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ivtype(), target);
  }

  // optional .com.tomting.orion.PrtoL2cv cVvalue = 3;
  if (has_cvvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvvalue(), target);
  }

  // optional .com.tomting.orion.iCconditiontype iVconditiontype = 4;
  if (has_ivconditiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ivconditiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2cl)
  return target;
}

int PrtoL2cl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVcolumn = 1;
    if (has_svcolumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svcolumn());
    }

    // optional .com.tomting.orion.iCcolumntype iVtype = 2 [default = STRINGTYPE];
    if (has_ivtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivtype());
    }

    // optional .com.tomting.orion.PrtoL2cv cVvalue = 3;
    if (has_cvvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvvalue());
    }

    // optional .com.tomting.orion.iCconditiontype iVconditiontype = 4;
    if (has_ivconditiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivconditiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2cl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2cl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2cl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2cl::MergeFrom(const PrtoL2cl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svcolumn()) {
      set_svcolumn(from.svcolumn());
    }
    if (from.has_ivtype()) {
      set_ivtype(from.ivtype());
    }
    if (from.has_cvvalue()) {
      mutable_cvvalue()->::com::tomting::orion::PrtoL2cv::MergeFrom(from.cvvalue());
    }
    if (from.has_ivconditiontype()) {
      set_ivconditiontype(from.ivconditiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2cl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2cl::CopyFrom(const PrtoL2cl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2cl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrtoL2cl::Swap(PrtoL2cl* other) {
  if (other != this) {
    std::swap(svcolumn_, other->svcolumn_);
    std::swap(ivtype_, other->ivtype_);
    std::swap(cvvalue_, other->cvvalue_);
    std::swap(ivconditiontype_, other->ivconditiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2cl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2cl_descriptor_;
  metadata.reflection = PrtoL2cl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2st::kIVopcodeFieldNumber;
const int PrtoL2st::kCVmutableFieldNumber;
const int PrtoL2st::kCVkeyFieldNumber;
const int PrtoL2st::kCVcolumnsFieldNumber;
const int PrtoL2st::kIVtimestampFieldNumber;
#endif  // !_MSC_VER

PrtoL2st::PrtoL2st()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2st)
}

void PrtoL2st::InitAsDefaultInstance() {
  cvmutable_ = const_cast< ::com::tomting::orion::PrtoLmtb*>(&::com::tomting::orion::PrtoLmtb::default_instance());
  cvkey_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
}

PrtoL2st::PrtoL2st(const PrtoL2st& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2st)
}

void PrtoL2st::SharedCtor() {
  _cached_size_ = 0;
  ivopcode_ = 0;
  cvmutable_ = NULL;
  cvkey_ = NULL;
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2st::~PrtoL2st() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2st)
  SharedDtor();
}

void PrtoL2st::SharedDtor() {
  if (this != default_instance_) {
    delete cvmutable_;
    delete cvkey_;
  }
}

void PrtoL2st::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2st::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2st_descriptor_;
}

const PrtoL2st& PrtoL2st::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2st* PrtoL2st::default_instance_ = NULL;

PrtoL2st* PrtoL2st::New() const {
  return new PrtoL2st;
}

void PrtoL2st::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoL2st*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(ivtimestamp_, ivopcode_);
    if (has_cvmutable()) {
      if (cvmutable_ != NULL) cvmutable_->::com::tomting::orion::PrtoLmtb::Clear();
    }
    if (has_cvkey()) {
      if (cvkey_ != NULL) cvkey_->::com::tomting::orion::PrtoLkey::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cvcolumns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2st::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2st)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.tomting.orion.iCopcodetype iVopcode = 1 [default = MUTATOR];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCopcodetype_IsValid(value)) {
            set_ivopcode(static_cast< ::com::tomting::orion::iCopcodetype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVmutable;
        break;
      }

      // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
      case 2: {
        if (tag == 18) {
         parse_cVmutable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmutable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVkey;
        break;
      }

      // required .com.tomting.orion.PrtoLkey cVkey = 3;
      case 3: {
        if (tag == 26) {
         parse_cVkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVcolumns;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 4;
      case 4: {
        if (tag == 34) {
         parse_cVcolumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvcolumns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVcolumns;
        if (input->ExpectTag(40)) goto parse_iVtimestamp;
        break;
      }

      // optional int64 iVtimestamp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_iVtimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivtimestamp_)));
          set_has_ivtimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2st)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2st)
  return false;
#undef DO_
}

void PrtoL2st::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2st)
  // optional .com.tomting.orion.iCopcodetype iVopcode = 1 [default = MUTATOR];
  if (has_ivopcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivopcode(), output);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvmutable(), output);
  }

  // required .com.tomting.orion.PrtoLkey cVkey = 3;
  if (has_cvkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvkey(), output);
  }

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 4;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvcolumns(i), output);
  }

  // optional int64 iVtimestamp = 5 [default = 0];
  if (has_ivtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ivtimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2st)
}

::google::protobuf::uint8* PrtoL2st::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2st)
  // optional .com.tomting.orion.iCopcodetype iVopcode = 1 [default = MUTATOR];
  if (has_ivopcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivopcode(), target);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvmutable(), target);
  }

  // required .com.tomting.orion.PrtoLkey cVkey = 3;
  if (has_cvkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvkey(), target);
  }

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 4;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvcolumns(i), target);
  }

  // optional int64 iVtimestamp = 5 [default = 0];
  if (has_ivtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ivtimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2st)
  return target;
}

int PrtoL2st::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.tomting.orion.iCopcodetype iVopcode = 1 [default = MUTATOR];
    if (has_ivopcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivopcode());
    }

    // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
    if (has_cvmutable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmutable());
    }

    // required .com.tomting.orion.PrtoLkey cVkey = 3;
    if (has_cvkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey());
    }

    // optional int64 iVtimestamp = 5 [default = 0];
    if (has_ivtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivtimestamp());
    }

  }
  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 4;
  total_size += 1 * this->cvcolumns_size();
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvcolumns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2st::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2st* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2st*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2st::MergeFrom(const PrtoL2st& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvcolumns_.MergeFrom(from.cvcolumns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivopcode()) {
      set_ivopcode(from.ivopcode());
    }
    if (from.has_cvmutable()) {
      mutable_cvmutable()->::com::tomting::orion::PrtoLmtb::MergeFrom(from.cvmutable());
    }
    if (from.has_cvkey()) {
      mutable_cvkey()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey());
    }
    if (from.has_ivtimestamp()) {
      set_ivtimestamp(from.ivtimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2st::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2st::CopyFrom(const PrtoL2st& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2st::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_cvmutable()) {
    if (!this->cvmutable().IsInitialized()) return false;
  }
  if (has_cvkey()) {
    if (!this->cvkey().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cvcolumns())) return false;
  return true;
}

void PrtoL2st::Swap(PrtoL2st* other) {
  if (other != this) {
    std::swap(ivopcode_, other->ivopcode_);
    std::swap(cvmutable_, other->cvmutable_);
    std::swap(cvkey_, other->cvkey_);
    cvcolumns_.Swap(&other->cvcolumns_);
    std::swap(ivtimestamp_, other->ivtimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2st::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2st_descriptor_;
  metadata.reflection = PrtoL2st_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2ag::kSVnameFieldNumber;
const int PrtoL2ag::kSVcolumnsFieldNumber;
#endif  // !_MSC_VER

PrtoL2ag::PrtoL2ag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2ag)
}

void PrtoL2ag::InitAsDefaultInstance() {
}

PrtoL2ag::PrtoL2ag(const PrtoL2ag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2ag)
}

void PrtoL2ag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2ag::~PrtoL2ag() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2ag)
  SharedDtor();
}

void PrtoL2ag::SharedDtor() {
  if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svname_;
  }
  if (this != default_instance_) {
  }
}

void PrtoL2ag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2ag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2ag_descriptor_;
}

const PrtoL2ag& PrtoL2ag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2ag* PrtoL2ag::default_instance_ = NULL;

PrtoL2ag* PrtoL2ag::New() const {
  return new PrtoL2ag;
}

void PrtoL2ag::Clear() {
  if (has_svname()) {
    if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      svname_->clear();
    }
  }
  svcolumns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2ag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2ag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVcolumns;
        break;
      }

      // repeated bytes sVcolumns = 2;
      case 2: {
        if (tag == 18) {
         parse_sVcolumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_svcolumns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVcolumns;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2ag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2ag)
  return false;
#undef DO_
}

void PrtoL2ag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2ag)
  // required bytes sVname = 1;
  if (has_svname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svname(), output);
  }

  // repeated bytes sVcolumns = 2;
  for (int i = 0; i < this->svcolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->svcolumns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2ag)
}

::google::protobuf::uint8* PrtoL2ag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2ag)
  // required bytes sVname = 1;
  if (has_svname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svname(), target);
  }

  // repeated bytes sVcolumns = 2;
  for (int i = 0; i < this->svcolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->svcolumns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2ag)
  return target;
}

int PrtoL2ag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVname = 1;
    if (has_svname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svname());
    }

  }
  // repeated bytes sVcolumns = 2;
  total_size += 1 * this->svcolumns_size();
  for (int i = 0; i < this->svcolumns_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->svcolumns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2ag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2ag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2ag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2ag::MergeFrom(const PrtoL2ag& from) {
  GOOGLE_CHECK_NE(&from, this);
  svcolumns_.MergeFrom(from.svcolumns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svname()) {
      set_svname(from.svname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2ag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2ag::CopyFrom(const PrtoL2ag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2ag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrtoL2ag::Swap(PrtoL2ag* other) {
  if (other != this) {
    std::swap(svname_, other->svname_);
    svcolumns_.Swap(&other->svcolumns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2ag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2ag_descriptor_;
  metadata.reflection = PrtoL2ag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2ix::kSVindexFieldNumber;
const int PrtoL2ix::kCVcolumnFieldNumber;
#endif  // !_MSC_VER

PrtoL2ix::PrtoL2ix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2ix)
}

void PrtoL2ix::InitAsDefaultInstance() {
}

PrtoL2ix::PrtoL2ix(const PrtoL2ix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2ix)
}

void PrtoL2ix::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2ix::~PrtoL2ix() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2ix)
  SharedDtor();
}

void PrtoL2ix::SharedDtor() {
  if (svindex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svindex_;
  }
  if (this != default_instance_) {
  }
}

void PrtoL2ix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2ix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2ix_descriptor_;
}

const PrtoL2ix& PrtoL2ix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2ix* PrtoL2ix::default_instance_ = NULL;

PrtoL2ix* PrtoL2ix::New() const {
  return new PrtoL2ix;
}

void PrtoL2ix::Clear() {
  if (has_svindex()) {
    if (svindex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      svindex_->clear();
    }
  }
  cvcolumn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2ix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2ix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVindex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVcolumn;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2or cVcolumn = 2;
      case 2: {
        if (tag == 18) {
         parse_cVcolumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVcolumn;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2ix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2ix)
  return false;
#undef DO_
}

void PrtoL2ix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2ix)
  // required bytes sVindex = 1;
  if (has_svindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svindex(), output);
  }

  // repeated .com.tomting.orion.PrtoL2or cVcolumn = 2;
  for (int i = 0; i < this->cvcolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvcolumn(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2ix)
}

::google::protobuf::uint8* PrtoL2ix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2ix)
  // required bytes sVindex = 1;
  if (has_svindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svindex(), target);
  }

  // repeated .com.tomting.orion.PrtoL2or cVcolumn = 2;
  for (int i = 0; i < this->cvcolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvcolumn(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2ix)
  return target;
}

int PrtoL2ix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVindex = 1;
    if (has_svindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svindex());
    }

  }
  // repeated .com.tomting.orion.PrtoL2or cVcolumn = 2;
  total_size += 1 * this->cvcolumn_size();
  for (int i = 0; i < this->cvcolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvcolumn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2ix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2ix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2ix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2ix::MergeFrom(const PrtoL2ix& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvcolumn_.MergeFrom(from.cvcolumn_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svindex()) {
      set_svindex(from.svindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2ix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2ix::CopyFrom(const PrtoL2ix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2ix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cvcolumn())) return false;
  return true;
}

void PrtoL2ix::Swap(PrtoL2ix* other) {
  if (other != this) {
    std::swap(svindex_, other->svindex_);
    cvcolumn_.Swap(&other->cvcolumn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2ix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2ix_descriptor_;
  metadata.reflection = PrtoL2ix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2ct::kCVmutableFieldNumber;
const int PrtoL2ct::kCVcolumnsFieldNumber;
const int PrtoL2ct::kCVaccessgroupsFieldNumber;
const int PrtoL2ct::kIVmemtabledimFieldNumber;
const int PrtoL2ct::kIVreplicationfactorFieldNumber;
const int PrtoL2ct::kIVtabletypeFieldNumber;
const int PrtoL2ct::kIVpartitiontypeFieldNumber;
const int PrtoL2ct::kIVindextypeFieldNumber;
const int PrtoL2ct::kCVindexesFieldNumber;
#endif  // !_MSC_VER

PrtoL2ct::PrtoL2ct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2ct)
}

void PrtoL2ct::InitAsDefaultInstance() {
  cvmutable_ = const_cast< ::com::tomting::orion::PrtoLmtb*>(&::com::tomting::orion::PrtoLmtb::default_instance());
}

PrtoL2ct::PrtoL2ct(const PrtoL2ct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2ct)
}

void PrtoL2ct::SharedCtor() {
  _cached_size_ = 0;
  cvmutable_ = NULL;
  ivmemtabledim_ = 0;
  ivreplicationfactor_ = 1;
  ivtabletype_ = 2;
  ivpartitiontype_ = 0;
  ivindextype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2ct::~PrtoL2ct() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2ct)
  SharedDtor();
}

void PrtoL2ct::SharedDtor() {
  if (this != default_instance_) {
    delete cvmutable_;
  }
}

void PrtoL2ct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2ct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2ct_descriptor_;
}

const PrtoL2ct& PrtoL2ct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2ct* PrtoL2ct::default_instance_ = NULL;

PrtoL2ct* PrtoL2ct::New() const {
  return new PrtoL2ct;
}

void PrtoL2ct::Clear() {
  if (_has_bits_[0 / 32] & 249) {
    if (has_cvmutable()) {
      if (cvmutable_ != NULL) cvmutable_->::com::tomting::orion::PrtoLmtb::Clear();
    }
    ivmemtabledim_ = 0;
    ivreplicationfactor_ = 1;
    ivtabletype_ = 2;
    ivpartitiontype_ = 0;
    ivindextype_ = 0;
  }
  cvcolumns_.Clear();
  cvaccessgroups_.Clear();
  cvindexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2ct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2ct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.PrtoLmtb cVmutable = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmutable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVcolumns;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
      case 2: {
        if (tag == 18) {
         parse_cVcolumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvcolumns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVcolumns;
        if (input->ExpectTag(26)) goto parse_cVaccessgroups;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2ag cVaccessgroups = 3;
      case 3: {
        if (tag == 26) {
         parse_cVaccessgroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvaccessgroups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVaccessgroups;
        if (input->ExpectTag(32)) goto parse_iVmemtabledim;
        break;
      }

      // optional int32 iVmemtabledim = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_iVmemtabledim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivmemtabledim_)));
          set_has_ivmemtabledim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVreplicationfactor;
        break;
      }

      // optional int32 iVreplicationfactor = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_iVreplicationfactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivreplicationfactor_)));
          set_has_ivreplicationfactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iVtabletype;
        break;
      }

      // optional .com.tomting.orion.iCtabletype iVtabletype = 6 [default = VOLATILETABLE];
      case 6: {
        if (tag == 48) {
         parse_iVtabletype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCtabletype_IsValid(value)) {
            set_ivtabletype(static_cast< ::com::tomting::orion::iCtabletype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iVpartitiontype;
        break;
      }

      // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 7 [default = NOPARTITION];
      case 7: {
        if (tag == 56) {
         parse_iVpartitiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCpartitiontype_IsValid(value)) {
            set_ivpartitiontype(static_cast< ::com::tomting::orion::iCpartitiontype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iVindextype;
        break;
      }

      // optional .com.tomting.orion.iCindextype iVindextype = 8 [default = DISTRINDEX];
      case 8: {
        if (tag == 64) {
         parse_iVindextype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCindextype_IsValid(value)) {
            set_ivindextype(static_cast< ::com::tomting::orion::iCindextype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cVindexes;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2ix cVindexes = 9;
      case 9: {
        if (tag == 74) {
         parse_cVindexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvindexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cVindexes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2ct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2ct)
  return false;
#undef DO_
}

void PrtoL2ct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2ct)
  // required .com.tomting.orion.PrtoLmtb cVmutable = 1;
  if (has_cvmutable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvmutable(), output);
  }

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvcolumns(i), output);
  }

  // repeated .com.tomting.orion.PrtoL2ag cVaccessgroups = 3;
  for (int i = 0; i < this->cvaccessgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvaccessgroups(i), output);
  }

  // optional int32 iVmemtabledim = 4 [default = 0];
  if (has_ivmemtabledim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ivmemtabledim(), output);
  }

  // optional int32 iVreplicationfactor = 5 [default = 1];
  if (has_ivreplicationfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ivreplicationfactor(), output);
  }

  // optional .com.tomting.orion.iCtabletype iVtabletype = 6 [default = VOLATILETABLE];
  if (has_ivtabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ivtabletype(), output);
  }

  // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 7 [default = NOPARTITION];
  if (has_ivpartitiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ivpartitiontype(), output);
  }

  // optional .com.tomting.orion.iCindextype iVindextype = 8 [default = DISTRINDEX];
  if (has_ivindextype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ivindextype(), output);
  }

  // repeated .com.tomting.orion.PrtoL2ix cVindexes = 9;
  for (int i = 0; i < this->cvindexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cvindexes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2ct)
}

::google::protobuf::uint8* PrtoL2ct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2ct)
  // required .com.tomting.orion.PrtoLmtb cVmutable = 1;
  if (has_cvmutable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvmutable(), target);
  }

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvcolumns(i), target);
  }

  // repeated .com.tomting.orion.PrtoL2ag cVaccessgroups = 3;
  for (int i = 0; i < this->cvaccessgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvaccessgroups(i), target);
  }

  // optional int32 iVmemtabledim = 4 [default = 0];
  if (has_ivmemtabledim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ivmemtabledim(), target);
  }

  // optional int32 iVreplicationfactor = 5 [default = 1];
  if (has_ivreplicationfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ivreplicationfactor(), target);
  }

  // optional .com.tomting.orion.iCtabletype iVtabletype = 6 [default = VOLATILETABLE];
  if (has_ivtabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ivtabletype(), target);
  }

  // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 7 [default = NOPARTITION];
  if (has_ivpartitiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ivpartitiontype(), target);
  }

  // optional .com.tomting.orion.iCindextype iVindextype = 8 [default = DISTRINDEX];
  if (has_ivindextype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ivindextype(), target);
  }

  // repeated .com.tomting.orion.PrtoL2ix cVindexes = 9;
  for (int i = 0; i < this->cvindexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cvindexes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2ct)
  return target;
}

int PrtoL2ct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.PrtoLmtb cVmutable = 1;
    if (has_cvmutable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmutable());
    }

    // optional int32 iVmemtabledim = 4 [default = 0];
    if (has_ivmemtabledim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivmemtabledim());
    }

    // optional int32 iVreplicationfactor = 5 [default = 1];
    if (has_ivreplicationfactor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivreplicationfactor());
    }

    // optional .com.tomting.orion.iCtabletype iVtabletype = 6 [default = VOLATILETABLE];
    if (has_ivtabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivtabletype());
    }

    // optional .com.tomting.orion.iCpartitiontype iVpartitiontype = 7 [default = NOPARTITION];
    if (has_ivpartitiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivpartitiontype());
    }

    // optional .com.tomting.orion.iCindextype iVindextype = 8 [default = DISTRINDEX];
    if (has_ivindextype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivindextype());
    }

  }
  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
  total_size += 1 * this->cvcolumns_size();
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvcolumns(i));
  }

  // repeated .com.tomting.orion.PrtoL2ag cVaccessgroups = 3;
  total_size += 1 * this->cvaccessgroups_size();
  for (int i = 0; i < this->cvaccessgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvaccessgroups(i));
  }

  // repeated .com.tomting.orion.PrtoL2ix cVindexes = 9;
  total_size += 1 * this->cvindexes_size();
  for (int i = 0; i < this->cvindexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvindexes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2ct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2ct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2ct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2ct::MergeFrom(const PrtoL2ct& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvcolumns_.MergeFrom(from.cvcolumns_);
  cvaccessgroups_.MergeFrom(from.cvaccessgroups_);
  cvindexes_.MergeFrom(from.cvindexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cvmutable()) {
      mutable_cvmutable()->::com::tomting::orion::PrtoLmtb::MergeFrom(from.cvmutable());
    }
    if (from.has_ivmemtabledim()) {
      set_ivmemtabledim(from.ivmemtabledim());
    }
    if (from.has_ivreplicationfactor()) {
      set_ivreplicationfactor(from.ivreplicationfactor());
    }
    if (from.has_ivtabletype()) {
      set_ivtabletype(from.ivtabletype());
    }
    if (from.has_ivpartitiontype()) {
      set_ivpartitiontype(from.ivpartitiontype());
    }
    if (from.has_ivindextype()) {
      set_ivindextype(from.ivindextype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2ct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2ct::CopyFrom(const PrtoL2ct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2ct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cvmutable()) {
    if (!this->cvmutable().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cvcolumns())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvaccessgroups())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvindexes())) return false;
  return true;
}

void PrtoL2ct::Swap(PrtoL2ct* other) {
  if (other != this) {
    std::swap(cvmutable_, other->cvmutable_);
    cvcolumns_.Swap(&other->cvcolumns_);
    cvaccessgroups_.Swap(&other->cvaccessgroups_);
    std::swap(ivmemtabledim_, other->ivmemtabledim_);
    std::swap(ivreplicationfactor_, other->ivreplicationfactor_);
    std::swap(ivtabletype_, other->ivtabletype_);
    std::swap(ivpartitiontype_, other->ivpartitiontype_);
    std::swap(ivindextype_, other->ivindextype_);
    cvindexes_.Swap(&other->cvindexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2ct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2ct_descriptor_;
  metadata.reflection = PrtoL2ct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2ao::kCVcolumnsFieldNumber;
#endif  // !_MSC_VER

PrtoL2ao::PrtoL2ao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2ao)
}

void PrtoL2ao::InitAsDefaultInstance() {
}

PrtoL2ao::PrtoL2ao(const PrtoL2ao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2ao)
}

void PrtoL2ao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2ao::~PrtoL2ao() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2ao)
  SharedDtor();
}

void PrtoL2ao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoL2ao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2ao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2ao_descriptor_;
}

const PrtoL2ao& PrtoL2ao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2ao* PrtoL2ao::default_instance_ = NULL;

PrtoL2ao* PrtoL2ao::New() const {
  return new PrtoL2ao;
}

void PrtoL2ao::Clear() {
  cvcolumns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2ao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2ao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 1;
      case 1: {
        if (tag == 10) {
         parse_cVcolumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvcolumns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVcolumns;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2ao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2ao)
  return false;
#undef DO_
}

void PrtoL2ao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2ao)
  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 1;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvcolumns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2ao)
}

::google::protobuf::uint8* PrtoL2ao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2ao)
  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 1;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvcolumns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2ao)
  return target;
}

int PrtoL2ao::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 1;
  total_size += 1 * this->cvcolumns_size();
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvcolumns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2ao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2ao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2ao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2ao::MergeFrom(const PrtoL2ao& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvcolumns_.MergeFrom(from.cvcolumns_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2ao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2ao::CopyFrom(const PrtoL2ao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2ao::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvcolumns())) return false;
  return true;
}

void PrtoL2ao::Swap(PrtoL2ao* other) {
  if (other != this) {
    cvcolumns_.Swap(&other->cvcolumns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2ao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2ao_descriptor_;
  metadata.reflection = PrtoL2ao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2vo::kCVaccessobjectFieldNumber;
#endif  // !_MSC_VER

PrtoL2vo::PrtoL2vo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2vo)
}

void PrtoL2vo::InitAsDefaultInstance() {
}

PrtoL2vo::PrtoL2vo(const PrtoL2vo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2vo)
}

void PrtoL2vo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2vo::~PrtoL2vo() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2vo)
  SharedDtor();
}

void PrtoL2vo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoL2vo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2vo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2vo_descriptor_;
}

const PrtoL2vo& PrtoL2vo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2vo* PrtoL2vo::default_instance_ = NULL;

PrtoL2vo* PrtoL2vo::New() const {
  return new PrtoL2vo;
}

void PrtoL2vo::Clear() {
  cvaccessobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2vo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2vo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoL2ao cVaccessobject = 1;
      case 1: {
        if (tag == 10) {
         parse_cVaccessobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvaccessobject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVaccessobject;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2vo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2vo)
  return false;
#undef DO_
}

void PrtoL2vo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2vo)
  // repeated .com.tomting.orion.PrtoL2ao cVaccessobject = 1;
  for (int i = 0; i < this->cvaccessobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvaccessobject(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2vo)
}

::google::protobuf::uint8* PrtoL2vo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2vo)
  // repeated .com.tomting.orion.PrtoL2ao cVaccessobject = 1;
  for (int i = 0; i < this->cvaccessobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvaccessobject(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2vo)
  return target;
}

int PrtoL2vo::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoL2ao cVaccessobject = 1;
  total_size += 1 * this->cvaccessobject_size();
  for (int i = 0; i < this->cvaccessobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvaccessobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2vo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2vo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2vo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2vo::MergeFrom(const PrtoL2vo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvaccessobject_.MergeFrom(from.cvaccessobject_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2vo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2vo::CopyFrom(const PrtoL2vo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2vo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvaccessobject())) return false;
  return true;
}

void PrtoL2vo::Swap(PrtoL2vo* other) {
  if (other != this) {
    cvaccessobject_.Swap(&other->cvaccessobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2vo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2vo_descriptor_;
  metadata.reflection = PrtoL2vo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2ks::kCVkeyFieldNumber;
const int PrtoL2ks::kCVcolumnsFieldNumber;
#endif  // !_MSC_VER

PrtoL2ks::PrtoL2ks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2ks)
}

void PrtoL2ks::InitAsDefaultInstance() {
  cvkey_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
}

PrtoL2ks::PrtoL2ks(const PrtoL2ks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2ks)
}

void PrtoL2ks::SharedCtor() {
  _cached_size_ = 0;
  cvkey_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2ks::~PrtoL2ks() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2ks)
  SharedDtor();
}

void PrtoL2ks::SharedDtor() {
  if (this != default_instance_) {
    delete cvkey_;
  }
}

void PrtoL2ks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2ks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2ks_descriptor_;
}

const PrtoL2ks& PrtoL2ks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2ks* PrtoL2ks::default_instance_ = NULL;

PrtoL2ks* PrtoL2ks::New() const {
  return new PrtoL2ks;
}

void PrtoL2ks::Clear() {
  if (has_cvkey()) {
    if (cvkey_ != NULL) cvkey_->::com::tomting::orion::PrtoLkey::Clear();
  }
  cvcolumns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2ks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2ks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.PrtoLkey cVkey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVcolumns;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
      case 2: {
        if (tag == 18) {
         parse_cVcolumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvcolumns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVcolumns;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2ks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2ks)
  return false;
#undef DO_
}

void PrtoL2ks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2ks)
  // required .com.tomting.orion.PrtoLkey cVkey = 1;
  if (has_cvkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvkey(), output);
  }

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvcolumns(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2ks)
}

::google::protobuf::uint8* PrtoL2ks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2ks)
  // required .com.tomting.orion.PrtoLkey cVkey = 1;
  if (has_cvkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvkey(), target);
  }

  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvcolumns(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2ks)
  return target;
}

int PrtoL2ks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.PrtoLkey cVkey = 1;
    if (has_cvkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey());
    }

  }
  // repeated .com.tomting.orion.PrtoL2cl cVcolumns = 2;
  total_size += 1 * this->cvcolumns_size();
  for (int i = 0; i < this->cvcolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvcolumns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2ks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2ks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2ks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2ks::MergeFrom(const PrtoL2ks& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvcolumns_.MergeFrom(from.cvcolumns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cvkey()) {
      mutable_cvkey()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2ks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2ks::CopyFrom(const PrtoL2ks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2ks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cvkey()) {
    if (!this->cvkey().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cvcolumns())) return false;
  return true;
}

void PrtoL2ks::Swap(PrtoL2ks* other) {
  if (other != this) {
    std::swap(cvkey_, other->cvkey_);
    cvcolumns_.Swap(&other->cvcolumns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2ks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2ks_descriptor_;
  metadata.reflection = PrtoL2ks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2or::kSVcolumnFieldNumber;
const int PrtoL2or::kIVordertypeFieldNumber;
#endif  // !_MSC_VER

PrtoL2or::PrtoL2or()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2or)
}

void PrtoL2or::InitAsDefaultInstance() {
}

PrtoL2or::PrtoL2or(const PrtoL2or& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2or)
}

void PrtoL2or::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svcolumn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivordertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2or::~PrtoL2or() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2or)
  SharedDtor();
}

void PrtoL2or::SharedDtor() {
  if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svcolumn_;
  }
  if (this != default_instance_) {
  }
}

void PrtoL2or::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2or::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2or_descriptor_;
}

const PrtoL2or& PrtoL2or::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2or* PrtoL2or::default_instance_ = NULL;

PrtoL2or* PrtoL2or::New() const {
  return new PrtoL2or;
}

void PrtoL2or::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_svcolumn()) {
      if (svcolumn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svcolumn_->clear();
      }
    }
    ivordertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2or::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2or)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVcolumn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svcolumn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVordertype;
        break;
      }

      // required .com.tomting.orion.iCordertype iVordertype = 2;
      case 2: {
        if (tag == 16) {
         parse_iVordertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCordertype_IsValid(value)) {
            set_ivordertype(static_cast< ::com::tomting::orion::iCordertype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2or)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2or)
  return false;
#undef DO_
}

void PrtoL2or::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2or)
  // required bytes sVcolumn = 1;
  if (has_svcolumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svcolumn(), output);
  }

  // required .com.tomting.orion.iCordertype iVordertype = 2;
  if (has_ivordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ivordertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2or)
}

::google::protobuf::uint8* PrtoL2or::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2or)
  // required bytes sVcolumn = 1;
  if (has_svcolumn()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svcolumn(), target);
  }

  // required .com.tomting.orion.iCordertype iVordertype = 2;
  if (has_ivordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ivordertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2or)
  return target;
}

int PrtoL2or::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVcolumn = 1;
    if (has_svcolumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svcolumn());
    }

    // required .com.tomting.orion.iCordertype iVordertype = 2;
    if (has_ivordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivordertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2or::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2or* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2or*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2or::MergeFrom(const PrtoL2or& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svcolumn()) {
      set_svcolumn(from.svcolumn());
    }
    if (from.has_ivordertype()) {
      set_ivordertype(from.ivordertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2or::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2or::CopyFrom(const PrtoL2or& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2or::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrtoL2or::Swap(PrtoL2or* other) {
  if (other != this) {
    std::swap(svcolumn_, other->svcolumn_);
    std::swap(ivordertype_, other->ivordertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2or::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2or_descriptor_;
  metadata.reflection = PrtoL2or_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2wh::kCVconditionFieldNumber;
const int PrtoL2wh::kCVorderbyFieldNumber;
#endif  // !_MSC_VER

PrtoL2wh::PrtoL2wh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2wh)
}

void PrtoL2wh::InitAsDefaultInstance() {
}

PrtoL2wh::PrtoL2wh(const PrtoL2wh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2wh)
}

void PrtoL2wh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2wh::~PrtoL2wh() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2wh)
  SharedDtor();
}

void PrtoL2wh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoL2wh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2wh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2wh_descriptor_;
}

const PrtoL2wh& PrtoL2wh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2wh* PrtoL2wh::default_instance_ = NULL;

PrtoL2wh* PrtoL2wh::New() const {
  return new PrtoL2wh;
}

void PrtoL2wh::Clear() {
  cvcondition_.Clear();
  cvorderby_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2wh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2wh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoL2cl cVcondition = 1;
      case 1: {
        if (tag == 10) {
         parse_cVcondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvcondition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVcondition;
        if (input->ExpectTag(18)) goto parse_cVorderby;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2or cVorderby = 2;
      case 2: {
        if (tag == 18) {
         parse_cVorderby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvorderby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVorderby;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2wh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2wh)
  return false;
#undef DO_
}

void PrtoL2wh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2wh)
  // repeated .com.tomting.orion.PrtoL2cl cVcondition = 1;
  for (int i = 0; i < this->cvcondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvcondition(i), output);
  }

  // repeated .com.tomting.orion.PrtoL2or cVorderby = 2;
  for (int i = 0; i < this->cvorderby_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvorderby(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2wh)
}

::google::protobuf::uint8* PrtoL2wh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2wh)
  // repeated .com.tomting.orion.PrtoL2cl cVcondition = 1;
  for (int i = 0; i < this->cvcondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvcondition(i), target);
  }

  // repeated .com.tomting.orion.PrtoL2or cVorderby = 2;
  for (int i = 0; i < this->cvorderby_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvorderby(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2wh)
  return target;
}

int PrtoL2wh::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoL2cl cVcondition = 1;
  total_size += 1 * this->cvcondition_size();
  for (int i = 0; i < this->cvcondition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvcondition(i));
  }

  // repeated .com.tomting.orion.PrtoL2or cVorderby = 2;
  total_size += 1 * this->cvorderby_size();
  for (int i = 0; i < this->cvorderby_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvorderby(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2wh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2wh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2wh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2wh::MergeFrom(const PrtoL2wh& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvcondition_.MergeFrom(from.cvcondition_);
  cvorderby_.MergeFrom(from.cvorderby_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2wh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2wh::CopyFrom(const PrtoL2wh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2wh::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvcondition())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvorderby())) return false;
  return true;
}

void PrtoL2wh::Swap(PrtoL2wh* other) {
  if (other != this) {
    cvcondition_.Swap(&other->cvcondition_);
    cvorderby_.Swap(&other->cvorderby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2wh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2wh_descriptor_;
  metadata.reflection = PrtoL2wh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2qr::kCVselectFieldNumber;
const int PrtoL2qr::kCVmutableFieldNumber;
const int PrtoL2qr::kIVqueryFieldNumber;
const int PrtoL2qr::kCVkeyStartFieldNumber;
const int PrtoL2qr::kCVkeyEndFieldNumber;
const int PrtoL2qr::kCVwhereFieldNumber;
const int PrtoL2qr::kIVcountFieldNumber;
const int PrtoL2qr::kBVonlysecondaryFieldNumber;
const int PrtoL2qr::kBVdisableteleportFieldNumber;
const int PrtoL2qr::kBVfulltablescanFieldNumber;
#endif  // !_MSC_VER

PrtoL2qr::PrtoL2qr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2qr)
}

void PrtoL2qr::InitAsDefaultInstance() {
  cvmutable_ = const_cast< ::com::tomting::orion::PrtoLmtb*>(&::com::tomting::orion::PrtoLmtb::default_instance());
  cvkey_start_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
  cvkey_end_ = const_cast< ::com::tomting::orion::PrtoLkey*>(&::com::tomting::orion::PrtoLkey::default_instance());
  cvwhere_ = const_cast< ::com::tomting::orion::PrtoL2wh*>(&::com::tomting::orion::PrtoL2wh::default_instance());
}

PrtoL2qr::PrtoL2qr(const PrtoL2qr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2qr)
}

void PrtoL2qr::SharedCtor() {
  _cached_size_ = 0;
  cvmutable_ = NULL;
  ivquery_ = 0;
  cvkey_start_ = NULL;
  cvkey_end_ = NULL;
  cvwhere_ = NULL;
  ivcount_ = 100;
  bvonlysecondary_ = false;
  bvdisableteleport_ = false;
  bvfulltablescan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2qr::~PrtoL2qr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2qr)
  SharedDtor();
}

void PrtoL2qr::SharedDtor() {
  if (this != default_instance_) {
    delete cvmutable_;
    delete cvkey_start_;
    delete cvkey_end_;
    delete cvwhere_;
  }
}

void PrtoL2qr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2qr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2qr_descriptor_;
}

const PrtoL2qr& PrtoL2qr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2qr* PrtoL2qr::default_instance_ = NULL;

PrtoL2qr* PrtoL2qr::New() const {
  return new PrtoL2qr;
}

void PrtoL2qr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoL2qr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    if (has_cvmutable()) {
      if (cvmutable_ != NULL) cvmutable_->::com::tomting::orion::PrtoLmtb::Clear();
    }
    ivquery_ = 0;
    if (has_cvkey_start()) {
      if (cvkey_start_ != NULL) cvkey_start_->::com::tomting::orion::PrtoLkey::Clear();
    }
    if (has_cvkey_end()) {
      if (cvkey_end_ != NULL) cvkey_end_->::com::tomting::orion::PrtoLkey::Clear();
    }
    if (has_cvwhere()) {
      if (cvwhere_ != NULL) cvwhere_->::com::tomting::orion::PrtoL2wh::Clear();
    }
    ivcount_ = 100;
    bvonlysecondary_ = false;
  }
  ZR_(bvdisableteleport_, bvfulltablescan_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  cvselect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2qr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2qr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoL2cl cVselect = 1;
      case 1: {
        if (tag == 10) {
         parse_cVselect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvselect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVselect;
        if (input->ExpectTag(18)) goto parse_cVmutable;
        break;
      }

      // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
      case 2: {
        if (tag == 18) {
         parse_cVmutable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmutable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVquery;
        break;
      }

      // optional .com.tomting.orion.iCquerytype iVquery = 3;
      case 3: {
        if (tag == 24) {
         parse_iVquery:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCquerytype_IsValid(value)) {
            set_ivquery(static_cast< ::com::tomting::orion::iCquerytype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVkey_start;
        break;
      }

      // optional .com.tomting.orion.PrtoLkey cVkey_start = 4;
      case 4: {
        if (tag == 34) {
         parse_cVkey_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cVkey_end;
        break;
      }

      // optional .com.tomting.orion.PrtoLkey cVkey_end = 5;
      case 5: {
        if (tag == 42) {
         parse_cVkey_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvkey_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cVwhere;
        break;
      }

      // optional .com.tomting.orion.PrtoL2wh cVwhere = 6;
      case 6: {
        if (tag == 50) {
         parse_cVwhere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvwhere()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iVcount;
        break;
      }

      // optional int32 iVcount = 7 [default = 100];
      case 7: {
        if (tag == 56) {
         parse_iVcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivcount_)));
          set_has_ivcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bVonlysecondary;
        break;
      }

      // optional bool bVonlysecondary = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_bVonlysecondary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvonlysecondary_)));
          set_has_bvonlysecondary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bVdisableteleport;
        break;
      }

      // optional bool bVdisableteleport = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_bVdisableteleport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvdisableteleport_)));
          set_has_bvdisableteleport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_bVfulltablescan;
        break;
      }

      // optional bool bVfulltablescan = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_bVfulltablescan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvfulltablescan_)));
          set_has_bvfulltablescan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2qr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2qr)
  return false;
#undef DO_
}

void PrtoL2qr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2qr)
  // repeated .com.tomting.orion.PrtoL2cl cVselect = 1;
  for (int i = 0; i < this->cvselect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvselect(i), output);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvmutable(), output);
  }

  // optional .com.tomting.orion.iCquerytype iVquery = 3;
  if (has_ivquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ivquery(), output);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey_start = 4;
  if (has_cvkey_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvkey_start(), output);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey_end = 5;
  if (has_cvkey_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cvkey_end(), output);
  }

  // optional .com.tomting.orion.PrtoL2wh cVwhere = 6;
  if (has_cvwhere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cvwhere(), output);
  }

  // optional int32 iVcount = 7 [default = 100];
  if (has_ivcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ivcount(), output);
  }

  // optional bool bVonlysecondary = 8 [default = false];
  if (has_bvonlysecondary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bvonlysecondary(), output);
  }

  // optional bool bVdisableteleport = 9 [default = false];
  if (has_bvdisableteleport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bvdisableteleport(), output);
  }

  // optional bool bVfulltablescan = 10 [default = false];
  if (has_bvfulltablescan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bvfulltablescan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2qr)
}

::google::protobuf::uint8* PrtoL2qr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2qr)
  // repeated .com.tomting.orion.PrtoL2cl cVselect = 1;
  for (int i = 0; i < this->cvselect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvselect(i), target);
  }

  // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
  if (has_cvmutable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvmutable(), target);
  }

  // optional .com.tomting.orion.iCquerytype iVquery = 3;
  if (has_ivquery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ivquery(), target);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey_start = 4;
  if (has_cvkey_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvkey_start(), target);
  }

  // optional .com.tomting.orion.PrtoLkey cVkey_end = 5;
  if (has_cvkey_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cvkey_end(), target);
  }

  // optional .com.tomting.orion.PrtoL2wh cVwhere = 6;
  if (has_cvwhere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cvwhere(), target);
  }

  // optional int32 iVcount = 7 [default = 100];
  if (has_ivcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ivcount(), target);
  }

  // optional bool bVonlysecondary = 8 [default = false];
  if (has_bvonlysecondary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bvonlysecondary(), target);
  }

  // optional bool bVdisableteleport = 9 [default = false];
  if (has_bvdisableteleport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->bvdisableteleport(), target);
  }

  // optional bool bVfulltablescan = 10 [default = false];
  if (has_bvfulltablescan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bvfulltablescan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2qr)
  return target;
}

int PrtoL2qr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .com.tomting.orion.PrtoLmtb cVmutable = 2;
    if (has_cvmutable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmutable());
    }

    // optional .com.tomting.orion.iCquerytype iVquery = 3;
    if (has_ivquery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivquery());
    }

    // optional .com.tomting.orion.PrtoLkey cVkey_start = 4;
    if (has_cvkey_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey_start());
    }

    // optional .com.tomting.orion.PrtoLkey cVkey_end = 5;
    if (has_cvkey_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvkey_end());
    }

    // optional .com.tomting.orion.PrtoL2wh cVwhere = 6;
    if (has_cvwhere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvwhere());
    }

    // optional int32 iVcount = 7 [default = 100];
    if (has_ivcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivcount());
    }

    // optional bool bVonlysecondary = 8 [default = false];
    if (has_bvonlysecondary()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool bVdisableteleport = 9 [default = false];
    if (has_bvdisableteleport()) {
      total_size += 1 + 1;
    }

    // optional bool bVfulltablescan = 10 [default = false];
    if (has_bvfulltablescan()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.tomting.orion.PrtoL2cl cVselect = 1;
  total_size += 1 * this->cvselect_size();
  for (int i = 0; i < this->cvselect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvselect(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2qr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2qr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2qr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2qr::MergeFrom(const PrtoL2qr& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvselect_.MergeFrom(from.cvselect_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cvmutable()) {
      mutable_cvmutable()->::com::tomting::orion::PrtoLmtb::MergeFrom(from.cvmutable());
    }
    if (from.has_ivquery()) {
      set_ivquery(from.ivquery());
    }
    if (from.has_cvkey_start()) {
      mutable_cvkey_start()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey_start());
    }
    if (from.has_cvkey_end()) {
      mutable_cvkey_end()->::com::tomting::orion::PrtoLkey::MergeFrom(from.cvkey_end());
    }
    if (from.has_cvwhere()) {
      mutable_cvwhere()->::com::tomting::orion::PrtoL2wh::MergeFrom(from.cvwhere());
    }
    if (from.has_ivcount()) {
      set_ivcount(from.ivcount());
    }
    if (from.has_bvonlysecondary()) {
      set_bvonlysecondary(from.bvonlysecondary());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bvdisableteleport()) {
      set_bvdisableteleport(from.bvdisableteleport());
    }
    if (from.has_bvfulltablescan()) {
      set_bvfulltablescan(from.bvfulltablescan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2qr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2qr::CopyFrom(const PrtoL2qr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2qr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cvselect())) return false;
  if (has_cvmutable()) {
    if (!this->cvmutable().IsInitialized()) return false;
  }
  if (has_cvkey_start()) {
    if (!this->cvkey_start().IsInitialized()) return false;
  }
  if (has_cvkey_end()) {
    if (!this->cvkey_end().IsInitialized()) return false;
  }
  if (has_cvwhere()) {
    if (!this->cvwhere().IsInitialized()) return false;
  }
  return true;
}

void PrtoL2qr::Swap(PrtoL2qr* other) {
  if (other != this) {
    cvselect_.Swap(&other->cvselect_);
    std::swap(cvmutable_, other->cvmutable_);
    std::swap(ivquery_, other->ivquery_);
    std::swap(cvkey_start_, other->cvkey_start_);
    std::swap(cvkey_end_, other->cvkey_end_);
    std::swap(cvwhere_, other->cvwhere_);
    std::swap(ivcount_, other->ivcount_);
    std::swap(bvonlysecondary_, other->bvonlysecondary_);
    std::swap(bvdisableteleport_, other->bvdisableteleport_);
    std::swap(bvfulltablescan_, other->bvfulltablescan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2qr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2qr_descriptor_;
  metadata.reflection = PrtoL2qr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2os::kSVnamespaceFieldNumber;
const int PrtoL2os::kSVosqlstringFieldNumber;
const int PrtoL2os::kCVinputbindingsFieldNumber;
const int PrtoL2os::kBVonlysecondaryFieldNumber;
const int PrtoL2os::kBVdisableteleportFieldNumber;
const int PrtoL2os::kIVtimestampFieldNumber;
const int PrtoL2os::kBVfulltablescanFieldNumber;
#endif  // !_MSC_VER

PrtoL2os::PrtoL2os()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2os)
}

void PrtoL2os::InitAsDefaultInstance() {
}

PrtoL2os::PrtoL2os(const PrtoL2os& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2os)
}

void PrtoL2os::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svnamespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svosqlstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bvonlysecondary_ = false;
  bvdisableteleport_ = false;
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  bvfulltablescan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2os::~PrtoL2os() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2os)
  SharedDtor();
}

void PrtoL2os::SharedDtor() {
  if (svnamespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnamespace_;
  }
  if (svosqlstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svosqlstring_;
  }
  if (this != default_instance_) {
  }
}

void PrtoL2os::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2os::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2os_descriptor_;
}

const PrtoL2os& PrtoL2os::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2os* PrtoL2os::default_instance_ = NULL;

PrtoL2os* PrtoL2os::New() const {
  return new PrtoL2os;
}

void PrtoL2os::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoL2os*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(ivtimestamp_, bvfulltablescan_);
    if (has_svnamespace()) {
      if (svnamespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnamespace_->clear();
      }
    }
    if (has_svosqlstring()) {
      if (svosqlstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svosqlstring_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cvinputbindings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2os::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2os)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVnamespace = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnamespace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVosqlstring;
        break;
      }

      // required bytes sVosqlstring = 2;
      case 2: {
        if (tag == 18) {
         parse_sVosqlstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svosqlstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVinputbindings;
        break;
      }

      // repeated .com.tomting.orion.PrtoL2cv cVinputbindings = 3;
      case 3: {
        if (tag == 26) {
         parse_cVinputbindings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvinputbindings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVinputbindings;
        if (input->ExpectTag(32)) goto parse_bVonlysecondary;
        break;
      }

      // optional bool bVonlysecondary = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_bVonlysecondary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvonlysecondary_)));
          set_has_bvonlysecondary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bVdisableteleport;
        break;
      }

      // optional bool bVdisableteleport = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_bVdisableteleport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvdisableteleport_)));
          set_has_bvdisableteleport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iVtimestamp;
        break;
      }

      // optional int64 iVtimestamp = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_iVtimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivtimestamp_)));
          set_has_ivtimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bVfulltablescan;
        break;
      }

      // optional bool bVfulltablescan = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_bVfulltablescan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvfulltablescan_)));
          set_has_bvfulltablescan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2os)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2os)
  return false;
#undef DO_
}

void PrtoL2os::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2os)
  // required bytes sVnamespace = 1;
  if (has_svnamespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svnamespace(), output);
  }

  // required bytes sVosqlstring = 2;
  if (has_svosqlstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svosqlstring(), output);
  }

  // repeated .com.tomting.orion.PrtoL2cv cVinputbindings = 3;
  for (int i = 0; i < this->cvinputbindings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvinputbindings(i), output);
  }

  // optional bool bVonlysecondary = 4 [default = false];
  if (has_bvonlysecondary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bvonlysecondary(), output);
  }

  // optional bool bVdisableteleport = 5 [default = false];
  if (has_bvdisableteleport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bvdisableteleport(), output);
  }

  // optional int64 iVtimestamp = 6 [default = 0];
  if (has_ivtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ivtimestamp(), output);
  }

  // optional bool bVfulltablescan = 7 [default = false];
  if (has_bvfulltablescan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bvfulltablescan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2os)
}

::google::protobuf::uint8* PrtoL2os::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2os)
  // required bytes sVnamespace = 1;
  if (has_svnamespace()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svnamespace(), target);
  }

  // required bytes sVosqlstring = 2;
  if (has_svosqlstring()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svosqlstring(), target);
  }

  // repeated .com.tomting.orion.PrtoL2cv cVinputbindings = 3;
  for (int i = 0; i < this->cvinputbindings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvinputbindings(i), target);
  }

  // optional bool bVonlysecondary = 4 [default = false];
  if (has_bvonlysecondary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bvonlysecondary(), target);
  }

  // optional bool bVdisableteleport = 5 [default = false];
  if (has_bvdisableteleport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bvdisableteleport(), target);
  }

  // optional int64 iVtimestamp = 6 [default = 0];
  if (has_ivtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ivtimestamp(), target);
  }

  // optional bool bVfulltablescan = 7 [default = false];
  if (has_bvfulltablescan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bvfulltablescan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2os)
  return target;
}

int PrtoL2os::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVnamespace = 1;
    if (has_svnamespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnamespace());
    }

    // required bytes sVosqlstring = 2;
    if (has_svosqlstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svosqlstring());
    }

    // optional bool bVonlysecondary = 4 [default = false];
    if (has_bvonlysecondary()) {
      total_size += 1 + 1;
    }

    // optional bool bVdisableteleport = 5 [default = false];
    if (has_bvdisableteleport()) {
      total_size += 1 + 1;
    }

    // optional int64 iVtimestamp = 6 [default = 0];
    if (has_ivtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivtimestamp());
    }

    // optional bool bVfulltablescan = 7 [default = false];
    if (has_bvfulltablescan()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.tomting.orion.PrtoL2cv cVinputbindings = 3;
  total_size += 1 * this->cvinputbindings_size();
  for (int i = 0; i < this->cvinputbindings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvinputbindings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2os::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2os* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2os*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2os::MergeFrom(const PrtoL2os& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvinputbindings_.MergeFrom(from.cvinputbindings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svnamespace()) {
      set_svnamespace(from.svnamespace());
    }
    if (from.has_svosqlstring()) {
      set_svosqlstring(from.svosqlstring());
    }
    if (from.has_bvonlysecondary()) {
      set_bvonlysecondary(from.bvonlysecondary());
    }
    if (from.has_bvdisableteleport()) {
      set_bvdisableteleport(from.bvdisableteleport());
    }
    if (from.has_ivtimestamp()) {
      set_ivtimestamp(from.ivtimestamp());
    }
    if (from.has_bvfulltablescan()) {
      set_bvfulltablescan(from.bvfulltablescan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2os::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2os::CopyFrom(const PrtoL2os& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2os::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrtoL2os::Swap(PrtoL2os* other) {
  if (other != this) {
    std::swap(svnamespace_, other->svnamespace_);
    std::swap(svosqlstring_, other->svosqlstring_);
    cvinputbindings_.Swap(&other->cvinputbindings_);
    std::swap(bvonlysecondary_, other->bvonlysecondary_);
    std::swap(bvdisableteleport_, other->bvdisableteleport_);
    std::swap(ivtimestamp_, other->ivtimestamp_);
    std::swap(bvfulltablescan_, other->bvfulltablescan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2os::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2os_descriptor_;
  metadata.reflection = PrtoL2os_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2mr::kCVkeysliceFieldNumber;
#endif  // !_MSC_VER

PrtoL2mr::PrtoL2mr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2mr)
}

void PrtoL2mr::InitAsDefaultInstance() {
}

PrtoL2mr::PrtoL2mr(const PrtoL2mr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2mr)
}

void PrtoL2mr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2mr::~PrtoL2mr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2mr)
  SharedDtor();
}

void PrtoL2mr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoL2mr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2mr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2mr_descriptor_;
}

const PrtoL2mr& PrtoL2mr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2mr* PrtoL2mr::default_instance_ = NULL;

PrtoL2mr* PrtoL2mr::New() const {
  return new PrtoL2mr;
}

void PrtoL2mr::Clear() {
  cvkeyslice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2mr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2mr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoL2ks cVkeyslice = 1;
      case 1: {
        if (tag == 10) {
         parse_cVkeyslice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvkeyslice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVkeyslice;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2mr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2mr)
  return false;
#undef DO_
}

void PrtoL2mr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2mr)
  // repeated .com.tomting.orion.PrtoL2ks cVkeyslice = 1;
  for (int i = 0; i < this->cvkeyslice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvkeyslice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2mr)
}

::google::protobuf::uint8* PrtoL2mr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2mr)
  // repeated .com.tomting.orion.PrtoL2ks cVkeyslice = 1;
  for (int i = 0; i < this->cvkeyslice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvkeyslice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2mr)
  return target;
}

int PrtoL2mr::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoL2ks cVkeyslice = 1;
  total_size += 1 * this->cvkeyslice_size();
  for (int i = 0; i < this->cvkeyslice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvkeyslice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2mr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2mr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2mr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2mr::MergeFrom(const PrtoL2mr& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvkeyslice_.MergeFrom(from.cvkeyslice_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2mr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2mr::CopyFrom(const PrtoL2mr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2mr::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvkeyslice())) return false;
  return true;
}

void PrtoL2mr::Swap(PrtoL2mr* other) {
  if (other != this) {
    cvkeyslice_.Swap(&other->cvkeyslice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2mr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2mr_descriptor_;
  metadata.reflection = PrtoL2mr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoL2iv::kIVkeydelimitersFieldNumber;
const int PrtoL2iv::kSVoriginalkeyFieldNumber;
#endif  // !_MSC_VER

PrtoL2iv::PrtoL2iv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoL2iv)
}

void PrtoL2iv::InitAsDefaultInstance() {
}

PrtoL2iv::PrtoL2iv(const PrtoL2iv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoL2iv)
}

void PrtoL2iv::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svoriginalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoL2iv::~PrtoL2iv() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoL2iv)
  SharedDtor();
}

void PrtoL2iv::SharedDtor() {
  if (svoriginalkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svoriginalkey_;
  }
  if (this != default_instance_) {
  }
}

void PrtoL2iv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoL2iv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoL2iv_descriptor_;
}

const PrtoL2iv& PrtoL2iv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoL2iv* PrtoL2iv::default_instance_ = NULL;

PrtoL2iv* PrtoL2iv::New() const {
  return new PrtoL2iv;
}

void PrtoL2iv::Clear() {
  if (has_svoriginalkey()) {
    if (svoriginalkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      svoriginalkey_->clear();
    }
  }
  ivkeydelimiters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoL2iv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoL2iv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 iVkeydelimiters = 1;
      case 1: {
        if (tag == 8) {
         parse_iVkeydelimiters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ivkeydelimiters())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ivkeydelimiters())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_iVkeydelimiters;
        if (input->ExpectTag(18)) goto parse_sVoriginalkey;
        break;
      }

      // required bytes sVoriginalkey = 2;
      case 2: {
        if (tag == 18) {
         parse_sVoriginalkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svoriginalkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoL2iv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoL2iv)
  return false;
#undef DO_
}

void PrtoL2iv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoL2iv)
  // repeated int32 iVkeydelimiters = 1;
  for (int i = 0; i < this->ivkeydelimiters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ivkeydelimiters(i), output);
  }

  // required bytes sVoriginalkey = 2;
  if (has_svoriginalkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svoriginalkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoL2iv)
}

::google::protobuf::uint8* PrtoL2iv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoL2iv)
  // repeated int32 iVkeydelimiters = 1;
  for (int i = 0; i < this->ivkeydelimiters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ivkeydelimiters(i), target);
  }

  // required bytes sVoriginalkey = 2;
  if (has_svoriginalkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svoriginalkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoL2iv)
  return target;
}

int PrtoL2iv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bytes sVoriginalkey = 2;
    if (has_svoriginalkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svoriginalkey());
    }

  }
  // repeated int32 iVkeydelimiters = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ivkeydelimiters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ivkeydelimiters(i));
    }
    total_size += 1 * this->ivkeydelimiters_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoL2iv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoL2iv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoL2iv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoL2iv::MergeFrom(const PrtoL2iv& from) {
  GOOGLE_CHECK_NE(&from, this);
  ivkeydelimiters_.MergeFrom(from.ivkeydelimiters_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svoriginalkey()) {
      set_svoriginalkey(from.svoriginalkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoL2iv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoL2iv::CopyFrom(const PrtoL2iv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoL2iv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PrtoL2iv::Swap(PrtoL2iv* other) {
  if (other != this) {
    ivkeydelimiters_.Swap(&other->ivkeydelimiters_);
    std::swap(svoriginalkey_, other->svoriginalkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoL2iv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoL2iv_descriptor_;
  metadata.reflection = PrtoL2iv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoGoel::kSVtokenFieldNumber;
const int PrtoGoel::kSVnodeidFieldNumber;
const int PrtoGoel::kSVdatacenteridFieldNumber;
const int PrtoGoel::kDVphiaccrualFieldNumber;
const int PrtoGoel::kSVaddressFieldNumber;
const int PrtoGoel::kIVportFieldNumber;
const int PrtoGoel::kSVreaderFieldNumber;
const int PrtoGoel::kSVwriterFieldNumber;
const int PrtoGoel::kIVstateFieldNumber;
const int PrtoGoel::kIVtimestampFieldNumber;
const int PrtoGoel::kIVsizeFieldNumber;
#endif  // !_MSC_VER

PrtoGoel::PrtoGoel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoGoel)
}

void PrtoGoel::InitAsDefaultInstance() {
}

PrtoGoel::PrtoGoel(const PrtoGoel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoGoel)
}

void PrtoGoel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svnodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svdatacenterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dvphiaccrual_ = 0;
  svaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivport_ = 0;
  svreader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svwriter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivstate_ = 0;
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  ivsize_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoGoel::~PrtoGoel() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoGoel)
  SharedDtor();
}

void PrtoGoel::SharedDtor() {
  if (svtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svtoken_;
  }
  if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnodeid_;
  }
  if (svdatacenterid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svdatacenterid_;
  }
  if (svaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svaddress_;
  }
  if (svreader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svreader_;
  }
  if (svwriter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svwriter_;
  }
  if (this != default_instance_) {
  }
}

void PrtoGoel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoGoel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoGoel_descriptor_;
}

const PrtoGoel& PrtoGoel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoGoel* PrtoGoel::default_instance_ = NULL;

PrtoGoel* PrtoGoel::New() const {
  return new PrtoGoel;
}

void PrtoGoel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoGoel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_svtoken()) {
      if (svtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svtoken_->clear();
      }
    }
    if (has_svnodeid()) {
      if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnodeid_->clear();
      }
    }
    if (has_svdatacenterid()) {
      if (svdatacenterid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svdatacenterid_->clear();
      }
    }
    dvphiaccrual_ = 0;
    if (has_svaddress()) {
      if (svaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svaddress_->clear();
      }
    }
    ivport_ = 0;
    if (has_svreader()) {
      if (svreader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svreader_->clear();
      }
    }
    if (has_svwriter()) {
      if (svwriter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svwriter_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(ivtimestamp_, ivsize_);
    ivstate_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoGoel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoGoel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVtoken = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svtoken()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVnodeid;
        break;
      }

      // required bytes sVnodeid = 2;
      case 2: {
        if (tag == 18) {
         parse_sVnodeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnodeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sVdatacenterid;
        break;
      }

      // required bytes sVdatacenterid = 3;
      case 3: {
        if (tag == 26) {
         parse_sVdatacenterid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svdatacenterid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dVphiaccrual;
        break;
      }

      // optional double dVphiaccrual = 4;
      case 4: {
        if (tag == 33) {
         parse_dVphiaccrual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dvphiaccrual_)));
          set_has_dvphiaccrual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sVaddress;
        break;
      }

      // optional bytes sVaddress = 5;
      case 5: {
        if (tag == 42) {
         parse_sVaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iVport;
        break;
      }

      // optional int32 iVport = 6;
      case 6: {
        if (tag == 48) {
         parse_iVport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivport_)));
          set_has_ivport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sVreader;
        break;
      }

      // optional bytes sVreader = 7;
      case 7: {
        if (tag == 58) {
         parse_sVreader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svreader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sVwriter;
        break;
      }

      // optional bytes sVwriter = 8;
      case 8: {
        if (tag == 66) {
         parse_sVwriter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svwriter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_iVstate;
        break;
      }

      // optional .com.tomting.orion.iCstategossipnode iVstate = 9;
      case 9: {
        if (tag == 72) {
         parse_iVstate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCstategossipnode_IsValid(value)) {
            set_ivstate(static_cast< ::com::tomting::orion::iCstategossipnode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_iVtimestamp;
        break;
      }

      // optional int64 iVtimestamp = 10;
      case 10: {
        if (tag == 80) {
         parse_iVtimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivtimestamp_)));
          set_has_ivtimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_iVsize;
        break;
      }

      // optional int64 iVsize = 11;
      case 11: {
        if (tag == 88) {
         parse_iVsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivsize_)));
          set_has_ivsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoGoel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoGoel)
  return false;
#undef DO_
}

void PrtoGoel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoGoel)
  // required bytes sVtoken = 1;
  if (has_svtoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svtoken(), output);
  }

  // required bytes sVnodeid = 2;
  if (has_svnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svnodeid(), output);
  }

  // required bytes sVdatacenterid = 3;
  if (has_svdatacenterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->svdatacenterid(), output);
  }

  // optional double dVphiaccrual = 4;
  if (has_dvphiaccrual()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dvphiaccrual(), output);
  }

  // optional bytes sVaddress = 5;
  if (has_svaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->svaddress(), output);
  }

  // optional int32 iVport = 6;
  if (has_ivport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ivport(), output);
  }

  // optional bytes sVreader = 7;
  if (has_svreader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->svreader(), output);
  }

  // optional bytes sVwriter = 8;
  if (has_svwriter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->svwriter(), output);
  }

  // optional .com.tomting.orion.iCstategossipnode iVstate = 9;
  if (has_ivstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->ivstate(), output);
  }

  // optional int64 iVtimestamp = 10;
  if (has_ivtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ivtimestamp(), output);
  }

  // optional int64 iVsize = 11;
  if (has_ivsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ivsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoGoel)
}

::google::protobuf::uint8* PrtoGoel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoGoel)
  // required bytes sVtoken = 1;
  if (has_svtoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svtoken(), target);
  }

  // required bytes sVnodeid = 2;
  if (has_svnodeid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svnodeid(), target);
  }

  // required bytes sVdatacenterid = 3;
  if (has_svdatacenterid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->svdatacenterid(), target);
  }

  // optional double dVphiaccrual = 4;
  if (has_dvphiaccrual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dvphiaccrual(), target);
  }

  // optional bytes sVaddress = 5;
  if (has_svaddress()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->svaddress(), target);
  }

  // optional int32 iVport = 6;
  if (has_ivport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ivport(), target);
  }

  // optional bytes sVreader = 7;
  if (has_svreader()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->svreader(), target);
  }

  // optional bytes sVwriter = 8;
  if (has_svwriter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->svwriter(), target);
  }

  // optional .com.tomting.orion.iCstategossipnode iVstate = 9;
  if (has_ivstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->ivstate(), target);
  }

  // optional int64 iVtimestamp = 10;
  if (has_ivtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ivtimestamp(), target);
  }

  // optional int64 iVsize = 11;
  if (has_ivsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ivsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoGoel)
  return target;
}

int PrtoGoel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVtoken = 1;
    if (has_svtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svtoken());
    }

    // required bytes sVnodeid = 2;
    if (has_svnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnodeid());
    }

    // required bytes sVdatacenterid = 3;
    if (has_svdatacenterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svdatacenterid());
    }

    // optional double dVphiaccrual = 4;
    if (has_dvphiaccrual()) {
      total_size += 1 + 8;
    }

    // optional bytes sVaddress = 5;
    if (has_svaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svaddress());
    }

    // optional int32 iVport = 6;
    if (has_ivport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivport());
    }

    // optional bytes sVreader = 7;
    if (has_svreader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svreader());
    }

    // optional bytes sVwriter = 8;
    if (has_svwriter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svwriter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.tomting.orion.iCstategossipnode iVstate = 9;
    if (has_ivstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivstate());
    }

    // optional int64 iVtimestamp = 10;
    if (has_ivtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivtimestamp());
    }

    // optional int64 iVsize = 11;
    if (has_ivsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoGoel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoGoel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoGoel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoGoel::MergeFrom(const PrtoGoel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svtoken()) {
      set_svtoken(from.svtoken());
    }
    if (from.has_svnodeid()) {
      set_svnodeid(from.svnodeid());
    }
    if (from.has_svdatacenterid()) {
      set_svdatacenterid(from.svdatacenterid());
    }
    if (from.has_dvphiaccrual()) {
      set_dvphiaccrual(from.dvphiaccrual());
    }
    if (from.has_svaddress()) {
      set_svaddress(from.svaddress());
    }
    if (from.has_ivport()) {
      set_ivport(from.ivport());
    }
    if (from.has_svreader()) {
      set_svreader(from.svreader());
    }
    if (from.has_svwriter()) {
      set_svwriter(from.svwriter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ivstate()) {
      set_ivstate(from.ivstate());
    }
    if (from.has_ivtimestamp()) {
      set_ivtimestamp(from.ivtimestamp());
    }
    if (from.has_ivsize()) {
      set_ivsize(from.ivsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoGoel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoGoel::CopyFrom(const PrtoGoel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoGoel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PrtoGoel::Swap(PrtoGoel* other) {
  if (other != this) {
    std::swap(svtoken_, other->svtoken_);
    std::swap(svnodeid_, other->svnodeid_);
    std::swap(svdatacenterid_, other->svdatacenterid_);
    std::swap(dvphiaccrual_, other->dvphiaccrual_);
    std::swap(svaddress_, other->svaddress_);
    std::swap(ivport_, other->ivport_);
    std::swap(svreader_, other->svreader_);
    std::swap(svwriter_, other->svwriter_);
    std::swap(ivstate_, other->ivstate_);
    std::swap(ivtimestamp_, other->ivtimestamp_);
    std::swap(ivsize_, other->ivsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoGoel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoGoel_descriptor_;
  metadata.reflection = PrtoGoel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoGoss::kCVgossipelementFieldNumber;
#endif  // !_MSC_VER

PrtoGoss::PrtoGoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoGoss)
}

void PrtoGoss::InitAsDefaultInstance() {
}

PrtoGoss::PrtoGoss(const PrtoGoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoGoss)
}

void PrtoGoss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoGoss::~PrtoGoss() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoGoss)
  SharedDtor();
}

void PrtoGoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoGoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoGoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoGoss_descriptor_;
}

const PrtoGoss& PrtoGoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoGoss* PrtoGoss::default_instance_ = NULL;

PrtoGoss* PrtoGoss::New() const {
  return new PrtoGoss;
}

void PrtoGoss::Clear() {
  cvgossipelement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoGoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoGoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoGoel cVgossipelement = 1;
      case 1: {
        if (tag == 10) {
         parse_cVgossipelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvgossipelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVgossipelement;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoGoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoGoss)
  return false;
#undef DO_
}

void PrtoGoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoGoss)
  // repeated .com.tomting.orion.PrtoGoel cVgossipelement = 1;
  for (int i = 0; i < this->cvgossipelement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvgossipelement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoGoss)
}

::google::protobuf::uint8* PrtoGoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoGoss)
  // repeated .com.tomting.orion.PrtoGoel cVgossipelement = 1;
  for (int i = 0; i < this->cvgossipelement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvgossipelement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoGoss)
  return target;
}

int PrtoGoss::ByteSize() const {
  int total_size = 0;

  // repeated .com.tomting.orion.PrtoGoel cVgossipelement = 1;
  total_size += 1 * this->cvgossipelement_size();
  for (int i = 0; i < this->cvgossipelement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvgossipelement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoGoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoGoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoGoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoGoss::MergeFrom(const PrtoGoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvgossipelement_.MergeFrom(from.cvgossipelement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoGoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoGoss::CopyFrom(const PrtoGoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoGoss::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvgossipelement())) return false;
  return true;
}

void PrtoGoss::Swap(PrtoGoss* other) {
  if (other != this) {
    cvgossipelement_.Swap(&other->cvgossipelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoGoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoGoss_descriptor_;
  metadata.reflection = PrtoGoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoGosr::kCVgossipelementFieldNumber;
#endif  // !_MSC_VER

PrtoGosr::PrtoGosr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoGosr)
}

void PrtoGosr::InitAsDefaultInstance() {
  cvgossipelement_ = const_cast< ::com::tomting::orion::PrtoGoel*>(&::com::tomting::orion::PrtoGoel::default_instance());
}

PrtoGosr::PrtoGosr(const PrtoGosr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoGosr)
}

void PrtoGosr::SharedCtor() {
  _cached_size_ = 0;
  cvgossipelement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoGosr::~PrtoGosr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoGosr)
  SharedDtor();
}

void PrtoGosr::SharedDtor() {
  if (this != default_instance_) {
    delete cvgossipelement_;
  }
}

void PrtoGosr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoGosr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoGosr_descriptor_;
}

const PrtoGosr& PrtoGosr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoGosr* PrtoGosr::default_instance_ = NULL;

PrtoGosr* PrtoGosr::New() const {
  return new PrtoGosr;
}

void PrtoGosr::Clear() {
  if (has_cvgossipelement()) {
    if (cvgossipelement_ != NULL) cvgossipelement_->::com::tomting::orion::PrtoGoel::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoGosr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoGosr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.PrtoGoel cVgossipelement = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvgossipelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoGosr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoGosr)
  return false;
#undef DO_
}

void PrtoGosr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoGosr)
  // required .com.tomting.orion.PrtoGoel cVgossipelement = 1;
  if (has_cvgossipelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvgossipelement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoGosr)
}

::google::protobuf::uint8* PrtoGosr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoGosr)
  // required .com.tomting.orion.PrtoGoel cVgossipelement = 1;
  if (has_cvgossipelement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvgossipelement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoGosr)
  return target;
}

int PrtoGosr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.PrtoGoel cVgossipelement = 1;
    if (has_cvgossipelement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvgossipelement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoGosr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoGosr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoGosr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoGosr::MergeFrom(const PrtoGosr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cvgossipelement()) {
      mutable_cvgossipelement()->::com::tomting::orion::PrtoGoel::MergeFrom(from.cvgossipelement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoGosr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoGosr::CopyFrom(const PrtoGosr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoGosr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cvgossipelement()) {
    if (!this->cvgossipelement().IsInitialized()) return false;
  }
  return true;
}

void PrtoGosr::Swap(PrtoGosr* other) {
  if (other != this) {
    std::swap(cvgossipelement_, other->cvgossipelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoGosr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoGosr_descriptor_;
  metadata.reflection = PrtoGosr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoHiha::kSVnodeFieldNumber;
const int PrtoHiha::kCVstatementsFieldNumber;
#endif  // !_MSC_VER

PrtoHiha::PrtoHiha()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoHiha)
}

void PrtoHiha::InitAsDefaultInstance() {
  cvstatements_ = const_cast< ::com::tomting::orion::PrtoLsts*>(&::com::tomting::orion::PrtoLsts::default_instance());
}

PrtoHiha::PrtoHiha(const PrtoHiha& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoHiha)
}

void PrtoHiha::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svnode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvstatements_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoHiha::~PrtoHiha() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoHiha)
  SharedDtor();
}

void PrtoHiha::SharedDtor() {
  if (svnode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnode_;
  }
  if (this != default_instance_) {
    delete cvstatements_;
  }
}

void PrtoHiha::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoHiha::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoHiha_descriptor_;
}

const PrtoHiha& PrtoHiha::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoHiha* PrtoHiha::default_instance_ = NULL;

PrtoHiha* PrtoHiha::New() const {
  return new PrtoHiha;
}

void PrtoHiha::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_svnode()) {
      if (svnode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnode_->clear();
      }
    }
    if (has_cvstatements()) {
      if (cvstatements_ != NULL) cvstatements_->::com::tomting::orion::PrtoLsts::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoHiha::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoHiha)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVnode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVstatements;
        break;
      }

      // required .com.tomting.orion.PrtoLsts cVstatements = 2;
      case 2: {
        if (tag == 18) {
         parse_cVstatements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvstatements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoHiha)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoHiha)
  return false;
#undef DO_
}

void PrtoHiha::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoHiha)
  // required bytes sVnode = 1;
  if (has_svnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svnode(), output);
  }

  // required .com.tomting.orion.PrtoLsts cVstatements = 2;
  if (has_cvstatements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvstatements(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoHiha)
}

::google::protobuf::uint8* PrtoHiha::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoHiha)
  // required bytes sVnode = 1;
  if (has_svnode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svnode(), target);
  }

  // required .com.tomting.orion.PrtoLsts cVstatements = 2;
  if (has_cvstatements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvstatements(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoHiha)
  return target;
}

int PrtoHiha::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVnode = 1;
    if (has_svnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnode());
    }

    // required .com.tomting.orion.PrtoLsts cVstatements = 2;
    if (has_cvstatements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvstatements());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoHiha::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoHiha* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoHiha*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoHiha::MergeFrom(const PrtoHiha& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svnode()) {
      set_svnode(from.svnode());
    }
    if (from.has_cvstatements()) {
      mutable_cvstatements()->::com::tomting::orion::PrtoLsts::MergeFrom(from.cvstatements());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoHiha::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoHiha::CopyFrom(const PrtoHiha& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoHiha::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cvstatements()) {
    if (!this->cvstatements().IsInitialized()) return false;
  }
  return true;
}

void PrtoHiha::Swap(PrtoHiha* other) {
  if (other != this) {
    std::swap(svnode_, other->svnode_);
    std::swap(cvstatements_, other->cvstatements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoHiha::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoHiha_descriptor_;
  metadata.reflection = PrtoHiha_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoPtel::kSVnodeidFieldNumber;
const int PrtoPtel::kSVboundFieldNumber;
#endif  // !_MSC_VER

PrtoPtel::PrtoPtel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoPtel)
}

void PrtoPtel::InitAsDefaultInstance() {
}

PrtoPtel::PrtoPtel(const PrtoPtel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoPtel)
}

void PrtoPtel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svnodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svbound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoPtel::~PrtoPtel() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoPtel)
  SharedDtor();
}

void PrtoPtel::SharedDtor() {
  if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnodeid_;
  }
  if (svbound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svbound_;
  }
  if (this != default_instance_) {
  }
}

void PrtoPtel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoPtel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoPtel_descriptor_;
}

const PrtoPtel& PrtoPtel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoPtel* PrtoPtel::default_instance_ = NULL;

PrtoPtel* PrtoPtel::New() const {
  return new PrtoPtel;
}

void PrtoPtel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_svnodeid()) {
      if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnodeid_->clear();
      }
    }
    if (has_svbound()) {
      if (svbound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svbound_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoPtel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoPtel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVnodeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnodeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVbound;
        break;
      }

      // required bytes sVbound = 2;
      case 2: {
        if (tag == 18) {
         parse_sVbound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svbound()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoPtel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoPtel)
  return false;
#undef DO_
}

void PrtoPtel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoPtel)
  // required bytes sVnodeid = 1;
  if (has_svnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svnodeid(), output);
  }

  // required bytes sVbound = 2;
  if (has_svbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svbound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoPtel)
}

::google::protobuf::uint8* PrtoPtel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoPtel)
  // required bytes sVnodeid = 1;
  if (has_svnodeid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svnodeid(), target);
  }

  // required bytes sVbound = 2;
  if (has_svbound()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svbound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoPtel)
  return target;
}

int PrtoPtel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVnodeid = 1;
    if (has_svnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnodeid());
    }

    // required bytes sVbound = 2;
    if (has_svbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svbound());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoPtel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoPtel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoPtel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoPtel::MergeFrom(const PrtoPtel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svnodeid()) {
      set_svnodeid(from.svnodeid());
    }
    if (from.has_svbound()) {
      set_svbound(from.svbound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoPtel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoPtel::CopyFrom(const PrtoPtel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoPtel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrtoPtel::Swap(PrtoPtel* other) {
  if (other != this) {
    std::swap(svnodeid_, other->svnodeid_);
    std::swap(svbound_, other->svbound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoPtel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoPtel_descriptor_;
  metadata.reflection = PrtoPtel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoStel::kIVcountFieldNumber;
const int PrtoStel::kIVmeandelayFieldNumber;
const int PrtoStel::kIVworstdelayFieldNumber;
const int PrtoStel::kIVsizeFieldNumber;
const int PrtoStel::kIVelapsedFieldNumber;
#endif  // !_MSC_VER

PrtoStel::PrtoStel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoStel)
}

void PrtoStel::InitAsDefaultInstance() {
}

PrtoStel::PrtoStel(const PrtoStel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoStel)
}

void PrtoStel::SharedCtor() {
  _cached_size_ = 0;
  ivcount_ = GOOGLE_LONGLONG(0);
  ivmeandelay_ = 0;
  ivworstdelay_ = 0;
  ivsize_ = GOOGLE_LONGLONG(0);
  ivelapsed_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoStel::~PrtoStel() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoStel)
  SharedDtor();
}

void PrtoStel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoStel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoStel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoStel_descriptor_;
}

const PrtoStel& PrtoStel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoStel* PrtoStel::default_instance_ = NULL;

PrtoStel* PrtoStel::New() const {
  return new PrtoStel;
}

void PrtoStel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoStel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ivcount_, ivelapsed_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoStel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoStel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 iVcount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivcount_)));
          set_has_ivcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVmeandelay;
        break;
      }

      // required int32 iVmeandelay = 2;
      case 2: {
        if (tag == 16) {
         parse_iVmeandelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivmeandelay_)));
          set_has_ivmeandelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVworstdelay;
        break;
      }

      // required int32 iVworstdelay = 3;
      case 3: {
        if (tag == 24) {
         parse_iVworstdelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivworstdelay_)));
          set_has_ivworstdelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVsize;
        break;
      }

      // required int64 iVsize = 4;
      case 4: {
        if (tag == 32) {
         parse_iVsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivsize_)));
          set_has_ivsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVelapsed;
        break;
      }

      // optional int64 iVelapsed = 5;
      case 5: {
        if (tag == 40) {
         parse_iVelapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivelapsed_)));
          set_has_ivelapsed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoStel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoStel)
  return false;
#undef DO_
}

void PrtoStel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoStel)
  // required int64 iVcount = 1;
  if (has_ivcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ivcount(), output);
  }

  // required int32 iVmeandelay = 2;
  if (has_ivmeandelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ivmeandelay(), output);
  }

  // required int32 iVworstdelay = 3;
  if (has_ivworstdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ivworstdelay(), output);
  }

  // required int64 iVsize = 4;
  if (has_ivsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ivsize(), output);
  }

  // optional int64 iVelapsed = 5;
  if (has_ivelapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ivelapsed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoStel)
}

::google::protobuf::uint8* PrtoStel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoStel)
  // required int64 iVcount = 1;
  if (has_ivcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ivcount(), target);
  }

  // required int32 iVmeandelay = 2;
  if (has_ivmeandelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ivmeandelay(), target);
  }

  // required int32 iVworstdelay = 3;
  if (has_ivworstdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ivworstdelay(), target);
  }

  // required int64 iVsize = 4;
  if (has_ivsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ivsize(), target);
  }

  // optional int64 iVelapsed = 5;
  if (has_ivelapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ivelapsed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoStel)
  return target;
}

int PrtoStel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 iVcount = 1;
    if (has_ivcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivcount());
    }

    // required int32 iVmeandelay = 2;
    if (has_ivmeandelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivmeandelay());
    }

    // required int32 iVworstdelay = 3;
    if (has_ivworstdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivworstdelay());
    }

    // required int64 iVsize = 4;
    if (has_ivsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivsize());
    }

    // optional int64 iVelapsed = 5;
    if (has_ivelapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivelapsed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoStel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoStel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoStel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoStel::MergeFrom(const PrtoStel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivcount()) {
      set_ivcount(from.ivcount());
    }
    if (from.has_ivmeandelay()) {
      set_ivmeandelay(from.ivmeandelay());
    }
    if (from.has_ivworstdelay()) {
      set_ivworstdelay(from.ivworstdelay());
    }
    if (from.has_ivsize()) {
      set_ivsize(from.ivsize());
    }
    if (from.has_ivelapsed()) {
      set_ivelapsed(from.ivelapsed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoStel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoStel::CopyFrom(const PrtoStel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoStel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PrtoStel::Swap(PrtoStel* other) {
  if (other != this) {
    std::swap(ivcount_, other->ivcount_);
    std::swap(ivmeandelay_, other->ivmeandelay_);
    std::swap(ivworstdelay_, other->ivworstdelay_);
    std::swap(ivsize_, other->ivsize_);
    std::swap(ivelapsed_, other->ivelapsed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoStel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoStel_descriptor_;
  metadata.reflection = PrtoStel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoTlel::kIVtablettypeFieldNumber;
const int PrtoTlel::kSVnameFieldNumber;
const int PrtoTlel::kBVvalidFieldNumber;
const int PrtoTlel::kBVneedcompactionFieldNumber;
const int PrtoTlel::kBVvalidasmemorytableFieldNumber;
const int PrtoTlel::kIVcompactionlevelFieldNumber;
const int PrtoTlel::kSVmemorytableFieldNumber;
const int PrtoTlel::kIVresFieldNumber;
const int PrtoTlel::kIVmappedFieldNumber;
const int PrtoTlel::kIVsizeFieldNumber;
const int PrtoTlel::kIVcountFieldNumber;
const int PrtoTlel::kSVredotimestampFieldNumber;
const int PrtoTlel::kIVsstabletypeFieldNumber;
#endif  // !_MSC_VER

PrtoTlel::PrtoTlel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoTlel)
}

void PrtoTlel::InitAsDefaultInstance() {
}

PrtoTlel::PrtoTlel(const PrtoTlel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoTlel)
}

void PrtoTlel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ivtablettype_ = 0;
  svname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bvvalid_ = false;
  bvneedcompaction_ = false;
  bvvalidasmemorytable_ = false;
  ivcompactionlevel_ = 0;
  svmemorytable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivres_ = GOOGLE_LONGLONG(0);
  ivmapped_ = GOOGLE_LONGLONG(0);
  ivsize_ = GOOGLE_LONGLONG(0);
  ivcount_ = GOOGLE_LONGLONG(0);
  svredotimestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivsstabletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoTlel::~PrtoTlel() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoTlel)
  SharedDtor();
}

void PrtoTlel::SharedDtor() {
  if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svname_;
  }
  if (svmemorytable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svmemorytable_;
  }
  if (svredotimestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svredotimestamp_;
  }
  if (this != default_instance_) {
  }
}

void PrtoTlel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoTlel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoTlel_descriptor_;
}

const PrtoTlel& PrtoTlel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoTlel* PrtoTlel::default_instance_ = NULL;

PrtoTlel* PrtoTlel::New() const {
  return new PrtoTlel;
}

void PrtoTlel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoTlel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ivtablettype_, bvvalidasmemorytable_);
    if (has_svname()) {
      if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svname_->clear();
      }
    }
    ivcompactionlevel_ = 0;
    if (has_svmemorytable()) {
      if (svmemorytable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svmemorytable_->clear();
      }
    }
    ivres_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(ivsstabletype_, ivcount_);
    ivmapped_ = GOOGLE_LONGLONG(0);
    if (has_svredotimestamp()) {
      if (svredotimestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svredotimestamp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoTlel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoTlel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.iCtablettype iVtablettype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCtablettype_IsValid(value)) {
            set_ivtablettype(static_cast< ::com::tomting::orion::iCtablettype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVname;
        break;
      }

      // required bytes sVname = 2;
      case 2: {
        if (tag == 18) {
         parse_sVname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bVvalid;
        break;
      }

      // required bool bVvalid = 3;
      case 3: {
        if (tag == 24) {
         parse_bVvalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvvalid_)));
          set_has_bvvalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bVneedcompaction;
        break;
      }

      // required bool bVneedcompaction = 4;
      case 4: {
        if (tag == 32) {
         parse_bVneedcompaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvneedcompaction_)));
          set_has_bvneedcompaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bVvalidasmemorytable;
        break;
      }

      // required bool bVvalidasmemorytable = 5;
      case 5: {
        if (tag == 40) {
         parse_bVvalidasmemorytable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvvalidasmemorytable_)));
          set_has_bvvalidasmemorytable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iVcompactionlevel;
        break;
      }

      // required int32 iVcompactionlevel = 6;
      case 6: {
        if (tag == 48) {
         parse_iVcompactionlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivcompactionlevel_)));
          set_has_ivcompactionlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sVmemorytable;
        break;
      }

      // required bytes sVmemorytable = 7;
      case 7: {
        if (tag == 58) {
         parse_sVmemorytable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svmemorytable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_iVres;
        break;
      }

      // required int64 iVres = 8;
      case 8: {
        if (tag == 64) {
         parse_iVres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivres_)));
          set_has_ivres();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_iVmapped;
        break;
      }

      // required int64 iVmapped = 9;
      case 9: {
        if (tag == 72) {
         parse_iVmapped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivmapped_)));
          set_has_ivmapped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_iVsize;
        break;
      }

      // required int64 iVsize = 10;
      case 10: {
        if (tag == 80) {
         parse_iVsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivsize_)));
          set_has_ivsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_iVcount;
        break;
      }

      // required int64 iVcount = 11;
      case 11: {
        if (tag == 88) {
         parse_iVcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivcount_)));
          set_has_ivcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sVredotimestamp;
        break;
      }

      // required bytes sVredotimestamp = 12;
      case 12: {
        if (tag == 98) {
         parse_sVredotimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svredotimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_iVsstabletype;
        break;
      }

      // required int32 iVsstabletype = 13;
      case 13: {
        if (tag == 104) {
         parse_iVsstabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivsstabletype_)));
          set_has_ivsstabletype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoTlel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoTlel)
  return false;
#undef DO_
}

void PrtoTlel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoTlel)
  // required .com.tomting.orion.iCtablettype iVtablettype = 1;
  if (has_ivtablettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivtablettype(), output);
  }

  // required bytes sVname = 2;
  if (has_svname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svname(), output);
  }

  // required bool bVvalid = 3;
  if (has_bvvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bvvalid(), output);
  }

  // required bool bVneedcompaction = 4;
  if (has_bvneedcompaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bvneedcompaction(), output);
  }

  // required bool bVvalidasmemorytable = 5;
  if (has_bvvalidasmemorytable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bvvalidasmemorytable(), output);
  }

  // required int32 iVcompactionlevel = 6;
  if (has_ivcompactionlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ivcompactionlevel(), output);
  }

  // required bytes sVmemorytable = 7;
  if (has_svmemorytable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->svmemorytable(), output);
  }

  // required int64 iVres = 8;
  if (has_ivres()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ivres(), output);
  }

  // required int64 iVmapped = 9;
  if (has_ivmapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->ivmapped(), output);
  }

  // required int64 iVsize = 10;
  if (has_ivsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ivsize(), output);
  }

  // required int64 iVcount = 11;
  if (has_ivcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ivcount(), output);
  }

  // required bytes sVredotimestamp = 12;
  if (has_svredotimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->svredotimestamp(), output);
  }

  // required int32 iVsstabletype = 13;
  if (has_ivsstabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ivsstabletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoTlel)
}

::google::protobuf::uint8* PrtoTlel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoTlel)
  // required .com.tomting.orion.iCtablettype iVtablettype = 1;
  if (has_ivtablettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivtablettype(), target);
  }

  // required bytes sVname = 2;
  if (has_svname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svname(), target);
  }

  // required bool bVvalid = 3;
  if (has_bvvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bvvalid(), target);
  }

  // required bool bVneedcompaction = 4;
  if (has_bvneedcompaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bvneedcompaction(), target);
  }

  // required bool bVvalidasmemorytable = 5;
  if (has_bvvalidasmemorytable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bvvalidasmemorytable(), target);
  }

  // required int32 iVcompactionlevel = 6;
  if (has_ivcompactionlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ivcompactionlevel(), target);
  }

  // required bytes sVmemorytable = 7;
  if (has_svmemorytable()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->svmemorytable(), target);
  }

  // required int64 iVres = 8;
  if (has_ivres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->ivres(), target);
  }

  // required int64 iVmapped = 9;
  if (has_ivmapped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->ivmapped(), target);
  }

  // required int64 iVsize = 10;
  if (has_ivsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ivsize(), target);
  }

  // required int64 iVcount = 11;
  if (has_ivcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ivcount(), target);
  }

  // required bytes sVredotimestamp = 12;
  if (has_svredotimestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->svredotimestamp(), target);
  }

  // required int32 iVsstabletype = 13;
  if (has_ivsstabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ivsstabletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoTlel)
  return target;
}

int PrtoTlel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.iCtablettype iVtablettype = 1;
    if (has_ivtablettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivtablettype());
    }

    // required bytes sVname = 2;
    if (has_svname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svname());
    }

    // required bool bVvalid = 3;
    if (has_bvvalid()) {
      total_size += 1 + 1;
    }

    // required bool bVneedcompaction = 4;
    if (has_bvneedcompaction()) {
      total_size += 1 + 1;
    }

    // required bool bVvalidasmemorytable = 5;
    if (has_bvvalidasmemorytable()) {
      total_size += 1 + 1;
    }

    // required int32 iVcompactionlevel = 6;
    if (has_ivcompactionlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivcompactionlevel());
    }

    // required bytes sVmemorytable = 7;
    if (has_svmemorytable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svmemorytable());
    }

    // required int64 iVres = 8;
    if (has_ivres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivres());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 iVmapped = 9;
    if (has_ivmapped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivmapped());
    }

    // required int64 iVsize = 10;
    if (has_ivsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivsize());
    }

    // required int64 iVcount = 11;
    if (has_ivcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivcount());
    }

    // required bytes sVredotimestamp = 12;
    if (has_svredotimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svredotimestamp());
    }

    // required int32 iVsstabletype = 13;
    if (has_ivsstabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivsstabletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoTlel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoTlel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoTlel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoTlel::MergeFrom(const PrtoTlel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivtablettype()) {
      set_ivtablettype(from.ivtablettype());
    }
    if (from.has_svname()) {
      set_svname(from.svname());
    }
    if (from.has_bvvalid()) {
      set_bvvalid(from.bvvalid());
    }
    if (from.has_bvneedcompaction()) {
      set_bvneedcompaction(from.bvneedcompaction());
    }
    if (from.has_bvvalidasmemorytable()) {
      set_bvvalidasmemorytable(from.bvvalidasmemorytable());
    }
    if (from.has_ivcompactionlevel()) {
      set_ivcompactionlevel(from.ivcompactionlevel());
    }
    if (from.has_svmemorytable()) {
      set_svmemorytable(from.svmemorytable());
    }
    if (from.has_ivres()) {
      set_ivres(from.ivres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ivmapped()) {
      set_ivmapped(from.ivmapped());
    }
    if (from.has_ivsize()) {
      set_ivsize(from.ivsize());
    }
    if (from.has_ivcount()) {
      set_ivcount(from.ivcount());
    }
    if (from.has_svredotimestamp()) {
      set_svredotimestamp(from.svredotimestamp());
    }
    if (from.has_ivsstabletype()) {
      set_ivsstabletype(from.ivsstabletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoTlel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoTlel::CopyFrom(const PrtoTlel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoTlel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void PrtoTlel::Swap(PrtoTlel* other) {
  if (other != this) {
    std::swap(ivtablettype_, other->ivtablettype_);
    std::swap(svname_, other->svname_);
    std::swap(bvvalid_, other->bvvalid_);
    std::swap(bvneedcompaction_, other->bvneedcompaction_);
    std::swap(bvvalidasmemorytable_, other->bvvalidasmemorytable_);
    std::swap(ivcompactionlevel_, other->ivcompactionlevel_);
    std::swap(svmemorytable_, other->svmemorytable_);
    std::swap(ivres_, other->ivres_);
    std::swap(ivmapped_, other->ivmapped_);
    std::swap(ivsize_, other->ivsize_);
    std::swap(ivcount_, other->ivcount_);
    std::swap(svredotimestamp_, other->svredotimestamp_);
    std::swap(ivsstabletype_, other->ivsstabletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoTlel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoTlel_descriptor_;
  metadata.reflection = PrtoTlel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoTabl::kSVxmlFieldNumber;
const int PrtoTabl::kCVpartitionedelementsFieldNumber;
const int PrtoTabl::kCVpartitionedindexelementsFieldNumber;
const int PrtoTabl::kCVtabletelementFieldNumber;
const int PrtoTabl::kCVindextabletelementFieldNumber;
const int PrtoTabl::kSVjoincustompartitionFieldNumber;
const int PrtoTabl::kSVjoincustompartitionindexFieldNumber;
const int PrtoTabl::kSVpartitiontypeFieldNumber;
#endif  // !_MSC_VER

PrtoTabl::PrtoTabl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoTabl)
}

void PrtoTabl::InitAsDefaultInstance() {
}

PrtoTabl::PrtoTabl(const PrtoTabl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoTabl)
}

void PrtoTabl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svxml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svjoincustompartition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svjoincustompartitionindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svpartitiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoTabl::~PrtoTabl() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoTabl)
  SharedDtor();
}

void PrtoTabl::SharedDtor() {
  if (svxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svxml_;
  }
  if (svjoincustompartition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svjoincustompartition_;
  }
  if (svjoincustompartitionindex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svjoincustompartitionindex_;
  }
  if (svpartitiontype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svpartitiontype_;
  }
  if (this != default_instance_) {
  }
}

void PrtoTabl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoTabl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoTabl_descriptor_;
}

const PrtoTabl& PrtoTabl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoTabl* PrtoTabl::default_instance_ = NULL;

PrtoTabl* PrtoTabl::New() const {
  return new PrtoTabl;
}

void PrtoTabl::Clear() {
  if (_has_bits_[0 / 32] & 225) {
    if (has_svxml()) {
      if (svxml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svxml_->clear();
      }
    }
    if (has_svjoincustompartition()) {
      if (svjoincustompartition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svjoincustompartition_->clear();
      }
    }
    if (has_svjoincustompartitionindex()) {
      if (svjoincustompartitionindex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svjoincustompartitionindex_->clear();
      }
    }
    if (has_svpartitiontype()) {
      if (svpartitiontype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svpartitiontype_->clear();
      }
    }
  }
  cvpartitionedelements_.Clear();
  cvpartitionedindexelements_.Clear();
  cvtabletelement_.Clear();
  cvindextabletelement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoTabl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoTabl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVxml = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svxml()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVpartitionedelements;
        break;
      }

      // repeated .com.tomting.orion.PrtoPtel cVpartitionedelements = 2;
      case 2: {
        if (tag == 18) {
         parse_cVpartitionedelements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvpartitionedelements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVpartitionedelements;
        if (input->ExpectTag(26)) goto parse_cVpartitionedindexelements;
        break;
      }

      // repeated .com.tomting.orion.PrtoPtel cVpartitionedindexelements = 3;
      case 3: {
        if (tag == 26) {
         parse_cVpartitionedindexelements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvpartitionedindexelements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVpartitionedindexelements;
        if (input->ExpectTag(34)) goto parse_cVtabletelement;
        break;
      }

      // repeated .com.tomting.orion.PrtoTlel cVtabletelement = 4;
      case 4: {
        if (tag == 34) {
         parse_cVtabletelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvtabletelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVtabletelement;
        if (input->ExpectTag(42)) goto parse_cVindextabletelement;
        break;
      }

      // repeated .com.tomting.orion.PrtoTlel cVindextabletelement = 5;
      case 5: {
        if (tag == 42) {
         parse_cVindextabletelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvindextabletelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cVindextabletelement;
        if (input->ExpectTag(50)) goto parse_sVjoincustompartition;
        break;
      }

      // optional bytes sVjoincustompartition = 6;
      case 6: {
        if (tag == 50) {
         parse_sVjoincustompartition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svjoincustompartition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sVjoincustompartitionindex;
        break;
      }

      // optional bytes sVjoincustompartitionindex = 7;
      case 7: {
        if (tag == 58) {
         parse_sVjoincustompartitionindex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svjoincustompartitionindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sVpartitiontype;
        break;
      }

      // optional bytes sVpartitiontype = 8;
      case 8: {
        if (tag == 66) {
         parse_sVpartitiontype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svpartitiontype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoTabl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoTabl)
  return false;
#undef DO_
}

void PrtoTabl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoTabl)
  // required bytes sVxml = 1;
  if (has_svxml()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svxml(), output);
  }

  // repeated .com.tomting.orion.PrtoPtel cVpartitionedelements = 2;
  for (int i = 0; i < this->cvpartitionedelements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvpartitionedelements(i), output);
  }

  // repeated .com.tomting.orion.PrtoPtel cVpartitionedindexelements = 3;
  for (int i = 0; i < this->cvpartitionedindexelements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvpartitionedindexelements(i), output);
  }

  // repeated .com.tomting.orion.PrtoTlel cVtabletelement = 4;
  for (int i = 0; i < this->cvtabletelement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvtabletelement(i), output);
  }

  // repeated .com.tomting.orion.PrtoTlel cVindextabletelement = 5;
  for (int i = 0; i < this->cvindextabletelement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cvindextabletelement(i), output);
  }

  // optional bytes sVjoincustompartition = 6;
  if (has_svjoincustompartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->svjoincustompartition(), output);
  }

  // optional bytes sVjoincustompartitionindex = 7;
  if (has_svjoincustompartitionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->svjoincustompartitionindex(), output);
  }

  // optional bytes sVpartitiontype = 8;
  if (has_svpartitiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->svpartitiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoTabl)
}

::google::protobuf::uint8* PrtoTabl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoTabl)
  // required bytes sVxml = 1;
  if (has_svxml()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svxml(), target);
  }

  // repeated .com.tomting.orion.PrtoPtel cVpartitionedelements = 2;
  for (int i = 0; i < this->cvpartitionedelements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvpartitionedelements(i), target);
  }

  // repeated .com.tomting.orion.PrtoPtel cVpartitionedindexelements = 3;
  for (int i = 0; i < this->cvpartitionedindexelements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvpartitionedindexelements(i), target);
  }

  // repeated .com.tomting.orion.PrtoTlel cVtabletelement = 4;
  for (int i = 0; i < this->cvtabletelement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvtabletelement(i), target);
  }

  // repeated .com.tomting.orion.PrtoTlel cVindextabletelement = 5;
  for (int i = 0; i < this->cvindextabletelement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cvindextabletelement(i), target);
  }

  // optional bytes sVjoincustompartition = 6;
  if (has_svjoincustompartition()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->svjoincustompartition(), target);
  }

  // optional bytes sVjoincustompartitionindex = 7;
  if (has_svjoincustompartitionindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->svjoincustompartitionindex(), target);
  }

  // optional bytes sVpartitiontype = 8;
  if (has_svpartitiontype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->svpartitiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoTabl)
  return target;
}

int PrtoTabl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVxml = 1;
    if (has_svxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svxml());
    }

    // optional bytes sVjoincustompartition = 6;
    if (has_svjoincustompartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svjoincustompartition());
    }

    // optional bytes sVjoincustompartitionindex = 7;
    if (has_svjoincustompartitionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svjoincustompartitionindex());
    }

    // optional bytes sVpartitiontype = 8;
    if (has_svpartitiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svpartitiontype());
    }

  }
  // repeated .com.tomting.orion.PrtoPtel cVpartitionedelements = 2;
  total_size += 1 * this->cvpartitionedelements_size();
  for (int i = 0; i < this->cvpartitionedelements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvpartitionedelements(i));
  }

  // repeated .com.tomting.orion.PrtoPtel cVpartitionedindexelements = 3;
  total_size += 1 * this->cvpartitionedindexelements_size();
  for (int i = 0; i < this->cvpartitionedindexelements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvpartitionedindexelements(i));
  }

  // repeated .com.tomting.orion.PrtoTlel cVtabletelement = 4;
  total_size += 1 * this->cvtabletelement_size();
  for (int i = 0; i < this->cvtabletelement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvtabletelement(i));
  }

  // repeated .com.tomting.orion.PrtoTlel cVindextabletelement = 5;
  total_size += 1 * this->cvindextabletelement_size();
  for (int i = 0; i < this->cvindextabletelement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvindextabletelement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoTabl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoTabl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoTabl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoTabl::MergeFrom(const PrtoTabl& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvpartitionedelements_.MergeFrom(from.cvpartitionedelements_);
  cvpartitionedindexelements_.MergeFrom(from.cvpartitionedindexelements_);
  cvtabletelement_.MergeFrom(from.cvtabletelement_);
  cvindextabletelement_.MergeFrom(from.cvindextabletelement_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svxml()) {
      set_svxml(from.svxml());
    }
    if (from.has_svjoincustompartition()) {
      set_svjoincustompartition(from.svjoincustompartition());
    }
    if (from.has_svjoincustompartitionindex()) {
      set_svjoincustompartitionindex(from.svjoincustompartitionindex());
    }
    if (from.has_svpartitiontype()) {
      set_svpartitiontype(from.svpartitiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoTabl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoTabl::CopyFrom(const PrtoTabl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoTabl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cvpartitionedelements())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvpartitionedindexelements())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvtabletelement())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cvindextabletelement())) return false;
  return true;
}

void PrtoTabl::Swap(PrtoTabl* other) {
  if (other != this) {
    std::swap(svxml_, other->svxml_);
    cvpartitionedelements_.Swap(&other->cvpartitionedelements_);
    cvpartitionedindexelements_.Swap(&other->cvpartitionedindexelements_);
    cvtabletelement_.Swap(&other->cvtabletelement_);
    cvindextabletelement_.Swap(&other->cvindextabletelement_);
    std::swap(svjoincustompartition_, other->svjoincustompartition_);
    std::swap(svjoincustompartitionindex_, other->svjoincustompartitionindex_);
    std::swap(svpartitiontype_, other->svpartitiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoTabl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoTabl_descriptor_;
  metadata.reflection = PrtoTabl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoAenp::kSVopaquedataFieldNumber;
const int PrtoAenp::kSVnodeidFieldNumber;
const int PrtoAenp::kCVmutableFieldNumber;
const int PrtoAenp::kSVkeystartFieldNumber;
const int PrtoAenp::kIVlimitsizeFieldNumber;
#endif  // !_MSC_VER

PrtoAenp::PrtoAenp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoAenp)
}

void PrtoAenp::InitAsDefaultInstance() {
  cvmutable_ = const_cast< ::com::tomting::orion::PrtoLmtb*>(&::com::tomting::orion::PrtoLmtb::default_instance());
}

PrtoAenp::PrtoAenp(const PrtoAenp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoAenp)
}

void PrtoAenp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svopaquedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svnodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cvmutable_ = NULL;
  svkeystart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivlimitsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoAenp::~PrtoAenp() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoAenp)
  SharedDtor();
}

void PrtoAenp::SharedDtor() {
  if (svopaquedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svopaquedata_;
  }
  if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svnodeid_;
  }
  if (svkeystart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svkeystart_;
  }
  if (this != default_instance_) {
    delete cvmutable_;
  }
}

void PrtoAenp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoAenp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoAenp_descriptor_;
}

const PrtoAenp& PrtoAenp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoAenp* PrtoAenp::default_instance_ = NULL;

PrtoAenp* PrtoAenp::New() const {
  return new PrtoAenp;
}

void PrtoAenp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_svopaquedata()) {
      if (svopaquedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svopaquedata_->clear();
      }
    }
    if (has_svnodeid()) {
      if (svnodeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svnodeid_->clear();
      }
    }
    if (has_cvmutable()) {
      if (cvmutable_ != NULL) cvmutable_->::com::tomting::orion::PrtoLmtb::Clear();
    }
    if (has_svkeystart()) {
      if (svkeystart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svkeystart_->clear();
      }
    }
    ivlimitsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoAenp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoAenp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVopaquedata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svopaquedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sVnodeid;
        break;
      }

      // optional bytes sVnodeid = 2;
      case 2: {
        if (tag == 18) {
         parse_sVnodeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svnodeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVmutable;
        break;
      }

      // optional .com.tomting.orion.PrtoLmtb cVmutable = 3;
      case 3: {
        if (tag == 26) {
         parse_cVmutable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmutable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sVkeystart;
        break;
      }

      // optional bytes sVkeystart = 4;
      case 4: {
        if (tag == 34) {
         parse_sVkeystart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svkeystart()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVlimitsize;
        break;
      }

      // optional int32 iVlimitsize = 5;
      case 5: {
        if (tag == 40) {
         parse_iVlimitsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivlimitsize_)));
          set_has_ivlimitsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoAenp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoAenp)
  return false;
#undef DO_
}

void PrtoAenp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoAenp)
  // required bytes sVopaquedata = 1;
  if (has_svopaquedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svopaquedata(), output);
  }

  // optional bytes sVnodeid = 2;
  if (has_svnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svnodeid(), output);
  }

  // optional .com.tomting.orion.PrtoLmtb cVmutable = 3;
  if (has_cvmutable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvmutable(), output);
  }

  // optional bytes sVkeystart = 4;
  if (has_svkeystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->svkeystart(), output);
  }

  // optional int32 iVlimitsize = 5;
  if (has_ivlimitsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ivlimitsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoAenp)
}

::google::protobuf::uint8* PrtoAenp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoAenp)
  // required bytes sVopaquedata = 1;
  if (has_svopaquedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svopaquedata(), target);
  }

  // optional bytes sVnodeid = 2;
  if (has_svnodeid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svnodeid(), target);
  }

  // optional .com.tomting.orion.PrtoLmtb cVmutable = 3;
  if (has_cvmutable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvmutable(), target);
  }

  // optional bytes sVkeystart = 4;
  if (has_svkeystart()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->svkeystart(), target);
  }

  // optional int32 iVlimitsize = 5;
  if (has_ivlimitsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ivlimitsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoAenp)
  return target;
}

int PrtoAenp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVopaquedata = 1;
    if (has_svopaquedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svopaquedata());
    }

    // optional bytes sVnodeid = 2;
    if (has_svnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svnodeid());
    }

    // optional .com.tomting.orion.PrtoLmtb cVmutable = 3;
    if (has_cvmutable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmutable());
    }

    // optional bytes sVkeystart = 4;
    if (has_svkeystart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svkeystart());
    }

    // optional int32 iVlimitsize = 5;
    if (has_ivlimitsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivlimitsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoAenp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoAenp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoAenp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoAenp::MergeFrom(const PrtoAenp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svopaquedata()) {
      set_svopaquedata(from.svopaquedata());
    }
    if (from.has_svnodeid()) {
      set_svnodeid(from.svnodeid());
    }
    if (from.has_cvmutable()) {
      mutable_cvmutable()->::com::tomting::orion::PrtoLmtb::MergeFrom(from.cvmutable());
    }
    if (from.has_svkeystart()) {
      set_svkeystart(from.svkeystart());
    }
    if (from.has_ivlimitsize()) {
      set_ivlimitsize(from.ivlimitsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoAenp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoAenp::CopyFrom(const PrtoAenp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoAenp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cvmutable()) {
    if (!this->cvmutable().IsInitialized()) return false;
  }
  return true;
}

void PrtoAenp::Swap(PrtoAenp* other) {
  if (other != this) {
    std::swap(svopaquedata_, other->svopaquedata_);
    std::swap(svnodeid_, other->svnodeid_);
    std::swap(cvmutable_, other->cvmutable_);
    std::swap(svkeystart_, other->svkeystart_);
    std::swap(ivlimitsize_, other->ivlimitsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoAenp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoAenp_descriptor_;
  metadata.reflection = PrtoAenp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoTope::kSVtabletFieldNumber;
const int PrtoTope::kIVreadtimeFieldNumber;
const int PrtoTope::kIVwritetimeFieldNumber;
const int PrtoTope::kIVreadcountl2FieldNumber;
const int PrtoTope::kIVwritecountl2FieldNumber;
const int PrtoTope::kIVreadcountl1FieldNumber;
const int PrtoTope::kIVwritecountl1FieldNumber;
#endif  // !_MSC_VER

PrtoTope::PrtoTope()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoTope)
}

void PrtoTope::InitAsDefaultInstance() {
}

PrtoTope::PrtoTope(const PrtoTope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoTope)
}

void PrtoTope::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svtablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivreadtime_ = GOOGLE_LONGLONG(0);
  ivwritetime_ = GOOGLE_LONGLONG(0);
  ivreadcountl2_ = GOOGLE_LONGLONG(0);
  ivwritecountl2_ = GOOGLE_LONGLONG(0);
  ivreadcountl1_ = GOOGLE_LONGLONG(0);
  ivwritecountl1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoTope::~PrtoTope() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoTope)
  SharedDtor();
}

void PrtoTope::SharedDtor() {
  if (svtablet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svtablet_;
  }
  if (this != default_instance_) {
  }
}

void PrtoTope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoTope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoTope_descriptor_;
}

const PrtoTope& PrtoTope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoTope* PrtoTope::default_instance_ = NULL;

PrtoTope* PrtoTope::New() const {
  return new PrtoTope;
}

void PrtoTope::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrtoTope*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ivreadtime_, ivwritecountl1_);
    if (has_svtablet()) {
      if (svtablet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svtablet_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoTope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoTope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sVtablet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svtablet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iVreadtime;
        break;
      }

      // optional int64 iVreadtime = 2;
      case 2: {
        if (tag == 16) {
         parse_iVreadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivreadtime_)));
          set_has_ivreadtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iVwritetime;
        break;
      }

      // optional int64 iVwritetime = 3;
      case 3: {
        if (tag == 24) {
         parse_iVwritetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivwritetime_)));
          set_has_ivwritetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iVreadcountl2;
        break;
      }

      // optional int64 iVreadcountl2 = 4;
      case 4: {
        if (tag == 32) {
         parse_iVreadcountl2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivreadcountl2_)));
          set_has_ivreadcountl2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iVwritecountl2;
        break;
      }

      // optional int64 iVwritecountl2 = 5;
      case 5: {
        if (tag == 40) {
         parse_iVwritecountl2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivwritecountl2_)));
          set_has_ivwritecountl2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iVreadcountl1;
        break;
      }

      // optional int64 iVreadcountl1 = 6;
      case 6: {
        if (tag == 48) {
         parse_iVreadcountl1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivreadcountl1_)));
          set_has_ivreadcountl1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iVwritecountl1;
        break;
      }

      // optional int64 iVwritecountl1 = 7;
      case 7: {
        if (tag == 56) {
         parse_iVwritecountl1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivwritecountl1_)));
          set_has_ivwritecountl1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoTope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoTope)
  return false;
#undef DO_
}

void PrtoTope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoTope)
  // required bytes sVtablet = 1;
  if (has_svtablet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->svtablet(), output);
  }

  // optional int64 iVreadtime = 2;
  if (has_ivreadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ivreadtime(), output);
  }

  // optional int64 iVwritetime = 3;
  if (has_ivwritetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ivwritetime(), output);
  }

  // optional int64 iVreadcountl2 = 4;
  if (has_ivreadcountl2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ivreadcountl2(), output);
  }

  // optional int64 iVwritecountl2 = 5;
  if (has_ivwritecountl2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ivwritecountl2(), output);
  }

  // optional int64 iVreadcountl1 = 6;
  if (has_ivreadcountl1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ivreadcountl1(), output);
  }

  // optional int64 iVwritecountl1 = 7;
  if (has_ivwritecountl1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ivwritecountl1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoTope)
}

::google::protobuf::uint8* PrtoTope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoTope)
  // required bytes sVtablet = 1;
  if (has_svtablet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->svtablet(), target);
  }

  // optional int64 iVreadtime = 2;
  if (has_ivreadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ivreadtime(), target);
  }

  // optional int64 iVwritetime = 3;
  if (has_ivwritetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ivwritetime(), target);
  }

  // optional int64 iVreadcountl2 = 4;
  if (has_ivreadcountl2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ivreadcountl2(), target);
  }

  // optional int64 iVwritecountl2 = 5;
  if (has_ivwritecountl2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ivwritecountl2(), target);
  }

  // optional int64 iVreadcountl1 = 6;
  if (has_ivreadcountl1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ivreadcountl1(), target);
  }

  // optional int64 iVwritecountl1 = 7;
  if (has_ivwritecountl1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ivwritecountl1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoTope)
  return target;
}

int PrtoTope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sVtablet = 1;
    if (has_svtablet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svtablet());
    }

    // optional int64 iVreadtime = 2;
    if (has_ivreadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivreadtime());
    }

    // optional int64 iVwritetime = 3;
    if (has_ivwritetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivwritetime());
    }

    // optional int64 iVreadcountl2 = 4;
    if (has_ivreadcountl2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivreadcountl2());
    }

    // optional int64 iVwritecountl2 = 5;
    if (has_ivwritecountl2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivwritecountl2());
    }

    // optional int64 iVreadcountl1 = 6;
    if (has_ivreadcountl1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivreadcountl1());
    }

    // optional int64 iVwritecountl1 = 7;
    if (has_ivwritecountl1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivwritecountl1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoTope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoTope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoTope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoTope::MergeFrom(const PrtoTope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svtablet()) {
      set_svtablet(from.svtablet());
    }
    if (from.has_ivreadtime()) {
      set_ivreadtime(from.ivreadtime());
    }
    if (from.has_ivwritetime()) {
      set_ivwritetime(from.ivwritetime());
    }
    if (from.has_ivreadcountl2()) {
      set_ivreadcountl2(from.ivreadcountl2());
    }
    if (from.has_ivwritecountl2()) {
      set_ivwritecountl2(from.ivwritecountl2());
    }
    if (from.has_ivreadcountl1()) {
      set_ivreadcountl1(from.ivreadcountl1());
    }
    if (from.has_ivwritecountl1()) {
      set_ivwritecountl1(from.ivwritecountl1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoTope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoTope::CopyFrom(const PrtoTope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoTope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrtoTope::Swap(PrtoTope* other) {
  if (other != this) {
    std::swap(svtablet_, other->svtablet_);
    std::swap(ivreadtime_, other->ivreadtime_);
    std::swap(ivwritetime_, other->ivwritetime_);
    std::swap(ivreadcountl2_, other->ivreadcountl2_);
    std::swap(ivwritecountl2_, other->ivwritecountl2_);
    std::swap(ivreadcountl1_, other->ivreadcountl1_);
    std::swap(ivwritecountl1_, other->ivwritecountl1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoTope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoTope_descriptor_;
  metadata.reflection = PrtoTope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoTop_::kIVtimestampFieldNumber;
const int PrtoTop_::kCVtopelementFieldNumber;
#endif  // !_MSC_VER

PrtoTop_::PrtoTop_()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoTop_)
}

void PrtoTop_::InitAsDefaultInstance() {
}

PrtoTop_::PrtoTop_(const PrtoTop_& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoTop_)
}

void PrtoTop_::SharedCtor() {
  _cached_size_ = 0;
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoTop_::~PrtoTop_() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoTop_)
  SharedDtor();
}

void PrtoTop_::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtoTop_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoTop_::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoTop__descriptor_;
}

const PrtoTop_& PrtoTop_::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoTop_* PrtoTop_::default_instance_ = NULL;

PrtoTop_* PrtoTop_::New() const {
  return new PrtoTop_;
}

void PrtoTop_::Clear() {
  ivtimestamp_ = GOOGLE_LONGLONG(0);
  cvtopelement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoTop_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoTop_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 iVtimestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivtimestamp_)));
          set_has_ivtimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVtopelement;
        break;
      }

      // repeated .com.tomting.orion.PrtoTope cVtopelement = 2;
      case 2: {
        if (tag == 18) {
         parse_cVtopelement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvtopelement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVtopelement;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoTop_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoTop_)
  return false;
#undef DO_
}

void PrtoTop_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoTop_)
  // optional int64 iVtimestamp = 1;
  if (has_ivtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ivtimestamp(), output);
  }

  // repeated .com.tomting.orion.PrtoTope cVtopelement = 2;
  for (int i = 0; i < this->cvtopelement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvtopelement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoTop_)
}

::google::protobuf::uint8* PrtoTop_::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoTop_)
  // optional int64 iVtimestamp = 1;
  if (has_ivtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ivtimestamp(), target);
  }

  // repeated .com.tomting.orion.PrtoTope cVtopelement = 2;
  for (int i = 0; i < this->cvtopelement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvtopelement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoTop_)
  return target;
}

int PrtoTop_::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 iVtimestamp = 1;
    if (has_ivtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivtimestamp());
    }

  }
  // repeated .com.tomting.orion.PrtoTope cVtopelement = 2;
  total_size += 1 * this->cvtopelement_size();
  for (int i = 0; i < this->cvtopelement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvtopelement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoTop_::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoTop_* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoTop_*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoTop_::MergeFrom(const PrtoTop_& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvtopelement_.MergeFrom(from.cvtopelement_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivtimestamp()) {
      set_ivtimestamp(from.ivtimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoTop_::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoTop_::CopyFrom(const PrtoTop_& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoTop_::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvtopelement())) return false;
  return true;
}

void PrtoTop_::Swap(PrtoTop_* other) {
  if (other != this) {
    std::swap(ivtimestamp_, other->ivtimestamp_);
    cvtopelement_.Swap(&other->cvtopelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoTop_::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoTop__descriptor_;
  metadata.reflection = PrtoTop__reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoSrvc::kIVservicetypeFieldNumber;
const int PrtoSrvc::kCVqueryFieldNumber;
const int PrtoSrvc::kCVstatementFieldNumber;
const int PrtoSrvc::kCVosqlFieldNumber;
#endif  // !_MSC_VER

PrtoSrvc::PrtoSrvc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoSrvc)
}

void PrtoSrvc::InitAsDefaultInstance() {
  cvquery_ = const_cast< ::com::tomting::orion::PrtoL2qr*>(&::com::tomting::orion::PrtoL2qr::default_instance());
  cvstatement_ = const_cast< ::com::tomting::orion::PrtoL2st*>(&::com::tomting::orion::PrtoL2st::default_instance());
  cvosql_ = const_cast< ::com::tomting::orion::PrtoL2os*>(&::com::tomting::orion::PrtoL2os::default_instance());
}

PrtoSrvc::PrtoSrvc(const PrtoSrvc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoSrvc)
}

void PrtoSrvc::SharedCtor() {
  _cached_size_ = 0;
  ivservicetype_ = 0;
  cvquery_ = NULL;
  cvstatement_ = NULL;
  cvosql_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoSrvc::~PrtoSrvc() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoSrvc)
  SharedDtor();
}

void PrtoSrvc::SharedDtor() {
  if (this != default_instance_) {
    delete cvquery_;
    delete cvstatement_;
    delete cvosql_;
  }
}

void PrtoSrvc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoSrvc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoSrvc_descriptor_;
}

const PrtoSrvc& PrtoSrvc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoSrvc* PrtoSrvc::default_instance_ = NULL;

PrtoSrvc* PrtoSrvc::New() const {
  return new PrtoSrvc;
}

void PrtoSrvc::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    ivservicetype_ = 0;
    if (has_cvquery()) {
      if (cvquery_ != NULL) cvquery_->::com::tomting::orion::PrtoL2qr::Clear();
    }
    if (has_cvstatement()) {
      if (cvstatement_ != NULL) cvstatement_->::com::tomting::orion::PrtoL2st::Clear();
    }
    if (has_cvosql()) {
      if (cvosql_ != NULL) cvosql_->::com::tomting::orion::PrtoL2os::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoSrvc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoSrvc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.iCservicetype iVservicetype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCservicetype_IsValid(value)) {
            set_ivservicetype(static_cast< ::com::tomting::orion::iCservicetype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVquery;
        break;
      }

      // optional .com.tomting.orion.PrtoL2qr cVquery = 2;
      case 2: {
        if (tag == 18) {
         parse_cVquery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvquery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVstatement;
        break;
      }

      // optional .com.tomting.orion.PrtoL2st cVstatement = 3;
      case 3: {
        if (tag == 26) {
         parse_cVstatement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvstatement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cVosql;
        break;
      }

      // optional .com.tomting.orion.PrtoL2os cVosql = 4;
      case 4: {
        if (tag == 34) {
         parse_cVosql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvosql()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoSrvc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoSrvc)
  return false;
#undef DO_
}

void PrtoSrvc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoSrvc)
  // required .com.tomting.orion.iCservicetype iVservicetype = 1;
  if (has_ivservicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivservicetype(), output);
  }

  // optional .com.tomting.orion.PrtoL2qr cVquery = 2;
  if (has_cvquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvquery(), output);
  }

  // optional .com.tomting.orion.PrtoL2st cVstatement = 3;
  if (has_cvstatement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvstatement(), output);
  }

  // optional .com.tomting.orion.PrtoL2os cVosql = 4;
  if (has_cvosql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvosql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoSrvc)
}

::google::protobuf::uint8* PrtoSrvc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoSrvc)
  // required .com.tomting.orion.iCservicetype iVservicetype = 1;
  if (has_ivservicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivservicetype(), target);
  }

  // optional .com.tomting.orion.PrtoL2qr cVquery = 2;
  if (has_cvquery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvquery(), target);
  }

  // optional .com.tomting.orion.PrtoL2st cVstatement = 3;
  if (has_cvstatement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvstatement(), target);
  }

  // optional .com.tomting.orion.PrtoL2os cVosql = 4;
  if (has_cvosql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvosql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoSrvc)
  return target;
}

int PrtoSrvc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.iCservicetype iVservicetype = 1;
    if (has_ivservicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivservicetype());
    }

    // optional .com.tomting.orion.PrtoL2qr cVquery = 2;
    if (has_cvquery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvquery());
    }

    // optional .com.tomting.orion.PrtoL2st cVstatement = 3;
    if (has_cvstatement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvstatement());
    }

    // optional .com.tomting.orion.PrtoL2os cVosql = 4;
    if (has_cvosql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvosql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoSrvc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoSrvc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoSrvc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoSrvc::MergeFrom(const PrtoSrvc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivservicetype()) {
      set_ivservicetype(from.ivservicetype());
    }
    if (from.has_cvquery()) {
      mutable_cvquery()->::com::tomting::orion::PrtoL2qr::MergeFrom(from.cvquery());
    }
    if (from.has_cvstatement()) {
      mutable_cvstatement()->::com::tomting::orion::PrtoL2st::MergeFrom(from.cvstatement());
    }
    if (from.has_cvosql()) {
      mutable_cvosql()->::com::tomting::orion::PrtoL2os::MergeFrom(from.cvosql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoSrvc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoSrvc::CopyFrom(const PrtoSrvc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoSrvc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cvquery()) {
    if (!this->cvquery().IsInitialized()) return false;
  }
  if (has_cvstatement()) {
    if (!this->cvstatement().IsInitialized()) return false;
  }
  if (has_cvosql()) {
    if (!this->cvosql().IsInitialized()) return false;
  }
  return true;
}

void PrtoSrvc::Swap(PrtoSrvc* other) {
  if (other != this) {
    std::swap(ivservicetype_, other->ivservicetype_);
    std::swap(cvquery_, other->cvquery_);
    std::swap(cvstatement_, other->cvstatement_);
    std::swap(cvosql_, other->cvosql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoSrvc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoSrvc_descriptor_;
  metadata.reflection = PrtoSrvc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoSrvr::kBVreturnFieldNumber;
const int PrtoSrvr::kCVdmlresultFieldNumber;
#endif  // !_MSC_VER

PrtoSrvr::PrtoSrvr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoSrvr)
}

void PrtoSrvr::InitAsDefaultInstance() {
  cvdmlresult_ = const_cast< ::com::tomting::orion::PrtoL2mr*>(&::com::tomting::orion::PrtoL2mr::default_instance());
}

PrtoSrvr::PrtoSrvr(const PrtoSrvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoSrvr)
}

void PrtoSrvr::SharedCtor() {
  _cached_size_ = 0;
  bvreturn_ = false;
  cvdmlresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoSrvr::~PrtoSrvr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoSrvr)
  SharedDtor();
}

void PrtoSrvr::SharedDtor() {
  if (this != default_instance_) {
    delete cvdmlresult_;
  }
}

void PrtoSrvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoSrvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoSrvr_descriptor_;
}

const PrtoSrvr& PrtoSrvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoSrvr* PrtoSrvr::default_instance_ = NULL;

PrtoSrvr* PrtoSrvr::New() const {
  return new PrtoSrvr;
}

void PrtoSrvr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bvreturn_ = false;
    if (has_cvdmlresult()) {
      if (cvdmlresult_ != NULL) cvdmlresult_->::com::tomting::orion::PrtoL2mr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoSrvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoSrvr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bVreturn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bvreturn_)));
          set_has_bvreturn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVdmlresult;
        break;
      }

      // optional .com.tomting.orion.PrtoL2mr cVdmlresult = 2;
      case 2: {
        if (tag == 18) {
         parse_cVdmlresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvdmlresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoSrvr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoSrvr)
  return false;
#undef DO_
}

void PrtoSrvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoSrvr)
  // optional bool bVreturn = 1;
  if (has_bvreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bvreturn(), output);
  }

  // optional .com.tomting.orion.PrtoL2mr cVdmlresult = 2;
  if (has_cvdmlresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvdmlresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoSrvr)
}

::google::protobuf::uint8* PrtoSrvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoSrvr)
  // optional bool bVreturn = 1;
  if (has_bvreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bvreturn(), target);
  }

  // optional .com.tomting.orion.PrtoL2mr cVdmlresult = 2;
  if (has_cvdmlresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvdmlresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoSrvr)
  return target;
}

int PrtoSrvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bVreturn = 1;
    if (has_bvreturn()) {
      total_size += 1 + 1;
    }

    // optional .com.tomting.orion.PrtoL2mr cVdmlresult = 2;
    if (has_cvdmlresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvdmlresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoSrvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoSrvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoSrvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoSrvr::MergeFrom(const PrtoSrvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bvreturn()) {
      set_bvreturn(from.bvreturn());
    }
    if (from.has_cvdmlresult()) {
      mutable_cvdmlresult()->::com::tomting::orion::PrtoL2mr::MergeFrom(from.cvdmlresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoSrvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoSrvr::CopyFrom(const PrtoSrvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoSrvr::IsInitialized() const {

  if (has_cvdmlresult()) {
    if (!this->cvdmlresult().IsInitialized()) return false;
  }
  return true;
}

void PrtoSrvr::Swap(PrtoSrvr* other) {
  if (other != this) {
    std::swap(bvreturn_, other->bvreturn_);
    std::swap(cvdmlresult_, other->cvdmlresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoSrvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoSrvr_descriptor_;
  metadata.reflection = PrtoSrvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoBsrc::kIVbulkservicetypeFieldNumber;
const int PrtoBsrc::kCVbulkprotoFieldNumber;
const int PrtoBsrc::kCVbulkstringFieldNumber;
const int PrtoBsrc::kCVsingleprotoFieldNumber;
#endif  // !_MSC_VER

PrtoBsrc::PrtoBsrc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoBsrc)
}

void PrtoBsrc::InitAsDefaultInstance() {
  cvsingleproto_ = const_cast< ::com::tomting::orion::PrtoSrvc*>(&::com::tomting::orion::PrtoSrvc::default_instance());
}

PrtoBsrc::PrtoBsrc(const PrtoBsrc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoBsrc)
}

void PrtoBsrc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ivbulkservicetype_ = 0;
  cvsingleproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoBsrc::~PrtoBsrc() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoBsrc)
  SharedDtor();
}

void PrtoBsrc::SharedDtor() {
  if (this != default_instance_) {
    delete cvsingleproto_;
  }
}

void PrtoBsrc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoBsrc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoBsrc_descriptor_;
}

const PrtoBsrc& PrtoBsrc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoBsrc* PrtoBsrc::default_instance_ = NULL;

PrtoBsrc* PrtoBsrc::New() const {
  return new PrtoBsrc;
}

void PrtoBsrc::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    ivbulkservicetype_ = 0;
    if (has_cvsingleproto()) {
      if (cvsingleproto_ != NULL) cvsingleproto_->::com::tomting::orion::PrtoSrvc::Clear();
    }
  }
  cvbulkproto_.Clear();
  cvbulkstring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoBsrc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoBsrc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tomting.orion.iCbulkservicetype iVbulkservicetype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tomting::orion::iCbulkservicetype_IsValid(value)) {
            set_ivbulkservicetype(static_cast< ::com::tomting::orion::iCbulkservicetype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVbulkproto;
        break;
      }

      // repeated .com.tomting.orion.PrtoSrvc cVbulkproto = 2;
      case 2: {
        if (tag == 18) {
         parse_cVbulkproto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvbulkproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVbulkproto;
        if (input->ExpectTag(26)) goto parse_cVbulkstring;
        break;
      }

      // repeated bytes cVbulkstring = 3;
      case 3: {
        if (tag == 26) {
         parse_cVbulkstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_cvbulkstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cVbulkstring;
        if (input->ExpectTag(34)) goto parse_cVsingleproto;
        break;
      }

      // optional .com.tomting.orion.PrtoSrvc cVsingleproto = 4;
      case 4: {
        if (tag == 34) {
         parse_cVsingleproto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvsingleproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoBsrc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoBsrc)
  return false;
#undef DO_
}

void PrtoBsrc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoBsrc)
  // required .com.tomting.orion.iCbulkservicetype iVbulkservicetype = 1;
  if (has_ivbulkservicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ivbulkservicetype(), output);
  }

  // repeated .com.tomting.orion.PrtoSrvc cVbulkproto = 2;
  for (int i = 0; i < this->cvbulkproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cvbulkproto(i), output);
  }

  // repeated bytes cVbulkstring = 3;
  for (int i = 0; i < this->cvbulkstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cvbulkstring(i), output);
  }

  // optional .com.tomting.orion.PrtoSrvc cVsingleproto = 4;
  if (has_cvsingleproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cvsingleproto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoBsrc)
}

::google::protobuf::uint8* PrtoBsrc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoBsrc)
  // required .com.tomting.orion.iCbulkservicetype iVbulkservicetype = 1;
  if (has_ivbulkservicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ivbulkservicetype(), target);
  }

  // repeated .com.tomting.orion.PrtoSrvc cVbulkproto = 2;
  for (int i = 0; i < this->cvbulkproto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cvbulkproto(i), target);
  }

  // repeated bytes cVbulkstring = 3;
  for (int i = 0; i < this->cvbulkstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->cvbulkstring(i), target);
  }

  // optional .com.tomting.orion.PrtoSrvc cVsingleproto = 4;
  if (has_cvsingleproto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cvsingleproto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoBsrc)
  return target;
}

int PrtoBsrc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tomting.orion.iCbulkservicetype iVbulkservicetype = 1;
    if (has_ivbulkservicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ivbulkservicetype());
    }

    // optional .com.tomting.orion.PrtoSrvc cVsingleproto = 4;
    if (has_cvsingleproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvsingleproto());
    }

  }
  // repeated .com.tomting.orion.PrtoSrvc cVbulkproto = 2;
  total_size += 1 * this->cvbulkproto_size();
  for (int i = 0; i < this->cvbulkproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvbulkproto(i));
  }

  // repeated bytes cVbulkstring = 3;
  total_size += 1 * this->cvbulkstring_size();
  for (int i = 0; i < this->cvbulkstring_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->cvbulkstring(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoBsrc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoBsrc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoBsrc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoBsrc::MergeFrom(const PrtoBsrc& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvbulkproto_.MergeFrom(from.cvbulkproto_);
  cvbulkstring_.MergeFrom(from.cvbulkstring_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivbulkservicetype()) {
      set_ivbulkservicetype(from.ivbulkservicetype());
    }
    if (from.has_cvsingleproto()) {
      mutable_cvsingleproto()->::com::tomting::orion::PrtoSrvc::MergeFrom(from.cvsingleproto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoBsrc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoBsrc::CopyFrom(const PrtoBsrc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoBsrc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cvbulkproto())) return false;
  if (has_cvsingleproto()) {
    if (!this->cvsingleproto().IsInitialized()) return false;
  }
  return true;
}

void PrtoBsrc::Swap(PrtoBsrc* other) {
  if (other != this) {
    std::swap(ivbulkservicetype_, other->ivbulkservicetype_);
    cvbulkproto_.Swap(&other->cvbulkproto_);
    cvbulkstring_.Swap(&other->cvbulkstring_);
    std::swap(cvsingleproto_, other->cvsingleproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoBsrc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoBsrc_descriptor_;
  metadata.reflection = PrtoBsrc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtoBsrr::kCVbulkprotoFieldNumber;
const int PrtoBsrr::kCVbulkstringFieldNumber;
const int PrtoBsrr::kCVsingleprotoFieldNumber;
#endif  // !_MSC_VER

PrtoBsrr::PrtoBsrr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.tomting.orion.PrtoBsrr)
}

void PrtoBsrr::InitAsDefaultInstance() {
  cvsingleproto_ = const_cast< ::com::tomting::orion::PrtoSrvr*>(&::com::tomting::orion::PrtoSrvr::default_instance());
}

PrtoBsrr::PrtoBsrr(const PrtoBsrr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.tomting.orion.PrtoBsrr)
}

void PrtoBsrr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cvsingleproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtoBsrr::~PrtoBsrr() {
  // @@protoc_insertion_point(destructor:com.tomting.orion.PrtoBsrr)
  SharedDtor();
}

void PrtoBsrr::SharedDtor() {
  if (this != default_instance_) {
    delete cvsingleproto_;
  }
}

void PrtoBsrr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtoBsrr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtoBsrr_descriptor_;
}

const PrtoBsrr& PrtoBsrr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PrtoAlog_2eproto();
  return *default_instance_;
}

PrtoBsrr* PrtoBsrr::default_instance_ = NULL;

PrtoBsrr* PrtoBsrr::New() const {
  return new PrtoBsrr;
}

void PrtoBsrr::Clear() {
  if (has_cvsingleproto()) {
    if (cvsingleproto_ != NULL) cvsingleproto_->::com::tomting::orion::PrtoSrvr::Clear();
  }
  cvbulkproto_.Clear();
  cvbulkstring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtoBsrr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.tomting.orion.PrtoBsrr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.tomting.orion.PrtoSrvr cVbulkproto = 1;
      case 1: {
        if (tag == 10) {
         parse_cVbulkproto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvbulkproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cVbulkproto;
        if (input->ExpectTag(18)) goto parse_cVbulkstring;
        break;
      }

      // repeated bytes cVbulkstring = 2;
      case 2: {
        if (tag == 18) {
         parse_cVbulkstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_cvbulkstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cVbulkstring;
        if (input->ExpectTag(26)) goto parse_cVsingleproto;
        break;
      }

      // optional .com.tomting.orion.PrtoSrvr cVsingleproto = 3;
      case 3: {
        if (tag == 26) {
         parse_cVsingleproto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvsingleproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.tomting.orion.PrtoBsrr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.tomting.orion.PrtoBsrr)
  return false;
#undef DO_
}

void PrtoBsrr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.tomting.orion.PrtoBsrr)
  // repeated .com.tomting.orion.PrtoSrvr cVbulkproto = 1;
  for (int i = 0; i < this->cvbulkproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvbulkproto(i), output);
  }

  // repeated bytes cVbulkstring = 2;
  for (int i = 0; i < this->cvbulkstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cvbulkstring(i), output);
  }

  // optional .com.tomting.orion.PrtoSrvr cVsingleproto = 3;
  if (has_cvsingleproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cvsingleproto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.tomting.orion.PrtoBsrr)
}

::google::protobuf::uint8* PrtoBsrr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.tomting.orion.PrtoBsrr)
  // repeated .com.tomting.orion.PrtoSrvr cVbulkproto = 1;
  for (int i = 0; i < this->cvbulkproto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cvbulkproto(i), target);
  }

  // repeated bytes cVbulkstring = 2;
  for (int i = 0; i < this->cvbulkstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->cvbulkstring(i), target);
  }

  // optional .com.tomting.orion.PrtoSrvr cVsingleproto = 3;
  if (has_cvsingleproto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cvsingleproto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.tomting.orion.PrtoBsrr)
  return target;
}

int PrtoBsrr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .com.tomting.orion.PrtoSrvr cVsingleproto = 3;
    if (has_cvsingleproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvsingleproto());
    }

  }
  // repeated .com.tomting.orion.PrtoSrvr cVbulkproto = 1;
  total_size += 1 * this->cvbulkproto_size();
  for (int i = 0; i < this->cvbulkproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvbulkproto(i));
  }

  // repeated bytes cVbulkstring = 2;
  total_size += 1 * this->cvbulkstring_size();
  for (int i = 0; i < this->cvbulkstring_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->cvbulkstring(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtoBsrr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtoBsrr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtoBsrr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtoBsrr::MergeFrom(const PrtoBsrr& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvbulkproto_.MergeFrom(from.cvbulkproto_);
  cvbulkstring_.MergeFrom(from.cvbulkstring_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cvsingleproto()) {
      mutable_cvsingleproto()->::com::tomting::orion::PrtoSrvr::MergeFrom(from.cvsingleproto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtoBsrr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtoBsrr::CopyFrom(const PrtoBsrr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtoBsrr::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cvbulkproto())) return false;
  if (has_cvsingleproto()) {
    if (!this->cvsingleproto().IsInitialized()) return false;
  }
  return true;
}

void PrtoBsrr::Swap(PrtoBsrr* other) {
  if (other != this) {
    cvbulkproto_.Swap(&other->cvbulkproto_);
    cvbulkstring_.Swap(&other->cvbulkstring_);
    std::swap(cvsingleproto_, other->cvsingleproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtoBsrr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtoBsrr_descriptor_;
  metadata.reflection = PrtoBsrr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace orion
}  // namespace tomting
}  // namespace com

// @@protoc_insertion_point(global_scope)
